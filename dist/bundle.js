!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s="./src/main.ts")}({"./node_modules/d3-array/src/array.js":function(e,t,n){"use strict";n.r(t),n.d(t,"slice",(function(){return o})),n.d(t,"map",(function(){return i}));var r=Array.prototype,o=r.slice,i=r.map},"./node_modules/d3-array/src/ascending.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}},"./node_modules/d3-array/src/bisect.js":function(e,t,n){"use strict";n.r(t),n.d(t,"bisectRight",(function(){return u})),n.d(t,"bisectLeft",(function(){return s}));var r=n("./node_modules/d3-array/src/ascending.js"),o=n("./node_modules/d3-array/src/bisector.js"),i=Object(o.default)(r.default),u=i.right,s=i.left;t.default=u},"./node_modules/d3-array/src/bisector.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-array/src/ascending.js");t.default=function(e){var t;return 1===e.length&&(t=e,e=function(e,n){return Object(r.default)(t(e),n)}),{left:function(t,n,r,o){for(null==r&&(r=0),null==o&&(o=t.length);r<o;){var i=r+o>>>1;e(t[i],n)<0?r=i+1:o=i}return r},right:function(t,n,r,o){for(null==r&&(r=0),null==o&&(o=t.length);r<o;){var i=r+o>>>1;e(t[i],n)>0?o=i:r=i+1}return r}}}},"./node_modules/d3-array/src/constant.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return e}}},"./node_modules/d3-array/src/cross.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-array/src/pairs.js");t.default=function(e,t,n){var o,i,u,s,c=e.length,a=t.length,d=new Array(c*a);for(null==n&&(n=r.pair),o=u=0;o<c;++o)for(s=e[o],i=0;i<a;++i,++u)d[u]=n(s,t[i]);return d}},"./node_modules/d3-array/src/descending.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){return t<e?-1:t>e?1:t>=e?0:NaN}},"./node_modules/d3-array/src/deviation.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-array/src/variance.js");t.default=function(e,t){var n=Object(r.default)(e,t);return n?Math.sqrt(n):n}},"./node_modules/d3-array/src/extent.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){var n,r,o,i=e.length,u=-1;if(null==t){for(;++u<i;)if(null!=(n=e[u])&&n>=n)for(r=o=n;++u<i;)null!=(n=e[u])&&(r>n&&(r=n),o<n&&(o=n))}else for(;++u<i;)if(null!=(n=t(e[u],u,e))&&n>=n)for(r=o=n;++u<i;)null!=(n=t(e[u],u,e))&&(r>n&&(r=n),o<n&&(o=n));return[r,o]}},"./node_modules/d3-array/src/histogram.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-array/src/array.js"),o=n("./node_modules/d3-array/src/bisect.js"),i=n("./node_modules/d3-array/src/constant.js"),u=n("./node_modules/d3-array/src/extent.js"),s=n("./node_modules/d3-array/src/identity.js"),c=n("./node_modules/d3-array/src/range.js"),a=n("./node_modules/d3-array/src/ticks.js"),d=n("./node_modules/d3-array/src/threshold/sturges.js");t.default=function(){var e=s.default,t=u.default,n=d.default;function l(r){var i,u,s=r.length,d=new Array(s);for(i=0;i<s;++i)d[i]=e(r[i],i,r);var l=t(d),f=l[0],h=l[1],p=n(d,f,h);Array.isArray(p)||(p=Object(a.tickStep)(f,h,p),p=Object(c.default)(Math.ceil(f/p)*p,h,p));for(var m=p.length;p[0]<=f;)p.shift(),--m;for(;p[m-1]>h;)p.pop(),--m;var _,v=new Array(m+1);for(i=0;i<=m;++i)(_=v[i]=[]).x0=i>0?p[i-1]:f,_.x1=i<m?p[i]:h;for(i=0;i<s;++i)f<=(u=d[i])&&u<=h&&v[Object(o.default)(p,u,0,m)].push(r[i]);return v}return l.value=function(t){return arguments.length?(e="function"==typeof t?t:Object(i.default)(t),l):e},l.domain=function(e){return arguments.length?(t="function"==typeof e?e:Object(i.default)([e[0],e[1]]),l):t},l.thresholds=function(e){return arguments.length?(n="function"==typeof e?e:Array.isArray(e)?Object(i.default)(r.slice.call(e)):Object(i.default)(e),l):n},l}},"./node_modules/d3-array/src/identity.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return e}},"./node_modules/d3-array/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-array/src/bisect.js");n.d(t,"bisect",(function(){return r.default})),n.d(t,"bisectRight",(function(){return r.bisectRight})),n.d(t,"bisectLeft",(function(){return r.bisectLeft}));var o=n("./node_modules/d3-array/src/ascending.js");n.d(t,"ascending",(function(){return o.default}));var i=n("./node_modules/d3-array/src/bisector.js");n.d(t,"bisector",(function(){return i.default}));var u=n("./node_modules/d3-array/src/cross.js");n.d(t,"cross",(function(){return u.default}));var s=n("./node_modules/d3-array/src/descending.js");n.d(t,"descending",(function(){return s.default}));var c=n("./node_modules/d3-array/src/deviation.js");n.d(t,"deviation",(function(){return c.default}));var a=n("./node_modules/d3-array/src/extent.js");n.d(t,"extent",(function(){return a.default}));var d=n("./node_modules/d3-array/src/histogram.js");n.d(t,"histogram",(function(){return d.default}));var l=n("./node_modules/d3-array/src/threshold/freedmanDiaconis.js");n.d(t,"thresholdFreedmanDiaconis",(function(){return l.default}));var f=n("./node_modules/d3-array/src/threshold/scott.js");n.d(t,"thresholdScott",(function(){return f.default}));var h=n("./node_modules/d3-array/src/threshold/sturges.js");n.d(t,"thresholdSturges",(function(){return h.default}));var p=n("./node_modules/d3-array/src/max.js");n.d(t,"max",(function(){return p.default}));var m=n("./node_modules/d3-array/src/mean.js");n.d(t,"mean",(function(){return m.default}));var _=n("./node_modules/d3-array/src/median.js");n.d(t,"median",(function(){return _.default}));var v=n("./node_modules/d3-array/src/merge.js");n.d(t,"merge",(function(){return v.default}));var g=n("./node_modules/d3-array/src/min.js");n.d(t,"min",(function(){return g.default}));var b=n("./node_modules/d3-array/src/pairs.js");n.d(t,"pairs",(function(){return b.default}));var j=n("./node_modules/d3-array/src/permute.js");n.d(t,"permute",(function(){return j.default}));var y=n("./node_modules/d3-array/src/quantile.js");n.d(t,"quantile",(function(){return y.default}));var x=n("./node_modules/d3-array/src/range.js");n.d(t,"range",(function(){return x.default}));var w=n("./node_modules/d3-array/src/scan.js");n.d(t,"scan",(function(){return w.default}));var O=n("./node_modules/d3-array/src/shuffle.js");n.d(t,"shuffle",(function(){return O.default}));var M=n("./node_modules/d3-array/src/sum.js");n.d(t,"sum",(function(){return M.default}));var S=n("./node_modules/d3-array/src/ticks.js");n.d(t,"ticks",(function(){return S.default})),n.d(t,"tickIncrement",(function(){return S.tickIncrement})),n.d(t,"tickStep",(function(){return S.tickStep}));var A=n("./node_modules/d3-array/src/transpose.js");n.d(t,"transpose",(function(){return A.default}));var P=n("./node_modules/d3-array/src/variance.js");n.d(t,"variance",(function(){return P.default}));var k=n("./node_modules/d3-array/src/zip.js");n.d(t,"zip",(function(){return k.default}))},"./node_modules/d3-array/src/max.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){var n,r,o=e.length,i=-1;if(null==t){for(;++i<o;)if(null!=(n=e[i])&&n>=n)for(r=n;++i<o;)null!=(n=e[i])&&n>r&&(r=n)}else for(;++i<o;)if(null!=(n=t(e[i],i,e))&&n>=n)for(r=n;++i<o;)null!=(n=t(e[i],i,e))&&n>r&&(r=n);return r}},"./node_modules/d3-array/src/mean.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-array/src/number.js");t.default=function(e,t){var n,o=e.length,i=o,u=-1,s=0;if(null==t)for(;++u<o;)isNaN(n=Object(r.default)(e[u]))?--i:s+=n;else for(;++u<o;)isNaN(n=Object(r.default)(t(e[u],u,e)))?--i:s+=n;if(i)return s/i}},"./node_modules/d3-array/src/median.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-array/src/ascending.js"),o=n("./node_modules/d3-array/src/number.js"),i=n("./node_modules/d3-array/src/quantile.js");t.default=function(e,t){var n,u=e.length,s=-1,c=[];if(null==t)for(;++s<u;)isNaN(n=Object(o.default)(e[s]))||c.push(n);else for(;++s<u;)isNaN(n=Object(o.default)(t(e[s],s,e)))||c.push(n);return Object(i.default)(c.sort(r.default),.5)}},"./node_modules/d3-array/src/merge.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){for(var t,n,r,o=e.length,i=-1,u=0;++i<o;)u+=e[i].length;for(n=new Array(u);--o>=0;)for(t=(r=e[o]).length;--t>=0;)n[--u]=r[t];return n}},"./node_modules/d3-array/src/min.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){var n,r,o=e.length,i=-1;if(null==t){for(;++i<o;)if(null!=(n=e[i])&&n>=n)for(r=n;++i<o;)null!=(n=e[i])&&r>n&&(r=n)}else for(;++i<o;)if(null!=(n=t(e[i],i,e))&&n>=n)for(r=n;++i<o;)null!=(n=t(e[i],i,e))&&r>n&&(r=n);return r}},"./node_modules/d3-array/src/number.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return null===e?NaN:+e}},"./node_modules/d3-array/src/pairs.js":function(e,t,n){"use strict";function r(e,t){return[e,t]}n.r(t),n.d(t,"pair",(function(){return r})),t.default=function(e,t){null==t&&(t=r);for(var n=0,o=e.length-1,i=e[0],u=new Array(o<0?0:o);n<o;)u[n]=t(i,i=e[++n]);return u}},"./node_modules/d3-array/src/permute.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){for(var n=t.length,r=new Array(n);n--;)r[n]=e[t[n]];return r}},"./node_modules/d3-array/src/quantile.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-array/src/number.js");t.default=function(e,t,n){if(null==n&&(n=r.default),o=e.length){if((t=+t)<=0||o<2)return+n(e[0],0,e);if(t>=1)return+n(e[o-1],o-1,e);var o,i=(o-1)*t,u=Math.floor(i),s=+n(e[u],u,e);return s+(+n(e[u+1],u+1,e)-s)*(i-u)}}},"./node_modules/d3-array/src/range.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t,n){e=+e,t=+t,n=(o=arguments.length)<2?(t=e,e=0,1):o<3?1:+n;for(var r=-1,o=0|Math.max(0,Math.ceil((t-e)/n)),i=new Array(o);++r<o;)i[r]=e+r*n;return i}},"./node_modules/d3-array/src/scan.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-array/src/ascending.js");t.default=function(e,t){if(n=e.length){var n,o,i=0,u=0,s=e[u];for(null==t&&(t=r.default);++i<n;)(t(o=e[i],s)<0||0!==t(s,s))&&(s=o,u=i);return 0===t(s,s)?u:void 0}}},"./node_modules/d3-array/src/shuffle.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t,n){for(var r,o,i=(null==n?e.length:n)-(t=null==t?0:+t);i;)o=Math.random()*i--|0,r=e[i+t],e[i+t]=e[o+t],e[o+t]=r;return e}},"./node_modules/d3-array/src/sum.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){var n,r=e.length,o=-1,i=0;if(null==t)for(;++o<r;)(n=+e[o])&&(i+=n);else for(;++o<r;)(n=+t(e[o],o,e))&&(i+=n);return i}},"./node_modules/d3-array/src/threshold/freedmanDiaconis.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-array/src/array.js"),o=n("./node_modules/d3-array/src/ascending.js"),i=n("./node_modules/d3-array/src/number.js"),u=n("./node_modules/d3-array/src/quantile.js");t.default=function(e,t,n){return e=r.map.call(e,i.default).sort(o.default),Math.ceil((n-t)/(2*(Object(u.default)(e,.75)-Object(u.default)(e,.25))*Math.pow(e.length,-1/3)))}},"./node_modules/d3-array/src/threshold/scott.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-array/src/deviation.js");t.default=function(e,t,n){return Math.ceil((n-t)/(3.5*Object(r.default)(e)*Math.pow(e.length,-1/3)))}},"./node_modules/d3-array/src/threshold/sturges.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return Math.ceil(Math.log(e.length)/Math.LN2)+1}},"./node_modules/d3-array/src/ticks.js":function(e,t,n){"use strict";n.r(t),n.d(t,"tickIncrement",(function(){return u})),n.d(t,"tickStep",(function(){return s}));var r=Math.sqrt(50),o=Math.sqrt(10),i=Math.sqrt(2);function u(e,t,n){var u=(t-e)/Math.max(0,n),s=Math.floor(Math.log(u)/Math.LN10),c=u/Math.pow(10,s);return s>=0?(c>=r?10:c>=o?5:c>=i?2:1)*Math.pow(10,s):-Math.pow(10,-s)/(c>=r?10:c>=o?5:c>=i?2:1)}function s(e,t,n){var u=Math.abs(t-e)/Math.max(0,n),s=Math.pow(10,Math.floor(Math.log(u)/Math.LN10)),c=u/s;return c>=r?s*=10:c>=o?s*=5:c>=i&&(s*=2),t<e?-s:s}t.default=function(e,t,n){var r,o,i,s,c=-1;if(n=+n,(e=+e)===(t=+t)&&n>0)return[e];if((r=t<e)&&(o=e,e=t,t=o),0===(s=u(e,t,n))||!isFinite(s))return[];if(s>0)for(e=Math.ceil(e/s),t=Math.floor(t/s),i=new Array(o=Math.ceil(t-e+1));++c<o;)i[c]=(e+c)*s;else for(e=Math.floor(e*s),t=Math.ceil(t*s),i=new Array(o=Math.ceil(e-t+1));++c<o;)i[c]=(e-c)/s;return r&&i.reverse(),i}},"./node_modules/d3-array/src/transpose.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-array/src/min.js");function o(e){return e.length}t.default=function(e){if(!(u=e.length))return[];for(var t=-1,n=Object(r.default)(e,o),i=new Array(n);++t<n;)for(var u,s=-1,c=i[t]=new Array(u);++s<u;)c[s]=e[s][t];return i}},"./node_modules/d3-array/src/variance.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-array/src/number.js");t.default=function(e,t){var n,o,i=e.length,u=0,s=-1,c=0,a=0;if(null==t)for(;++s<i;)isNaN(n=Object(r.default)(e[s]))||(a+=(o=n-c)*(n-(c+=o/++u)));else for(;++s<i;)isNaN(n=Object(r.default)(t(e[s],s,e)))||(a+=(o=n-c)*(n-(c+=o/++u)));if(u>1)return a/(u-1)}},"./node_modules/d3-array/src/zip.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-array/src/transpose.js");t.default=function(){return Object(r.default)(arguments)}},"./node_modules/d3-axis/src/array.js":function(e,t,n){"use strict";n.r(t),n.d(t,"slice",(function(){return r}));var r=Array.prototype.slice},"./node_modules/d3-axis/src/axis.js":function(e,t,n){"use strict";n.r(t),n.d(t,"axisTop",(function(){return l})),n.d(t,"axisRight",(function(){return f})),n.d(t,"axisBottom",(function(){return h})),n.d(t,"axisLeft",(function(){return p}));var r=n("./node_modules/d3-axis/src/array.js"),o=n("./node_modules/d3-axis/src/identity.js");function i(e){return"translate("+(e+.5)+",0)"}function u(e){return"translate(0,"+(e+.5)+")"}function s(e){return function(t){return+e(t)}}function c(e){var t=Math.max(0,e.bandwidth()-1)/2;return e.round()&&(t=Math.round(t)),function(n){return+e(n)+t}}function a(){return!this.__axis}function d(e,t){var n=[],d=null,l=null,f=6,h=6,p=3,m=1===e||4===e?-1:1,_=4===e||2===e?"x":"y",v=1===e||3===e?i:u;function g(r){var i=null==d?t.ticks?t.ticks.apply(t,n):t.domain():d,u=null==l?t.tickFormat?t.tickFormat.apply(t,n):o.default:l,g=Math.max(f,0)+p,b=t.range(),j=+b[0]+.5,y=+b[b.length-1]+.5,x=(t.bandwidth?c:s)(t.copy()),w=r.selection?r.selection():r,O=w.selectAll(".domain").data([null]),M=w.selectAll(".tick").data(i,t).order(),S=M.exit(),A=M.enter().append("g").attr("class","tick"),P=M.select("line"),k=M.select("text");O=O.merge(O.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),M=M.merge(A),P=P.merge(A.append("line").attr("stroke","currentColor").attr(_+"2",m*f)),k=k.merge(A.append("text").attr("fill","currentColor").attr(_,m*g).attr("dy",1===e?"0em":3===e?"0.71em":"0.32em")),r!==w&&(O=O.transition(r),M=M.transition(r),P=P.transition(r),k=k.transition(r),S=S.transition(r).attr("opacity",1e-6).attr("transform",(function(e){return isFinite(e=x(e))?v(e):this.getAttribute("transform")})),A.attr("opacity",1e-6).attr("transform",(function(e){var t=this.parentNode.__axis;return v(t&&isFinite(t=t(e))?t:x(e))}))),S.remove(),O.attr("d",4===e||2==e?h?"M"+m*h+","+j+"H0.5V"+y+"H"+m*h:"M0.5,"+j+"V"+y:h?"M"+j+","+m*h+"V0.5H"+y+"V"+m*h:"M"+j+",0.5H"+y),M.attr("opacity",1).attr("transform",(function(e){return v(x(e))})),P.attr(_+"2",m*f),k.attr(_,m*g).text(u),w.filter(a).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===e?"start":4===e?"end":"middle"),w.each((function(){this.__axis=x}))}return g.scale=function(e){return arguments.length?(t=e,g):t},g.ticks=function(){return n=r.slice.call(arguments),g},g.tickArguments=function(e){return arguments.length?(n=null==e?[]:r.slice.call(e),g):n.slice()},g.tickValues=function(e){return arguments.length?(d=null==e?null:r.slice.call(e),g):d&&d.slice()},g.tickFormat=function(e){return arguments.length?(l=e,g):l},g.tickSize=function(e){return arguments.length?(f=h=+e,g):f},g.tickSizeInner=function(e){return arguments.length?(f=+e,g):f},g.tickSizeOuter=function(e){return arguments.length?(h=+e,g):h},g.tickPadding=function(e){return arguments.length?(p=+e,g):p},g}function l(e){return d(1,e)}function f(e){return d(2,e)}function h(e){return d(3,e)}function p(e){return d(4,e)}},"./node_modules/d3-axis/src/identity.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return e}},"./node_modules/d3-axis/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-axis/src/axis.js");n.d(t,"axisTop",(function(){return r.axisTop})),n.d(t,"axisRight",(function(){return r.axisRight})),n.d(t,"axisBottom",(function(){return r.axisBottom})),n.d(t,"axisLeft",(function(){return r.axisLeft}))},"./node_modules/d3-brush/src/brush.js":function(e,t,n){"use strict";n.r(t),n.d(t,"brushSelection",(function(){return E})),n.d(t,"brushX",(function(){return R})),n.d(t,"brushY",(function(){return N}));var r=n("./node_modules/d3-dispatch/src/index.js"),o=n("./node_modules/d3-drag/src/index.js"),i=n("./node_modules/d3-interpolate/src/index.js"),u=n("./node_modules/d3-selection/src/index.js"),s=n("./node_modules/d3-transition/src/index.js"),c=n("./node_modules/d3-brush/src/constant.js"),a=n("./node_modules/d3-brush/src/event.js"),d=n("./node_modules/d3-brush/src/noevent.js"),l={name:"drag"},f={name:"space"},h={name:"handle"},p={name:"center"};function m(e){return[+e[0],+e[1]]}function _(e){return[m(e[0]),m(e[1])]}function v(e){return function(t){return Object(u.touch)(t,u.event.touches,e)}}var g={name:"x",handles:["w","e"].map(S),input:function(e,t){return null==e?null:[[+e[0],t[0][1]],[+e[1],t[1][1]]]},output:function(e){return e&&[e[0][0],e[1][0]]}},b={name:"y",handles:["n","s"].map(S),input:function(e,t){return null==e?null:[[t[0][0],+e[0]],[t[1][0],+e[1]]]},output:function(e){return e&&[e[0][1],e[1][1]]}},j={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(S),input:function(e){return null==e?null:_(e)},output:function(e){return e}},y={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},x={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},w={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},O={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},M={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function S(e){return{type:e}}function A(){return!u.event.ctrlKey&&!u.event.button}function P(){var e=this.ownerSVGElement||this;return e.hasAttribute("viewBox")?[[(e=e.viewBox.baseVal).x,e.y],[e.x+e.width,e.y+e.height]]:[[0,0],[e.width.baseVal.value,e.height.baseVal.value]]}function k(){return navigator.maxTouchPoints||"ontouchstart"in this}function C(e){for(;!e.__brush;)if(!(e=e.parentNode))return;return e.__brush}function T(e){return e[0][0]===e[1][0]||e[0][1]===e[1][1]}function E(e){var t=e.__brush;return t?t.dim.output(t.selection):null}function R(){return q(g)}function N(){return q(b)}function q(e){var t,n=P,m=A,j=k,E=!0,R=Object(r.dispatch)("start","brush","end"),N=6;function q(t){var n=t.property("__brush",U).selectAll(".overlay").data([S("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",y.overlay).merge(n).each((function(){var e=C(this).extent;Object(u.select)(this).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1])})),t.selectAll(".selection").data([S("selection")]).enter().append("rect").attr("class","selection").attr("cursor",y.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=t.selectAll(".handle").data(e.handles,(function(e){return e.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(e){return"handle handle--"+e.type})).attr("cursor",(function(e){return y[e.type]})),t.each(B).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",L).filter(j).on("touchstart.brush",L).on("touchmove.brush",z).on("touchend.brush touchcancel.brush",F).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function B(){var e=Object(u.select)(this),t=C(this).selection;t?(e.selectAll(".selection").style("display",null).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1]),e.selectAll(".handle").style("display",null).attr("x",(function(e){return"e"===e.type[e.type.length-1]?t[1][0]-N/2:t[0][0]-N/2})).attr("y",(function(e){return"s"===e.type[0]?t[1][1]-N/2:t[0][1]-N/2})).attr("width",(function(e){return"n"===e.type||"s"===e.type?t[1][0]-t[0][0]+N:N})).attr("height",(function(e){return"e"===e.type||"w"===e.type?t[1][1]-t[0][1]+N:N}))):e.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function I(e,t,n){return!n&&e.__brush.emitter||new D(e,t)}function D(e,t){this.that=e,this.args=t,this.state=e.__brush,this.active=0}function L(){if((!t||u.event.touches)&&m.apply(this,arguments)){var n,r,i,c,a,_,j,S,A,P,k,R=this,N=u.event.target.__data__.type,q="selection"===(E&&u.event.metaKey?N="overlay":N)?l:E&&u.event.altKey?p:h,D=e===b?null:O[N],L=e===g?null:M[N],z=C(R),F=z.extent,U=z.selection,Y=F[0][0],H=F[0][1],G=F[1][0],W=F[1][1],$=0,V=0,X=D&&L&&E&&u.event.shiftKey,Z=u.event.touches?v(u.event.changedTouches[0].identifier):u.mouse,Q=Z(R),K=Q,J=I(R,arguments,!0).beforestart();"overlay"===N?(U&&(A=!0),z.selection=U=[[n=e===b?Y:Q[0],i=e===g?H:Q[1]],[a=e===b?G:n,j=e===g?W:i]]):(n=U[0][0],i=U[0][1],a=U[1][0],j=U[1][1]),r=n,c=i,_=a,S=j;var ee=Object(u.select)(R).attr("pointer-events","none"),te=ee.selectAll(".overlay").attr("cursor",y[N]);if(u.event.touches)J.moved=re,J.ended=ie;else{var ne=Object(u.select)(u.event.view).on("mousemove.brush",re,!0).on("mouseup.brush",ie,!0);E&&ne.on("keydown.brush",ue,!0).on("keyup.brush",se,!0),Object(o.dragDisable)(u.event.view)}Object(d.nopropagation)(),Object(s.interrupt)(R),B.call(R),J.start()}function re(){var e=Z(R);!X||P||k||(Math.abs(e[0]-K[0])>Math.abs(e[1]-K[1])?k=!0:P=!0),K=e,A=!0,Object(d.default)(),oe()}function oe(){var e;switch($=K[0]-Q[0],V=K[1]-Q[1],q){case f:case l:D&&($=Math.max(Y-n,Math.min(G-a,$)),r=n+$,_=a+$),L&&(V=Math.max(H-i,Math.min(W-j,V)),c=i+V,S=j+V);break;case h:D<0?($=Math.max(Y-n,Math.min(G-n,$)),r=n+$,_=a):D>0&&($=Math.max(Y-a,Math.min(G-a,$)),r=n,_=a+$),L<0?(V=Math.max(H-i,Math.min(W-i,V)),c=i+V,S=j):L>0&&(V=Math.max(H-j,Math.min(W-j,V)),c=i,S=j+V);break;case p:D&&(r=Math.max(Y,Math.min(G,n-$*D)),_=Math.max(Y,Math.min(G,a+$*D))),L&&(c=Math.max(H,Math.min(W,i-V*L)),S=Math.max(H,Math.min(W,j+V*L)))}_<r&&(D*=-1,e=n,n=a,a=e,e=r,r=_,_=e,N in x&&te.attr("cursor",y[N=x[N]])),S<c&&(L*=-1,e=i,i=j,j=e,e=c,c=S,S=e,N in w&&te.attr("cursor",y[N=w[N]])),z.selection&&(U=z.selection),P&&(r=U[0][0],_=U[1][0]),k&&(c=U[0][1],S=U[1][1]),U[0][0]===r&&U[0][1]===c&&U[1][0]===_&&U[1][1]===S||(z.selection=[[r,c],[_,S]],B.call(R),J.brush())}function ie(){if(Object(d.nopropagation)(),u.event.touches){if(u.event.touches.length)return;t&&clearTimeout(t),t=setTimeout((function(){t=null}),500)}else Object(o.dragEnable)(u.event.view,A),ne.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);ee.attr("pointer-events","all"),te.attr("cursor",y.overlay),z.selection&&(U=z.selection),T(U)&&(z.selection=null,B.call(R)),J.end()}function ue(){switch(u.event.keyCode){case 16:X=D&&L;break;case 18:q===h&&(D&&(a=_-$*D,n=r+$*D),L&&(j=S-V*L,i=c+V*L),q=p,oe());break;case 32:q!==h&&q!==p||(D<0?a=_-$:D>0&&(n=r-$),L<0?j=S-V:L>0&&(i=c-V),q=f,te.attr("cursor",y.selection),oe());break;default:return}Object(d.default)()}function se(){switch(u.event.keyCode){case 16:X&&(P=k=X=!1,oe());break;case 18:q===p&&(D<0?a=_:D>0&&(n=r),L<0?j=S:L>0&&(i=c),q=h,oe());break;case 32:q===f&&(u.event.altKey?(D&&(a=_-$*D,n=r+$*D),L&&(j=S-V*L,i=c+V*L),q=p):(D<0?a=_:D>0&&(n=r),L<0?j=S:L>0&&(i=c),q=h),te.attr("cursor",y[N]),oe());break;default:return}Object(d.default)()}}function z(){I(this,arguments).moved()}function F(){I(this,arguments).ended()}function U(){var t=this.__brush||{selection:null};return t.extent=_(n.apply(this,arguments)),t.dim=e,t}return q.move=function(t,n){t.selection?t.on("start.brush",(function(){I(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){I(this,arguments).end()})).tween("brush",(function(){var t=this,r=t.__brush,o=I(t,arguments),u=r.selection,s=e.input("function"==typeof n?n.apply(this,arguments):n,r.extent),c=Object(i.interpolate)(u,s);function a(e){r.selection=1===e&&null===s?null:c(e),B.call(t),o.brush()}return null!==u&&null!==s?a:a(1)})):t.each((function(){var t=this,r=arguments,o=t.__brush,i=e.input("function"==typeof n?n.apply(t,r):n,o.extent),u=I(t,r).beforestart();Object(s.interrupt)(t),o.selection=null===i?null:i,B.call(t),u.start().brush().end()}))},q.clear=function(e){q.move(e,null)},D.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting?(this.starting=!1,this.emit("start")):this.emit("brush"),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(t){Object(u.customEvent)(new a.default(q,t,e.output(this.state.selection)),R.apply,R,[t,this.that,this.args])}},q.extent=function(e){return arguments.length?(n="function"==typeof e?e:Object(c.default)(_(e)),q):n},q.filter=function(e){return arguments.length?(m="function"==typeof e?e:Object(c.default)(!!e),q):m},q.touchable=function(e){return arguments.length?(j="function"==typeof e?e:Object(c.default)(!!e),q):j},q.handleSize=function(e){return arguments.length?(N=+e,q):N},q.keyModifiers=function(e){return arguments.length?(E=!!e,q):E},q.on=function(){var e=R.on.apply(R,arguments);return e===R?q:e},q}t.default=function(){return q(j)}},"./node_modules/d3-brush/src/constant.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return e}}},"./node_modules/d3-brush/src/event.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t,n){this.target=e,this.type=t,this.selection=n}},"./node_modules/d3-brush/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-brush/src/brush.js");n.d(t,"brush",(function(){return r.default})),n.d(t,"brushX",(function(){return r.brushX})),n.d(t,"brushY",(function(){return r.brushY})),n.d(t,"brushSelection",(function(){return r.brushSelection}))},"./node_modules/d3-brush/src/noevent.js":function(e,t,n){"use strict";n.r(t),n.d(t,"nopropagation",(function(){return o}));var r=n("./node_modules/d3-selection/src/index.js");function o(){r.event.stopImmediatePropagation()}t.default=function(){r.event.preventDefault(),r.event.stopImmediatePropagation()}},"./node_modules/d3-chord/src/array.js":function(e,t,n){"use strict";n.r(t),n.d(t,"slice",(function(){return r}));var r=Array.prototype.slice},"./node_modules/d3-chord/src/chord.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-array/src/index.js"),o=n("./node_modules/d3-chord/src/math.js");function i(e){return function(t,n){return e(t.source.value+t.target.value,n.source.value+n.target.value)}}t.default=function(){var e=0,t=null,n=null,u=null;function s(i){var s,c,a,d,l,f,h=i.length,p=[],m=Object(r.range)(h),_=[],v=[],g=v.groups=new Array(h),b=new Array(h*h);for(s=0,l=-1;++l<h;){for(c=0,f=-1;++f<h;)c+=i[l][f];p.push(c),_.push(Object(r.range)(h)),s+=c}for(t&&m.sort((function(e,n){return t(p[e],p[n])})),n&&_.forEach((function(e,t){e.sort((function(e,r){return n(i[t][e],i[t][r])}))})),d=(s=Object(o.max)(0,o.tau-e*h)/s)?e:o.tau/h,c=0,l=-1;++l<h;){for(a=c,f=-1;++f<h;){var j=m[l],y=_[j][f],x=i[j][y],w=c,O=c+=x*s;b[y*h+j]={index:j,subindex:y,startAngle:w,endAngle:O,value:x}}g[j]={index:j,startAngle:a,endAngle:c,value:p[j]},c+=d}for(l=-1;++l<h;)for(f=l-1;++f<h;){var M=b[f*h+l],S=b[l*h+f];(M.value||S.value)&&v.push(M.value<S.value?{source:S,target:M}:{source:M,target:S})}return u?v.sort(u):v}return s.padAngle=function(t){return arguments.length?(e=Object(o.max)(0,t),s):e},s.sortGroups=function(e){return arguments.length?(t=e,s):t},s.sortSubgroups=function(e){return arguments.length?(n=e,s):n},s.sortChords=function(e){return arguments.length?(null==e?u=null:(u=i(e))._=e,s):u&&u._},s}},"./node_modules/d3-chord/src/constant.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return e}}},"./node_modules/d3-chord/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-chord/src/chord.js");n.d(t,"chord",(function(){return r.default}));var o=n("./node_modules/d3-chord/src/ribbon.js");n.d(t,"ribbon",(function(){return o.default}))},"./node_modules/d3-chord/src/math.js":function(e,t,n){"use strict";n.r(t),n.d(t,"cos",(function(){return r})),n.d(t,"sin",(function(){return o})),n.d(t,"pi",(function(){return i})),n.d(t,"halfPi",(function(){return u})),n.d(t,"tau",(function(){return s})),n.d(t,"max",(function(){return c}));var r=Math.cos,o=Math.sin,i=Math.PI,u=i/2,s=2*i,c=Math.max},"./node_modules/d3-chord/src/ribbon.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-chord/src/array.js"),o=n("./node_modules/d3-chord/src/constant.js"),i=n("./node_modules/d3-chord/src/math.js"),u=n("./node_modules/d3-path/src/index.js");function s(e){return e.source}function c(e){return e.target}function a(e){return e.radius}function d(e){return e.startAngle}function l(e){return e.endAngle}t.default=function(){var e=s,t=c,n=a,f=d,h=l,p=null;function m(){var o,s=r.slice.call(arguments),c=e.apply(this,s),a=t.apply(this,s),d=+n.apply(this,(s[0]=c,s)),l=f.apply(this,s)-i.halfPi,m=h.apply(this,s)-i.halfPi,_=d*Object(i.cos)(l),v=d*Object(i.sin)(l),g=+n.apply(this,(s[0]=a,s)),b=f.apply(this,s)-i.halfPi,j=h.apply(this,s)-i.halfPi;if(p||(p=o=Object(u.path)()),p.moveTo(_,v),p.arc(0,0,d,l,m),l===b&&m===j||(p.quadraticCurveTo(0,0,g*Object(i.cos)(b),g*Object(i.sin)(b)),p.arc(0,0,g,b,j)),p.quadraticCurveTo(0,0,_,v),p.closePath(),o)return p=null,o+""||null}return m.radius=function(e){return arguments.length?(n="function"==typeof e?e:Object(o.default)(+e),m):n},m.startAngle=function(e){return arguments.length?(f="function"==typeof e?e:Object(o.default)(+e),m):f},m.endAngle=function(e){return arguments.length?(h="function"==typeof e?e:Object(o.default)(+e),m):h},m.source=function(t){return arguments.length?(e=t,m):e},m.target=function(e){return arguments.length?(t=e,m):t},m.context=function(e){return arguments.length?(p=null==e?null:e,m):p},m}},"./node_modules/d3-collection/src/entries.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){var t=[];for(var n in e)t.push({key:n,value:e[n]});return t}},"./node_modules/d3-collection/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-collection/src/nest.js");n.d(t,"nest",(function(){return r.default}));var o=n("./node_modules/d3-collection/src/set.js");n.d(t,"set",(function(){return o.default}));var i=n("./node_modules/d3-collection/src/map.js");n.d(t,"map",(function(){return i.default}));var u=n("./node_modules/d3-collection/src/keys.js");n.d(t,"keys",(function(){return u.default}));var s=n("./node_modules/d3-collection/src/values.js");n.d(t,"values",(function(){return s.default}));var c=n("./node_modules/d3-collection/src/entries.js");n.d(t,"entries",(function(){return c.default}))},"./node_modules/d3-collection/src/keys.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){var t=[];for(var n in e)t.push(n);return t}},"./node_modules/d3-collection/src/map.js":function(e,t,n){"use strict";n.r(t),n.d(t,"prefix",(function(){return r}));var r="$";function o(){}function i(e,t){var n=new o;if(e instanceof o)e.each((function(e,t){n.set(t,e)}));else if(Array.isArray(e)){var r,i=-1,u=e.length;if(null==t)for(;++i<u;)n.set(i,e[i]);else for(;++i<u;)n.set(t(r=e[i],i,e),r)}else if(e)for(var s in e)n.set(s,e[s]);return n}o.prototype=i.prototype={constructor:o,has:function(e){return r+e in this},get:function(e){return this[r+e]},set:function(e,t){return this[r+e]=t,this},remove:function(e){var t=r+e;return t in this&&delete this[t]},clear:function(){for(var e in this)e[0]===r&&delete this[e]},keys:function(){var e=[];for(var t in this)t[0]===r&&e.push(t.slice(1));return e},values:function(){var e=[];for(var t in this)t[0]===r&&e.push(this[t]);return e},entries:function(){var e=[];for(var t in this)t[0]===r&&e.push({key:t.slice(1),value:this[t]});return e},size:function(){var e=0;for(var t in this)t[0]===r&&++e;return e},empty:function(){for(var e in this)if(e[0]===r)return!1;return!0},each:function(e){for(var t in this)t[0]===r&&e(this[t],t.slice(1),this)}},t.default=i},"./node_modules/d3-collection/src/nest.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-collection/src/map.js");function o(){return{}}function i(e,t,n){e[t]=n}function u(){return Object(r.default)()}function s(e,t,n){e.set(t,n)}t.default=function(){var e,t,n,c=[],a=[];function d(n,o,i,u){if(o>=c.length)return null!=e&&n.sort(e),null!=t?t(n):n;for(var s,a,l,f=-1,h=n.length,p=c[o++],m=Object(r.default)(),_=i();++f<h;)(l=m.get(s=p(a=n[f])+""))?l.push(a):m.set(s,[a]);return m.each((function(e,t){u(_,t,d(e,o,i,u))})),_}return n={object:function(e){return d(e,0,o,i)},map:function(e){return d(e,0,u,s)},entries:function(e){return function e(n,r){if(++r>c.length)return n;var o,i=a[r-1];return null!=t&&r>=c.length?o=n.entries():(o=[],n.each((function(t,n){o.push({key:n,values:e(t,r)})}))),null!=i?o.sort((function(e,t){return i(e.key,t.key)})):o}(d(e,0,u,s),0)},key:function(e){return c.push(e),n},sortKeys:function(e){return a[c.length-1]=e,n},sortValues:function(t){return e=t,n},rollup:function(e){return t=e,n}}}},"./node_modules/d3-collection/src/set.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-collection/src/map.js");function o(){}var i=r.default.prototype;function u(e,t){var n=new o;if(e instanceof o)e.each((function(e){n.add(e)}));else if(e){var r=-1,i=e.length;if(null==t)for(;++r<i;)n.add(e[r]);else for(;++r<i;)n.add(t(e[r],r,e))}return n}o.prototype=u.prototype={constructor:o,has:i.has,add:function(e){return e+="",this[r.prefix+e]=e,this},remove:i.remove,clear:i.clear,values:i.keys,size:i.size,empty:i.empty,each:i.each},t.default=u},"./node_modules/d3-collection/src/values.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){var t=[];for(var n in e)t.push(e[n]);return t}},"./node_modules/d3-color/src/color.js":function(e,t,n){"use strict";n.r(t),n.d(t,"Color",(function(){return o})),n.d(t,"darker",(function(){return i})),n.d(t,"brighter",(function(){return u})),n.d(t,"default",(function(){return j})),n.d(t,"rgbConvert",(function(){return w})),n.d(t,"rgb",(function(){return O})),n.d(t,"Rgb",(function(){return M})),n.d(t,"hslConvert",(function(){return C})),n.d(t,"hsl",(function(){return T}));var r=n("./node_modules/d3-color/src/define.js");function o(){}var i=.7,u=1/i,s="\\s*([+-]?\\d+)\\s*",c="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",a="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",d=/^#([0-9a-f]{3,8})$/,l=new RegExp("^rgb\\("+[s,s,s]+"\\)$"),f=new RegExp("^rgb\\("+[a,a,a]+"\\)$"),h=new RegExp("^rgba\\("+[s,s,s,c]+"\\)$"),p=new RegExp("^rgba\\("+[a,a,a,c]+"\\)$"),m=new RegExp("^hsl\\("+[c,a,a]+"\\)$"),_=new RegExp("^hsla\\("+[c,a,a,c]+"\\)$"),v={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function g(){return this.rgb().formatHex()}function b(){return this.rgb().formatRgb()}function j(e){var t,n;return e=(e+"").trim().toLowerCase(),(t=d.exec(e))?(n=t[1].length,t=parseInt(t[1],16),6===n?y(t):3===n?new M(t>>8&15|t>>4&240,t>>4&15|240&t,(15&t)<<4|15&t,1):8===n?x(t>>24&255,t>>16&255,t>>8&255,(255&t)/255):4===n?x(t>>12&15|t>>8&240,t>>8&15|t>>4&240,t>>4&15|240&t,((15&t)<<4|15&t)/255):null):(t=l.exec(e))?new M(t[1],t[2],t[3],1):(t=f.exec(e))?new M(255*t[1]/100,255*t[2]/100,255*t[3]/100,1):(t=h.exec(e))?x(t[1],t[2],t[3],t[4]):(t=p.exec(e))?x(255*t[1]/100,255*t[2]/100,255*t[3]/100,t[4]):(t=m.exec(e))?k(t[1],t[2]/100,t[3]/100,1):(t=_.exec(e))?k(t[1],t[2]/100,t[3]/100,t[4]):v.hasOwnProperty(e)?y(v[e]):"transparent"===e?new M(NaN,NaN,NaN,0):null}function y(e){return new M(e>>16&255,e>>8&255,255&e,1)}function x(e,t,n,r){return r<=0&&(e=t=n=NaN),new M(e,t,n,r)}function w(e){return e instanceof o||(e=j(e)),e?new M((e=e.rgb()).r,e.g,e.b,e.opacity):new M}function O(e,t,n,r){return 1===arguments.length?w(e):new M(e,t,n,null==r?1:r)}function M(e,t,n,r){this.r=+e,this.g=+t,this.b=+n,this.opacity=+r}function S(){return"#"+P(this.r)+P(this.g)+P(this.b)}function A(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===e?")":", "+e+")")}function P(e){return((e=Math.max(0,Math.min(255,Math.round(e)||0)))<16?"0":"")+e.toString(16)}function k(e,t,n,r){return r<=0?e=t=n=NaN:n<=0||n>=1?e=t=NaN:t<=0&&(e=NaN),new E(e,t,n,r)}function C(e){if(e instanceof E)return new E(e.h,e.s,e.l,e.opacity);if(e instanceof o||(e=j(e)),!e)return new E;if(e instanceof E)return e;var t=(e=e.rgb()).r/255,n=e.g/255,r=e.b/255,i=Math.min(t,n,r),u=Math.max(t,n,r),s=NaN,c=u-i,a=(u+i)/2;return c?(s=t===u?(n-r)/c+6*(n<r):n===u?(r-t)/c+2:(t-n)/c+4,c/=a<.5?u+i:2-u-i,s*=60):c=a>0&&a<1?0:s,new E(s,c,a,e.opacity)}function T(e,t,n,r){return 1===arguments.length?C(e):new E(e,t,n,null==r?1:r)}function E(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function R(e,t,n){return 255*(e<60?t+(n-t)*e/60:e<180?n:e<240?t+(n-t)*(240-e)/60:t)}Object(r.default)(o,j,{copy:function(e){return Object.assign(new this.constructor,this,e)},displayable:function(){return this.rgb().displayable()},hex:g,formatHex:g,formatHsl:function(){return C(this).formatHsl()},formatRgb:b,toString:b}),Object(r.default)(M,O,Object(r.extend)(o,{brighter:function(e){return e=null==e?u:Math.pow(u,e),new M(this.r*e,this.g*e,this.b*e,this.opacity)},darker:function(e){return e=null==e?i:Math.pow(i,e),new M(this.r*e,this.g*e,this.b*e,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:S,formatHex:S,formatRgb:A,toString:A})),Object(r.default)(E,T,Object(r.extend)(o,{brighter:function(e){return e=null==e?u:Math.pow(u,e),new E(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?i:Math.pow(i,e),new E(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=this.h%360+360*(this.h<0),t=isNaN(e)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*t,o=2*n-r;return new M(R(e>=240?e-240:e+120,o,r),R(e,o,r),R(e<120?e+240:e-120,o,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===e?")":", "+e+")")}}))},"./node_modules/d3-color/src/cubehelix.js":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return m})),n.d(t,"Cubehelix",(function(){return _}));var r=n("./node_modules/d3-color/src/define.js"),o=n("./node_modules/d3-color/src/color.js"),i=n("./node_modules/d3-color/src/math.js"),u=-.14861,s=1.78277,c=-.29227,a=-.90649,d=1.97294,l=d*a,f=d*s,h=s*c-a*u;function p(e){if(e instanceof _)return new _(e.h,e.s,e.l,e.opacity);e instanceof o.Rgb||(e=Object(o.rgbConvert)(e));var t=e.r/255,n=e.g/255,r=e.b/255,u=(h*r+l*t-f*n)/(h+l-f),s=r-u,p=(d*(n-u)-c*s)/a,m=Math.sqrt(p*p+s*s)/(d*u*(1-u)),v=m?Math.atan2(p,s)*i.rad2deg-120:NaN;return new _(v<0?v+360:v,m,u,e.opacity)}function m(e,t,n,r){return 1===arguments.length?p(e):new _(e,t,n,null==r?1:r)}function _(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}Object(r.default)(_,m,Object(r.extend)(o.Color,{brighter:function(e){return e=null==e?o.brighter:Math.pow(o.brighter,e),new _(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?o.darker:Math.pow(o.darker,e),new _(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=isNaN(this.h)?0:(this.h+120)*i.deg2rad,t=+this.l,n=isNaN(this.s)?0:this.s*t*(1-t),r=Math.cos(e),l=Math.sin(e);return new o.Rgb(255*(t+n*(u*r+s*l)),255*(t+n*(c*r+a*l)),255*(t+n*(d*r)),this.opacity)}}))},"./node_modules/d3-color/src/define.js":function(e,t,n){"use strict";function r(e,t){var n=Object.create(e.prototype);for(var r in t)n[r]=t[r];return n}n.r(t),n.d(t,"extend",(function(){return r})),t.default=function(e,t,n){e.prototype=t.prototype=n,n.constructor=e}},"./node_modules/d3-color/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-color/src/color.js");n.d(t,"color",(function(){return r.default})),n.d(t,"rgb",(function(){return r.rgb})),n.d(t,"hsl",(function(){return r.hsl}));var o=n("./node_modules/d3-color/src/lab.js");n.d(t,"lab",(function(){return o.default})),n.d(t,"hcl",(function(){return o.hcl})),n.d(t,"lch",(function(){return o.lch})),n.d(t,"gray",(function(){return o.gray}));var i=n("./node_modules/d3-color/src/cubehelix.js");n.d(t,"cubehelix",(function(){return i.default}))},"./node_modules/d3-color/src/lab.js":function(e,t,n){"use strict";n.r(t),n.d(t,"gray",(function(){return a})),n.d(t,"default",(function(){return d})),n.d(t,"Lab",(function(){return l})),n.d(t,"lch",(function(){return v})),n.d(t,"hcl",(function(){return g})),n.d(t,"Hcl",(function(){return b}));var r=n("./node_modules/d3-color/src/define.js"),o=n("./node_modules/d3-color/src/color.js"),i=n("./node_modules/d3-color/src/math.js"),u=6/29,s=3*u*u;function c(e){if(e instanceof l)return new l(e.l,e.a,e.b,e.opacity);if(e instanceof b)return j(e);e instanceof o.Rgb||(e=Object(o.rgbConvert)(e));var t,n,r=m(e.r),i=m(e.g),u=m(e.b),s=f((.2225045*r+.7168786*i+.0606169*u)/1);return r===i&&i===u?t=n=s:(t=f((.4360747*r+.3850649*i+.1430804*u)/.96422),n=f((.0139322*r+.0971045*i+.7141733*u)/.82521)),new l(116*s-16,500*(t-s),200*(s-n),e.opacity)}function a(e,t){return new l(e,0,0,null==t?1:t)}function d(e,t,n,r){return 1===arguments.length?c(e):new l(e,t,n,null==r?1:r)}function l(e,t,n,r){this.l=+e,this.a=+t,this.b=+n,this.opacity=+r}function f(e){return e>.008856451679035631?Math.pow(e,1/3):e/s+4/29}function h(e){return e>u?e*e*e:s*(e-4/29)}function p(e){return 255*(e<=.0031308?12.92*e:1.055*Math.pow(e,1/2.4)-.055)}function m(e){return(e/=255)<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}function _(e){if(e instanceof b)return new b(e.h,e.c,e.l,e.opacity);if(e instanceof l||(e=c(e)),0===e.a&&0===e.b)return new b(NaN,0<e.l&&e.l<100?0:NaN,e.l,e.opacity);var t=Math.atan2(e.b,e.a)*i.rad2deg;return new b(t<0?t+360:t,Math.sqrt(e.a*e.a+e.b*e.b),e.l,e.opacity)}function v(e,t,n,r){return 1===arguments.length?_(e):new b(n,t,e,null==r?1:r)}function g(e,t,n,r){return 1===arguments.length?_(e):new b(e,t,n,null==r?1:r)}function b(e,t,n,r){this.h=+e,this.c=+t,this.l=+n,this.opacity=+r}function j(e){if(isNaN(e.h))return new l(e.l,0,0,e.opacity);var t=e.h*i.deg2rad;return new l(e.l,Math.cos(t)*e.c,Math.sin(t)*e.c,e.opacity)}Object(r.default)(l,d,Object(r.extend)(o.Color,{brighter:function(e){return new l(this.l+18*(null==e?1:e),this.a,this.b,this.opacity)},darker:function(e){return new l(this.l-18*(null==e?1:e),this.a,this.b,this.opacity)},rgb:function(){var e=(this.l+16)/116,t=isNaN(this.a)?e:e+this.a/500,n=isNaN(this.b)?e:e-this.b/200;return t=.96422*h(t),e=1*h(e),n=.82521*h(n),new o.Rgb(p(3.1338561*t-1.6168667*e-.4906146*n),p(-.9787684*t+1.9161415*e+.033454*n),p(.0719453*t-.2289914*e+1.4052427*n),this.opacity)}})),Object(r.default)(b,g,Object(r.extend)(o.Color,{brighter:function(e){return new b(this.h,this.c,this.l+18*(null==e?1:e),this.opacity)},darker:function(e){return new b(this.h,this.c,this.l-18*(null==e?1:e),this.opacity)},rgb:function(){return j(this).rgb()}}))},"./node_modules/d3-color/src/math.js":function(e,t,n){"use strict";n.r(t),n.d(t,"deg2rad",(function(){return r})),n.d(t,"rad2deg",(function(){return o}));var r=Math.PI/180,o=180/Math.PI},"./node_modules/d3-contour/src/area.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){for(var t=0,n=e.length,r=e[n-1][1]*e[0][0]-e[n-1][0]*e[0][1];++t<n;)r+=e[t-1][1]*e[t][0]-e[t-1][0]*e[t][1];return r}},"./node_modules/d3-contour/src/array.js":function(e,t,n){"use strict";n.r(t),n.d(t,"slice",(function(){return r}));var r=Array.prototype.slice},"./node_modules/d3-contour/src/ascending.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){return e-t}},"./node_modules/d3-contour/src/blur.js":function(e,t,n){"use strict";function r(e,t,n){for(var r=e.width,o=e.height,i=1+(n<<1),u=0;u<o;++u)for(var s=0,c=0;s<r+n;++s)s<r&&(c+=e.data[s+u*r]),s>=n&&(s>=i&&(c-=e.data[s-i+u*r]),t.data[s-n+u*r]=c/Math.min(s+1,r-1+i-s,i))}function o(e,t,n){for(var r=e.width,o=e.height,i=1+(n<<1),u=0;u<r;++u)for(var s=0,c=0;s<o+n;++s)s<o&&(c+=e.data[u+s*r]),s>=n&&(s>=i&&(c-=e.data[u+(s-i)*r]),t.data[u+(s-n)*r]=c/Math.min(s+1,o-1+i-s,i))}n.r(t),n.d(t,"blurX",(function(){return r})),n.d(t,"blurY",(function(){return o}))},"./node_modules/d3-contour/src/constant.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return e}}},"./node_modules/d3-contour/src/contains.js":function(e,t,n){"use strict";function r(e,t){for(var n=t[0],r=t[1],i=-1,u=0,s=e.length,c=s-1;u<s;c=u++){var a=e[u],d=a[0],l=a[1],f=e[c],h=f[0],p=f[1];if(o(a,f,t))return 0;l>r!=p>r&&n<(h-d)*(r-l)/(p-l)+d&&(i=-i)}return i}function o(e,t,n){var r,o,i,u;return function(e,t,n){return(t[0]-e[0])*(n[1]-e[1])==(n[0]-e[0])*(t[1]-e[1])}(e,t,n)&&(o=e[r=+(e[0]===t[0])],i=n[r],u=t[r],o<=i&&i<=u||u<=i&&i<=o)}n.r(t),t.default=function(e,t){for(var n,o=-1,i=t.length;++o<i;)if(n=r(e,t[o]))return n;return 0}},"./node_modules/d3-contour/src/contours.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-array/src/index.js"),o=n("./node_modules/d3-contour/src/array.js"),i=n("./node_modules/d3-contour/src/ascending.js"),u=n("./node_modules/d3-contour/src/area.js"),s=n("./node_modules/d3-contour/src/constant.js"),c=n("./node_modules/d3-contour/src/contains.js"),a=n("./node_modules/d3-contour/src/noop.js"),d=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]];t.default=function(){var e=1,t=1,n=r.thresholdSturges,l=m;function f(e){var t=n(e);if(Array.isArray(t))t=t.slice().sort(i.default);else{var o=Object(r.extent)(e),u=o[0],s=o[1];t=Object(r.tickStep)(u,s,t),t=Object(r.range)(Math.floor(u/t)*t,Math.floor(s/t)*t,t)}return t.map((function(t){return h(e,t)}))}function h(n,r){var o=[],i=[];return function(n,r,o){var i,u,s,c,a,l,f=new Array,h=new Array;i=u=-1,c=n[0]>=r,d[c<<1].forEach(m);for(;++i<e-1;)s=c,c=n[i+1]>=r,d[s|c<<1].forEach(m);d[c<<0].forEach(m);for(;++u<t-1;){for(i=-1,c=n[u*e+e]>=r,a=n[u*e]>=r,d[c<<1|a<<2].forEach(m);++i<e-1;)s=c,c=n[u*e+e+i+1]>=r,l=a,a=n[u*e+i+1]>=r,d[s|c<<1|a<<2|l<<3].forEach(m);d[c|a<<3].forEach(m)}i=-1,a=n[u*e]>=r,d[a<<2].forEach(m);for(;++i<e-1;)l=a,a=n[u*e+i+1]>=r,d[a<<2|l<<3].forEach(m);function m(e){var t,n,r=[e[0][0]+i,e[0][1]+u],s=[e[1][0]+i,e[1][1]+u],c=p(r),a=p(s);(t=h[c])?(n=f[a])?(delete h[t.end],delete f[n.start],t===n?(t.ring.push(s),o(t.ring)):f[t.start]=h[n.end]={start:t.start,end:n.end,ring:t.ring.concat(n.ring)}):(delete h[t.end],t.ring.push(s),h[t.end=a]=t):(t=f[a])?(n=h[c])?(delete f[t.start],delete h[n.end],t===n?(t.ring.push(s),o(t.ring)):f[n.start]=h[t.end]={start:n.start,end:t.end,ring:n.ring.concat(t.ring)}):(delete f[t.start],t.ring.unshift(r),f[t.start=c]=t):f[c]=h[a]={start:c,end:a,ring:[r,s]}}d[a<<3].forEach(m)}(n,r,(function(e){l(e,n,r),Object(u.default)(e)>0?o.push([e]):i.push(e)})),i.forEach((function(e){for(var t,n=0,r=o.length;n<r;++n)if(-1!==Object(c.default)((t=o[n])[0],e))return void t.push(e)})),{type:"MultiPolygon",value:r,coordinates:o}}function p(t){return 2*t[0]+t[1]*(e+1)*4}function m(n,r,o){n.forEach((function(n){var i,u=n[0],s=n[1],c=0|u,a=0|s,d=r[a*e+c];u>0&&u<e&&c===u&&(i=r[a*e+c-1],n[0]=u+(o-i)/(d-i)-.5),s>0&&s<t&&a===s&&(i=r[(a-1)*e+c],n[1]=s+(o-i)/(d-i)-.5)}))}return f.contour=h,f.size=function(n){if(!arguments.length)return[e,t];var r=Math.ceil(n[0]),o=Math.ceil(n[1]);if(!(r>0&&o>0))throw new Error("invalid size");return e=r,t=o,f},f.thresholds=function(e){return arguments.length?(n="function"==typeof e?e:Array.isArray(e)?Object(s.default)(o.slice.call(e)):Object(s.default)(e),f):n},f.smooth=function(e){return arguments.length?(l=e?m:a.default,f):l===m},f}},"./node_modules/d3-contour/src/density.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-array/src/index.js"),o=n("./node_modules/d3-contour/src/array.js"),i=n("./node_modules/d3-contour/src/blur.js"),u=n("./node_modules/d3-contour/src/constant.js"),s=n("./node_modules/d3-contour/src/contours.js");function c(e){return e[0]}function a(e){return e[1]}function d(){return 1}t.default=function(){var e=c,t=a,n=d,l=960,f=500,h=20,p=2,m=3*h,_=l+2*m>>p,v=f+2*m>>p,g=Object(u.default)(20);function b(o){var u=new Float32Array(_*v),c=new Float32Array(_*v);o.forEach((function(r,o,i){var s=+e(r,o,i)+m>>p,c=+t(r,o,i)+m>>p,a=+n(r,o,i);s>=0&&s<_&&c>=0&&c<v&&(u[s+c*_]+=a)})),Object(i.blurX)({width:_,height:v,data:u},{width:_,height:v,data:c},h>>p),Object(i.blurY)({width:_,height:v,data:c},{width:_,height:v,data:u},h>>p),Object(i.blurX)({width:_,height:v,data:u},{width:_,height:v,data:c},h>>p),Object(i.blurY)({width:_,height:v,data:c},{width:_,height:v,data:u},h>>p),Object(i.blurX)({width:_,height:v,data:u},{width:_,height:v,data:c},h>>p),Object(i.blurY)({width:_,height:v,data:c},{width:_,height:v,data:u},h>>p);var a=g(u);if(!Array.isArray(a)){var d=Object(r.max)(u);a=Object(r.tickStep)(0,d,a),(a=Object(r.range)(0,Math.floor(d/a)*a,a)).shift()}return Object(s.default)().thresholds(a).size([_,v])(u).map(j)}function j(e){return e.value*=Math.pow(2,-2*p),e.coordinates.forEach(y),e}function y(e){e.forEach(x)}function x(e){e.forEach(w)}function w(e){e[0]=e[0]*Math.pow(2,p)-m,e[1]=e[1]*Math.pow(2,p)-m}function O(){return _=l+2*(m=3*h)>>p,v=f+2*m>>p,b}return b.x=function(t){return arguments.length?(e="function"==typeof t?t:Object(u.default)(+t),b):e},b.y=function(e){return arguments.length?(t="function"==typeof e?e:Object(u.default)(+e),b):t},b.weight=function(e){return arguments.length?(n="function"==typeof e?e:Object(u.default)(+e),b):n},b.size=function(e){if(!arguments.length)return[l,f];var t=Math.ceil(e[0]),n=Math.ceil(e[1]);if(!(t>=0||t>=0))throw new Error("invalid size");return l=t,f=n,O()},b.cellSize=function(e){if(!arguments.length)return 1<<p;if(!((e=+e)>=1))throw new Error("invalid cell size");return p=Math.floor(Math.log(e)/Math.LN2),O()},b.thresholds=function(e){return arguments.length?(g="function"==typeof e?e:Array.isArray(e)?Object(u.default)(o.slice.call(e)):Object(u.default)(e),b):g},b.bandwidth=function(e){if(!arguments.length)return Math.sqrt(h*(h+1));if(!((e=+e)>=0))throw new Error("invalid bandwidth");return h=Math.round((Math.sqrt(4*e*e+1)-1)/2),O()},b}},"./node_modules/d3-contour/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-contour/src/contours.js");n.d(t,"contours",(function(){return r.default}));var o=n("./node_modules/d3-contour/src/density.js");n.d(t,"contourDensity",(function(){return o.default}))},"./node_modules/d3-contour/src/noop.js":function(e,t,n){"use strict";n.r(t),t.default=function(){}},"./node_modules/d3-dispatch/src/dispatch.js":function(e,t,n){"use strict";n.r(t);var r={value:function(){}};function o(){for(var e,t=0,n=arguments.length,r={};t<n;++t){if(!(e=arguments[t]+"")||e in r||/[\s.]/.test(e))throw new Error("illegal type: "+e);r[e]=[]}return new i(r)}function i(e){this._=e}function u(e,t){return e.trim().split(/^|\s+/).map((function(e){var n="",r=e.indexOf(".");if(r>=0&&(n=e.slice(r+1),e=e.slice(0,r)),e&&!t.hasOwnProperty(e))throw new Error("unknown type: "+e);return{type:e,name:n}}))}function s(e,t){for(var n,r=0,o=e.length;r<o;++r)if((n=e[r]).name===t)return n.value}function c(e,t,n){for(var o=0,i=e.length;o<i;++o)if(e[o].name===t){e[o]=r,e=e.slice(0,o).concat(e.slice(o+1));break}return null!=n&&e.push({name:t,value:n}),e}i.prototype=o.prototype={constructor:i,on:function(e,t){var n,r=this._,o=u(e+"",r),i=-1,a=o.length;if(!(arguments.length<2)){if(null!=t&&"function"!=typeof t)throw new Error("invalid callback: "+t);for(;++i<a;)if(n=(e=o[i]).type)r[n]=c(r[n],e.name,t);else if(null==t)for(n in r)r[n]=c(r[n],e.name,null);return this}for(;++i<a;)if((n=(e=o[i]).type)&&(n=s(r[n],e.name)))return n},copy:function(){var e={},t=this._;for(var n in t)e[n]=t[n].slice();return new i(e)},call:function(e,t){if((n=arguments.length-2)>0)for(var n,r,o=new Array(n),i=0;i<n;++i)o[i]=arguments[i+2];if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(i=0,n=(r=this._[e]).length;i<n;++i)r[i].value.apply(t,o)},apply:function(e,t,n){if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(var r=this._[e],o=0,i=r.length;o<i;++o)r[o].value.apply(t,n)}},t.default=o},"./node_modules/d3-dispatch/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-dispatch/src/dispatch.js");n.d(t,"dispatch",(function(){return r.default}))},"./node_modules/d3-drag/src/constant.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return e}}},"./node_modules/d3-drag/src/drag.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-dispatch/src/index.js"),o=n("./node_modules/d3-selection/src/index.js"),i=n("./node_modules/d3-drag/src/nodrag.js"),u=n("./node_modules/d3-drag/src/noevent.js"),s=n("./node_modules/d3-drag/src/constant.js"),c=n("./node_modules/d3-drag/src/event.js");function a(){return!o.event.ctrlKey&&!o.event.button}function d(){return this.parentNode}function l(e){return null==e?{x:o.event.x,y:o.event.y}:e}function f(){return navigator.maxTouchPoints||"ontouchstart"in this}t.default=function(){var e,t,n,h,p=a,m=d,_=l,v=f,g={},b=Object(r.dispatch)("start","drag","end"),j=0,y=0;function x(e){e.on("mousedown.drag",w).filter(v).on("touchstart.drag",S).on("touchmove.drag",A).on("touchend.drag touchcancel.drag",P).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function w(){if(!h&&p.apply(this,arguments)){var r=k("mouse",m.apply(this,arguments),o.mouse,this,arguments);r&&(Object(o.select)(o.event.view).on("mousemove.drag",O,!0).on("mouseup.drag",M,!0),Object(i.default)(o.event.view),Object(u.nopropagation)(),n=!1,e=o.event.clientX,t=o.event.clientY,r("start"))}}function O(){if(Object(u.default)(),!n){var r=o.event.clientX-e,i=o.event.clientY-t;n=r*r+i*i>y}g.mouse("drag")}function M(){Object(o.select)(o.event.view).on("mousemove.drag mouseup.drag",null),Object(i.yesdrag)(o.event.view,n),Object(u.default)(),g.mouse("end")}function S(){if(p.apply(this,arguments)){var e,t,n=o.event.changedTouches,r=m.apply(this,arguments),i=n.length;for(e=0;e<i;++e)(t=k(n[e].identifier,r,o.touch,this,arguments))&&(Object(u.nopropagation)(),t("start"))}}function A(){var e,t,n=o.event.changedTouches,r=n.length;for(e=0;e<r;++e)(t=g[n[e].identifier])&&(Object(u.default)(),t("drag"))}function P(){var e,t,n=o.event.changedTouches,r=n.length;for(h&&clearTimeout(h),h=setTimeout((function(){h=null}),500),e=0;e<r;++e)(t=g[n[e].identifier])&&(Object(u.nopropagation)(),t("end"))}function k(e,t,n,r,i){var u,s,a,d=n(t,e),l=b.copy();if(Object(o.customEvent)(new c.default(x,"beforestart",u,e,j,d[0],d[1],0,0,l),(function(){return null!=(o.event.subject=u=_.apply(r,i))&&(s=u.x-d[0]||0,a=u.y-d[1]||0,!0)})))return function f(h){var p,m=d;switch(h){case"start":g[e]=f,p=j++;break;case"end":delete g[e],--j;case"drag":d=n(t,e),p=j}Object(o.customEvent)(new c.default(x,h,u,e,p,d[0]+s,d[1]+a,d[0]-m[0],d[1]-m[1],l),l.apply,l,[h,r,i])}}return x.filter=function(e){return arguments.length?(p="function"==typeof e?e:Object(s.default)(!!e),x):p},x.container=function(e){return arguments.length?(m="function"==typeof e?e:Object(s.default)(e),x):m},x.subject=function(e){return arguments.length?(_="function"==typeof e?e:Object(s.default)(e),x):_},x.touchable=function(e){return arguments.length?(v="function"==typeof e?e:Object(s.default)(!!e),x):v},x.on=function(){var e=b.on.apply(b,arguments);return e===b?x:e},x.clickDistance=function(e){return arguments.length?(y=(e=+e)*e,x):Math.sqrt(y)},x}},"./node_modules/d3-drag/src/event.js":function(e,t,n){"use strict";function r(e,t,n,r,o,i,u,s,c,a){this.target=e,this.type=t,this.subject=n,this.identifier=r,this.active=o,this.x=i,this.y=u,this.dx=s,this.dy=c,this._=a}n.r(t),n.d(t,"default",(function(){return r})),r.prototype.on=function(){var e=this._.on.apply(this._,arguments);return e===this._?this:e}},"./node_modules/d3-drag/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-drag/src/drag.js");n.d(t,"drag",(function(){return r.default}));var o=n("./node_modules/d3-drag/src/nodrag.js");n.d(t,"dragDisable",(function(){return o.default})),n.d(t,"dragEnable",(function(){return o.yesdrag}))},"./node_modules/d3-drag/src/nodrag.js":function(e,t,n){"use strict";n.r(t),n.d(t,"yesdrag",(function(){return i}));var r=n("./node_modules/d3-selection/src/index.js"),o=n("./node_modules/d3-drag/src/noevent.js");function i(e,t){var n=e.document.documentElement,i=Object(r.select)(e).on("dragstart.drag",null);t&&(i.on("click.drag",o.default,!0),setTimeout((function(){i.on("click.drag",null)}),0)),"onselectstart"in n?i.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}t.default=function(e){var t=e.document.documentElement,n=Object(r.select)(e).on("dragstart.drag",o.default,!0);"onselectstart"in t?n.on("selectstart.drag",o.default,!0):(t.__noselect=t.style.MozUserSelect,t.style.MozUserSelect="none")}},"./node_modules/d3-drag/src/noevent.js":function(e,t,n){"use strict";n.r(t),n.d(t,"nopropagation",(function(){return o}));var r=n("./node_modules/d3-selection/src/index.js");function o(){r.event.stopImmediatePropagation()}t.default=function(){r.event.preventDefault(),r.event.stopImmediatePropagation()}},"./node_modules/d3-dsv/src/autoType.js":function(e,t,n){"use strict";function r(e){for(var t in e){var n,r,i=e[t].trim();if(i)if("true"===i)i=!0;else if("false"===i)i=!1;else if("NaN"===i)i=NaN;else if(isNaN(n=+i)){if(!(r=i.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)))continue;o&&r[4]&&!r[7]&&(i=i.replace(/-/g,"/").replace(/T/," ")),i=new Date(i)}else i=n;else i=null;e[t]=i}return e}n.r(t),n.d(t,"default",(function(){return r}));var o=new Date("2019-01-01T00:00").getHours()||new Date("2019-07-01T00:00").getHours()},"./node_modules/d3-dsv/src/csv.js":function(e,t,n){"use strict";n.r(t),n.d(t,"csvParse",(function(){return i})),n.d(t,"csvParseRows",(function(){return u})),n.d(t,"csvFormat",(function(){return s})),n.d(t,"csvFormatBody",(function(){return c})),n.d(t,"csvFormatRows",(function(){return a})),n.d(t,"csvFormatRow",(function(){return d})),n.d(t,"csvFormatValue",(function(){return l}));var r=n("./node_modules/d3-dsv/src/dsv.js"),o=Object(r.default)(","),i=o.parse,u=o.parseRows,s=o.format,c=o.formatBody,a=o.formatRows,d=o.formatRow,l=o.formatValue},"./node_modules/d3-dsv/src/dsv.js":function(e,t,n){"use strict";n.r(t);var r={},o={};function i(e){return new Function("d","return {"+e.map((function(e,t){return JSON.stringify(e)+": d["+t+'] || ""'})).join(",")+"}")}function u(e){var t=Object.create(null),n=[];return e.forEach((function(e){for(var r in e)r in t||n.push(t[r]=r)})),n}function s(e,t){var n=e+"",r=n.length;return r<t?new Array(t-r+1).join(0)+n:n}function c(e){var t,n=e.getUTCHours(),r=e.getUTCMinutes(),o=e.getUTCSeconds(),i=e.getUTCMilliseconds();return isNaN(e)?"Invalid Date":((t=e.getUTCFullYear())<0?"-"+s(-t,6):t>9999?"+"+s(t,6):s(t,4))+"-"+s(e.getUTCMonth()+1,2)+"-"+s(e.getUTCDate(),2)+(i?"T"+s(n,2)+":"+s(r,2)+":"+s(o,2)+"."+s(i,3)+"Z":o?"T"+s(n,2)+":"+s(r,2)+":"+s(o,2)+"Z":r||n?"T"+s(n,2)+":"+s(r,2)+"Z":"")}t.default=function(e){var t=new RegExp('["'+e+"\n\r]"),n=e.charCodeAt(0);function s(e,t){var i,u=[],s=e.length,c=0,a=0,d=s<=0,l=!1;function f(){if(d)return o;if(l)return l=!1,r;var t,i,u=c;if(34===e.charCodeAt(u)){for(;c++<s&&34!==e.charCodeAt(c)||34===e.charCodeAt(++c););return(t=c)>=s?d=!0:10===(i=e.charCodeAt(c++))?l=!0:13===i&&(l=!0,10===e.charCodeAt(c)&&++c),e.slice(u+1,t-1).replace(/""/g,'"')}for(;c<s;){if(10===(i=e.charCodeAt(t=c++)))l=!0;else if(13===i)l=!0,10===e.charCodeAt(c)&&++c;else if(i!==n)continue;return e.slice(u,t)}return d=!0,e.slice(u,s)}for(10===e.charCodeAt(s-1)&&--s,13===e.charCodeAt(s-1)&&--s;(i=f())!==o;){for(var h=[];i!==r&&i!==o;)h.push(i),i=f();t&&null==(h=t(h,a++))||u.push(h)}return u}function a(t,n){return t.map((function(t){return n.map((function(e){return l(t[e])})).join(e)}))}function d(t){return t.map(l).join(e)}function l(e){return null==e?"":e instanceof Date?c(e):t.test(e+="")?'"'+e.replace(/"/g,'""')+'"':e}return{parse:function(e,t){var n,r,o=s(e,(function(e,o){if(n)return n(e,o-1);r=e,n=t?function(e,t){var n=i(e);return function(r,o){return t(n(r),o,e)}}(e,t):i(e)}));return o.columns=r||[],o},parseRows:s,format:function(t,n){return null==n&&(n=u(t)),[n.map(l).join(e)].concat(a(t,n)).join("\n")},formatBody:function(e,t){return null==t&&(t=u(e)),a(e,t).join("\n")},formatRows:function(e){return e.map(d).join("\n")},formatRow:d,formatValue:l}}},"./node_modules/d3-dsv/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-dsv/src/dsv.js");n.d(t,"dsvFormat",(function(){return r.default}));var o=n("./node_modules/d3-dsv/src/csv.js");n.d(t,"csvParse",(function(){return o.csvParse})),n.d(t,"csvParseRows",(function(){return o.csvParseRows})),n.d(t,"csvFormat",(function(){return o.csvFormat})),n.d(t,"csvFormatBody",(function(){return o.csvFormatBody})),n.d(t,"csvFormatRows",(function(){return o.csvFormatRows})),n.d(t,"csvFormatRow",(function(){return o.csvFormatRow})),n.d(t,"csvFormatValue",(function(){return o.csvFormatValue}));var i=n("./node_modules/d3-dsv/src/tsv.js");n.d(t,"tsvParse",(function(){return i.tsvParse})),n.d(t,"tsvParseRows",(function(){return i.tsvParseRows})),n.d(t,"tsvFormat",(function(){return i.tsvFormat})),n.d(t,"tsvFormatBody",(function(){return i.tsvFormatBody})),n.d(t,"tsvFormatRows",(function(){return i.tsvFormatRows})),n.d(t,"tsvFormatRow",(function(){return i.tsvFormatRow})),n.d(t,"tsvFormatValue",(function(){return i.tsvFormatValue}));var u=n("./node_modules/d3-dsv/src/autoType.js");n.d(t,"autoType",(function(){return u.default}))},"./node_modules/d3-dsv/src/tsv.js":function(e,t,n){"use strict";n.r(t),n.d(t,"tsvParse",(function(){return i})),n.d(t,"tsvParseRows",(function(){return u})),n.d(t,"tsvFormat",(function(){return s})),n.d(t,"tsvFormatBody",(function(){return c})),n.d(t,"tsvFormatRows",(function(){return a})),n.d(t,"tsvFormatRow",(function(){return d})),n.d(t,"tsvFormatValue",(function(){return l}));var r=n("./node_modules/d3-dsv/src/dsv.js"),o=Object(r.default)("\t"),i=o.parse,u=o.parseRows,s=o.format,c=o.formatBody,a=o.formatRows,d=o.formatRow,l=o.formatValue},"./node_modules/d3-ease/src/back.js":function(e,t,n){"use strict";n.r(t),n.d(t,"backIn",(function(){return r})),n.d(t,"backOut",(function(){return o})),n.d(t,"backInOut",(function(){return i}));var r=function e(t){function n(e){return e*e*((t+1)*e-t)}return t=+t,n.overshoot=e,n}(1.70158),o=function e(t){function n(e){return--e*e*((t+1)*e+t)+1}return t=+t,n.overshoot=e,n}(1.70158),i=function e(t){function n(e){return((e*=2)<1?e*e*((t+1)*e-t):(e-=2)*e*((t+1)*e+t)+2)/2}return t=+t,n.overshoot=e,n}(1.70158)},"./node_modules/d3-ease/src/bounce.js":function(e,t,n){"use strict";n.r(t),n.d(t,"bounceIn",(function(){return o})),n.d(t,"bounceOut",(function(){return i})),n.d(t,"bounceInOut",(function(){return u}));var r=7.5625;function o(e){return 1-i(1-e)}function i(e){return(e=+e)<4/11?r*e*e:e<8/11?r*(e-=6/11)*e+3/4:e<10/11?r*(e-=9/11)*e+15/16:r*(e-=21/22)*e+63/64}function u(e){return((e*=2)<=1?1-i(1-e):i(e-1)+1)/2}},"./node_modules/d3-ease/src/circle.js":function(e,t,n){"use strict";function r(e){return 1-Math.sqrt(1-e*e)}function o(e){return Math.sqrt(1- --e*e)}function i(e){return((e*=2)<=1?1-Math.sqrt(1-e*e):Math.sqrt(1-(e-=2)*e)+1)/2}n.r(t),n.d(t,"circleIn",(function(){return r})),n.d(t,"circleOut",(function(){return o})),n.d(t,"circleInOut",(function(){return i}))},"./node_modules/d3-ease/src/cubic.js":function(e,t,n){"use strict";function r(e){return e*e*e}function o(e){return--e*e*e+1}function i(e){return((e*=2)<=1?e*e*e:(e-=2)*e*e+2)/2}n.r(t),n.d(t,"cubicIn",(function(){return r})),n.d(t,"cubicOut",(function(){return o})),n.d(t,"cubicInOut",(function(){return i}))},"./node_modules/d3-ease/src/elastic.js":function(e,t,n){"use strict";n.r(t),n.d(t,"elasticIn",(function(){return o})),n.d(t,"elasticOut",(function(){return i})),n.d(t,"elasticInOut",(function(){return u}));var r=2*Math.PI,o=function e(t,n){var o=Math.asin(1/(t=Math.max(1,t)))*(n/=r);function i(e){return t*Math.pow(2,10*--e)*Math.sin((o-e)/n)}return i.amplitude=function(t){return e(t,n*r)},i.period=function(n){return e(t,n)},i}(1,.3),i=function e(t,n){var o=Math.asin(1/(t=Math.max(1,t)))*(n/=r);function i(e){return 1-t*Math.pow(2,-10*(e=+e))*Math.sin((e+o)/n)}return i.amplitude=function(t){return e(t,n*r)},i.period=function(n){return e(t,n)},i}(1,.3),u=function e(t,n){var o=Math.asin(1/(t=Math.max(1,t)))*(n/=r);function i(e){return((e=2*e-1)<0?t*Math.pow(2,10*e)*Math.sin((o-e)/n):2-t*Math.pow(2,-10*e)*Math.sin((o+e)/n))/2}return i.amplitude=function(t){return e(t,n*r)},i.period=function(n){return e(t,n)},i}(1,.3)},"./node_modules/d3-ease/src/exp.js":function(e,t,n){"use strict";function r(e){return Math.pow(2,10*e-10)}function o(e){return 1-Math.pow(2,-10*e)}function i(e){return((e*=2)<=1?Math.pow(2,10*e-10):2-Math.pow(2,10-10*e))/2}n.r(t),n.d(t,"expIn",(function(){return r})),n.d(t,"expOut",(function(){return o})),n.d(t,"expInOut",(function(){return i}))},"./node_modules/d3-ease/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-ease/src/linear.js");n.d(t,"easeLinear",(function(){return r.linear}));var o=n("./node_modules/d3-ease/src/quad.js");n.d(t,"easeQuad",(function(){return o.quadInOut})),n.d(t,"easeQuadIn",(function(){return o.quadIn})),n.d(t,"easeQuadOut",(function(){return o.quadOut})),n.d(t,"easeQuadInOut",(function(){return o.quadInOut}));var i=n("./node_modules/d3-ease/src/cubic.js");n.d(t,"easeCubic",(function(){return i.cubicInOut})),n.d(t,"easeCubicIn",(function(){return i.cubicIn})),n.d(t,"easeCubicOut",(function(){return i.cubicOut})),n.d(t,"easeCubicInOut",(function(){return i.cubicInOut}));var u=n("./node_modules/d3-ease/src/poly.js");n.d(t,"easePoly",(function(){return u.polyInOut})),n.d(t,"easePolyIn",(function(){return u.polyIn})),n.d(t,"easePolyOut",(function(){return u.polyOut})),n.d(t,"easePolyInOut",(function(){return u.polyInOut}));var s=n("./node_modules/d3-ease/src/sin.js");n.d(t,"easeSin",(function(){return s.sinInOut})),n.d(t,"easeSinIn",(function(){return s.sinIn})),n.d(t,"easeSinOut",(function(){return s.sinOut})),n.d(t,"easeSinInOut",(function(){return s.sinInOut}));var c=n("./node_modules/d3-ease/src/exp.js");n.d(t,"easeExp",(function(){return c.expInOut})),n.d(t,"easeExpIn",(function(){return c.expIn})),n.d(t,"easeExpOut",(function(){return c.expOut})),n.d(t,"easeExpInOut",(function(){return c.expInOut}));var a=n("./node_modules/d3-ease/src/circle.js");n.d(t,"easeCircle",(function(){return a.circleInOut})),n.d(t,"easeCircleIn",(function(){return a.circleIn})),n.d(t,"easeCircleOut",(function(){return a.circleOut})),n.d(t,"easeCircleInOut",(function(){return a.circleInOut}));var d=n("./node_modules/d3-ease/src/bounce.js");n.d(t,"easeBounce",(function(){return d.bounceOut})),n.d(t,"easeBounceIn",(function(){return d.bounceIn})),n.d(t,"easeBounceOut",(function(){return d.bounceOut})),n.d(t,"easeBounceInOut",(function(){return d.bounceInOut}));var l=n("./node_modules/d3-ease/src/back.js");n.d(t,"easeBack",(function(){return l.backInOut})),n.d(t,"easeBackIn",(function(){return l.backIn})),n.d(t,"easeBackOut",(function(){return l.backOut})),n.d(t,"easeBackInOut",(function(){return l.backInOut}));var f=n("./node_modules/d3-ease/src/elastic.js");n.d(t,"easeElastic",(function(){return f.elasticOut})),n.d(t,"easeElasticIn",(function(){return f.elasticIn})),n.d(t,"easeElasticOut",(function(){return f.elasticOut})),n.d(t,"easeElasticInOut",(function(){return f.elasticInOut}))},"./node_modules/d3-ease/src/linear.js":function(e,t,n){"use strict";function r(e){return+e}n.r(t),n.d(t,"linear",(function(){return r}))},"./node_modules/d3-ease/src/poly.js":function(e,t,n){"use strict";n.r(t),n.d(t,"polyIn",(function(){return r})),n.d(t,"polyOut",(function(){return o})),n.d(t,"polyInOut",(function(){return i}));var r=function e(t){function n(e){return Math.pow(e,t)}return t=+t,n.exponent=e,n}(3),o=function e(t){function n(e){return 1-Math.pow(1-e,t)}return t=+t,n.exponent=e,n}(3),i=function e(t){function n(e){return((e*=2)<=1?Math.pow(e,t):2-Math.pow(2-e,t))/2}return t=+t,n.exponent=e,n}(3)},"./node_modules/d3-ease/src/quad.js":function(e,t,n){"use strict";function r(e){return e*e}function o(e){return e*(2-e)}function i(e){return((e*=2)<=1?e*e:--e*(2-e)+1)/2}n.r(t),n.d(t,"quadIn",(function(){return r})),n.d(t,"quadOut",(function(){return o})),n.d(t,"quadInOut",(function(){return i}))},"./node_modules/d3-ease/src/sin.js":function(e,t,n){"use strict";n.r(t),n.d(t,"sinIn",(function(){return i})),n.d(t,"sinOut",(function(){return u})),n.d(t,"sinInOut",(function(){return s}));var r=Math.PI,o=r/2;function i(e){return 1-Math.cos(e*o)}function u(e){return Math.sin(e*o)}function s(e){return(1-Math.cos(r*e))/2}},"./node_modules/d3-fetch/src/blob.js":function(e,t,n){"use strict";function r(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.blob()}n.r(t),t.default=function(e,t){return fetch(e,t).then(r)}},"./node_modules/d3-fetch/src/buffer.js":function(e,t,n){"use strict";function r(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.arrayBuffer()}n.r(t),t.default=function(e,t){return fetch(e,t).then(r)}},"./node_modules/d3-fetch/src/dsv.js":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return u})),n.d(t,"csv",(function(){return s})),n.d(t,"tsv",(function(){return c}));var r=n("./node_modules/d3-dsv/src/index.js"),o=n("./node_modules/d3-fetch/src/text.js");function i(e){return function(t,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),Object(o.default)(t,n).then((function(t){return e(t,r)}))}}function u(e,t,n,i){3===arguments.length&&"function"==typeof n&&(i=n,n=void 0);var u=Object(r.dsvFormat)(e);return Object(o.default)(t,n).then((function(e){return u.parse(e,i)}))}var s=i(r.csvParse),c=i(r.tsvParse)},"./node_modules/d3-fetch/src/image.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){return new Promise((function(n,r){var o=new Image;for(var i in t)o[i]=t[i];o.onerror=r,o.onload=function(){n(o)},o.src=e}))}},"./node_modules/d3-fetch/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-fetch/src/blob.js");n.d(t,"blob",(function(){return r.default}));var o=n("./node_modules/d3-fetch/src/buffer.js");n.d(t,"buffer",(function(){return o.default}));var i=n("./node_modules/d3-fetch/src/dsv.js");n.d(t,"dsv",(function(){return i.default})),n.d(t,"csv",(function(){return i.csv})),n.d(t,"tsv",(function(){return i.tsv}));var u=n("./node_modules/d3-fetch/src/image.js");n.d(t,"image",(function(){return u.default}));var s=n("./node_modules/d3-fetch/src/json.js");n.d(t,"json",(function(){return s.default}));var c=n("./node_modules/d3-fetch/src/text.js");n.d(t,"text",(function(){return c.default}));var a=n("./node_modules/d3-fetch/src/xml.js");n.d(t,"xml",(function(){return a.default})),n.d(t,"html",(function(){return a.html})),n.d(t,"svg",(function(){return a.svg}))},"./node_modules/d3-fetch/src/json.js":function(e,t,n){"use strict";function r(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.json()}n.r(t),t.default=function(e,t){return fetch(e,t).then(r)}},"./node_modules/d3-fetch/src/text.js":function(e,t,n){"use strict";function r(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.text()}n.r(t),t.default=function(e,t){return fetch(e,t).then(r)}},"./node_modules/d3-fetch/src/xml.js":function(e,t,n){"use strict";n.r(t),n.d(t,"html",(function(){return i})),n.d(t,"svg",(function(){return u}));var r=n("./node_modules/d3-fetch/src/text.js");function o(e){return function(t,n){return Object(r.default)(t,n).then((function(t){return(new DOMParser).parseFromString(t,e)}))}}t.default=o("application/xml");var i=o("text/html"),u=o("image/svg+xml")},"./node_modules/d3-force/src/center.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){var n;function r(){var r,o,i=n.length,u=0,s=0;for(r=0;r<i;++r)u+=(o=n[r]).x,s+=o.y;for(u=u/i-e,s=s/i-t,r=0;r<i;++r)(o=n[r]).x-=u,o.y-=s}return null==e&&(e=0),null==t&&(t=0),r.initialize=function(e){n=e},r.x=function(t){return arguments.length?(e=+t,r):e},r.y=function(e){return arguments.length?(t=+e,r):t},r}},"./node_modules/d3-force/src/collide.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-force/src/constant.js"),o=n("./node_modules/d3-force/src/jiggle.js"),i=n("./node_modules/d3-quadtree/src/index.js");function u(e){return e.x+e.vx}function s(e){return e.y+e.vy}t.default=function(e){var t,n,c=1,a=1;function d(){for(var e,r,d,f,h,p,m,_=t.length,v=0;v<a;++v)for(r=Object(i.quadtree)(t,u,s).visitAfter(l),e=0;e<_;++e)d=t[e],p=n[d.index],m=p*p,f=d.x+d.vx,h=d.y+d.vy,r.visit(g);function g(e,t,n,r,i){var u=e.data,s=e.r,a=p+s;if(!u)return t>f+a||r<f-a||n>h+a||i<h-a;if(u.index>d.index){var l=f-u.x-u.vx,_=h-u.y-u.vy,v=l*l+_*_;v<a*a&&(0===l&&(v+=(l=Object(o.default)())*l),0===_&&(v+=(_=Object(o.default)())*_),v=(a-(v=Math.sqrt(v)))/v*c,d.vx+=(l*=v)*(a=(s*=s)/(m+s)),d.vy+=(_*=v)*a,u.vx-=l*(a=1-a),u.vy-=_*a)}}}function l(e){if(e.data)return e.r=n[e.data.index];for(var t=e.r=0;t<4;++t)e[t]&&e[t].r>e.r&&(e.r=e[t].r)}function f(){if(t){var r,o,i=t.length;for(n=new Array(i),r=0;r<i;++r)o=t[r],n[o.index]=+e(o,r,t)}}return"function"!=typeof e&&(e=Object(r.default)(null==e?1:+e)),d.initialize=function(e){t=e,f()},d.iterations=function(e){return arguments.length?(a=+e,d):a},d.strength=function(e){return arguments.length?(c=+e,d):c},d.radius=function(t){return arguments.length?(e="function"==typeof t?t:Object(r.default)(+t),f(),d):e},d}},"./node_modules/d3-force/src/constant.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return e}}},"./node_modules/d3-force/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-force/src/center.js");n.d(t,"forceCenter",(function(){return r.default}));var o=n("./node_modules/d3-force/src/collide.js");n.d(t,"forceCollide",(function(){return o.default}));var i=n("./node_modules/d3-force/src/link.js");n.d(t,"forceLink",(function(){return i.default}));var u=n("./node_modules/d3-force/src/manyBody.js");n.d(t,"forceManyBody",(function(){return u.default}));var s=n("./node_modules/d3-force/src/radial.js");n.d(t,"forceRadial",(function(){return s.default}));var c=n("./node_modules/d3-force/src/simulation.js");n.d(t,"forceSimulation",(function(){return c.default}));var a=n("./node_modules/d3-force/src/x.js");n.d(t,"forceX",(function(){return a.default}));var d=n("./node_modules/d3-force/src/y.js");n.d(t,"forceY",(function(){return d.default}))},"./node_modules/d3-force/src/jiggle.js":function(e,t,n){"use strict";n.r(t),t.default=function(){return 1e-6*(Math.random()-.5)}},"./node_modules/d3-force/src/link.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-force/src/constant.js"),o=n("./node_modules/d3-force/src/jiggle.js"),i=n("./node_modules/d3-collection/src/index.js");function u(e){return e.index}function s(e,t){var n=e.get(t);if(!n)throw new Error("missing: "+t);return n}t.default=function(e){var t,n,c,a,d,l=u,f=function(e){return 1/Math.min(a[e.source.index],a[e.target.index])},h=Object(r.default)(30),p=1;function m(r){for(var i=0,u=e.length;i<p;++i)for(var s,c,a,l,f,h,m,_=0;_<u;++_)c=(s=e[_]).source,l=(a=s.target).x+a.vx-c.x-c.vx||Object(o.default)(),f=a.y+a.vy-c.y-c.vy||Object(o.default)(),l*=h=((h=Math.sqrt(l*l+f*f))-n[_])/h*r*t[_],f*=h,a.vx-=l*(m=d[_]),a.vy-=f*m,c.vx+=l*(m=1-m),c.vy+=f*m}function _(){if(c){var r,o,u=c.length,f=e.length,h=Object(i.map)(c,l);for(r=0,a=new Array(u);r<f;++r)(o=e[r]).index=r,"object"!=typeof o.source&&(o.source=s(h,o.source)),"object"!=typeof o.target&&(o.target=s(h,o.target)),a[o.source.index]=(a[o.source.index]||0)+1,a[o.target.index]=(a[o.target.index]||0)+1;for(r=0,d=new Array(f);r<f;++r)o=e[r],d[r]=a[o.source.index]/(a[o.source.index]+a[o.target.index]);t=new Array(f),v(),n=new Array(f),g()}}function v(){if(c)for(var n=0,r=e.length;n<r;++n)t[n]=+f(e[n],n,e)}function g(){if(c)for(var t=0,r=e.length;t<r;++t)n[t]=+h(e[t],t,e)}return null==e&&(e=[]),m.initialize=function(e){c=e,_()},m.links=function(t){return arguments.length?(e=t,_(),m):e},m.id=function(e){return arguments.length?(l=e,m):l},m.iterations=function(e){return arguments.length?(p=+e,m):p},m.strength=function(e){return arguments.length?(f="function"==typeof e?e:Object(r.default)(+e),v(),m):f},m.distance=function(e){return arguments.length?(h="function"==typeof e?e:Object(r.default)(+e),g(),m):h},m}},"./node_modules/d3-force/src/manyBody.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-force/src/constant.js"),o=n("./node_modules/d3-force/src/jiggle.js"),i=n("./node_modules/d3-quadtree/src/index.js"),u=n("./node_modules/d3-force/src/simulation.js");t.default=function(){var e,t,n,s,c=Object(r.default)(-30),a=1,d=1/0,l=.81;function f(r){var o,s=e.length,c=Object(i.quadtree)(e,u.x,u.y).visitAfter(p);for(n=r,o=0;o<s;++o)t=e[o],c.visit(m)}function h(){if(e){var t,n,r=e.length;for(s=new Array(r),t=0;t<r;++t)n=e[t],s[n.index]=+c(n,t,e)}}function p(e){var t,n,r,o,i,u=0,c=0;if(e.length){for(r=o=i=0;i<4;++i)(t=e[i])&&(n=Math.abs(t.value))&&(u+=t.value,c+=n,r+=n*t.x,o+=n*t.y);e.x=r/c,e.y=o/c}else{(t=e).x=t.data.x,t.y=t.data.y;do{u+=s[t.data.index]}while(t=t.next)}e.value=u}function m(e,r,i,u){if(!e.value)return!0;var c=e.x-t.x,f=e.y-t.y,h=u-r,p=c*c+f*f;if(h*h/l<p)return p<d&&(0===c&&(p+=(c=Object(o.default)())*c),0===f&&(p+=(f=Object(o.default)())*f),p<a&&(p=Math.sqrt(a*p)),t.vx+=c*e.value*n/p,t.vy+=f*e.value*n/p),!0;if(!(e.length||p>=d)){(e.data!==t||e.next)&&(0===c&&(p+=(c=Object(o.default)())*c),0===f&&(p+=(f=Object(o.default)())*f),p<a&&(p=Math.sqrt(a*p)));do{e.data!==t&&(h=s[e.data.index]*n/p,t.vx+=c*h,t.vy+=f*h)}while(e=e.next)}}return f.initialize=function(t){e=t,h()},f.strength=function(e){return arguments.length?(c="function"==typeof e?e:Object(r.default)(+e),h(),f):c},f.distanceMin=function(e){return arguments.length?(a=e*e,f):Math.sqrt(a)},f.distanceMax=function(e){return arguments.length?(d=e*e,f):Math.sqrt(d)},f.theta=function(e){return arguments.length?(l=e*e,f):Math.sqrt(l)},f}},"./node_modules/d3-force/src/radial.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-force/src/constant.js");t.default=function(e,t,n){var o,i,u,s=Object(r.default)(.1);function c(e){for(var r=0,s=o.length;r<s;++r){var c=o[r],a=c.x-t||1e-6,d=c.y-n||1e-6,l=Math.sqrt(a*a+d*d),f=(u[r]-l)*i[r]*e/l;c.vx+=a*f,c.vy+=d*f}}function a(){if(o){var t,n=o.length;for(i=new Array(n),u=new Array(n),t=0;t<n;++t)u[t]=+e(o[t],t,o),i[t]=isNaN(u[t])?0:+s(o[t],t,o)}}return"function"!=typeof e&&(e=Object(r.default)(+e)),null==t&&(t=0),null==n&&(n=0),c.initialize=function(e){o=e,a()},c.strength=function(e){return arguments.length?(s="function"==typeof e?e:Object(r.default)(+e),a(),c):s},c.radius=function(t){return arguments.length?(e="function"==typeof t?t:Object(r.default)(+t),a(),c):e},c.x=function(e){return arguments.length?(t=+e,c):t},c.y=function(e){return arguments.length?(n=+e,c):n},c}},"./node_modules/d3-force/src/simulation.js":function(e,t,n){"use strict";n.r(t),n.d(t,"x",(function(){return u})),n.d(t,"y",(function(){return s}));var r=n("./node_modules/d3-dispatch/src/index.js"),o=n("./node_modules/d3-collection/src/index.js"),i=n("./node_modules/d3-timer/src/index.js");function u(e){return e.x}function s(e){return e.y}var c=Math.PI*(3-Math.sqrt(5));t.default=function(e){var t,n=1,u=.001,s=1-Math.pow(u,1/300),a=0,d=.6,l=Object(o.map)(),f=Object(i.timer)(p),h=Object(r.dispatch)("tick","end");function p(){m(),h.call("tick",t),n<u&&(f.stop(),h.call("end",t))}function m(r){var o,i,u=e.length;void 0===r&&(r=1);for(var c=0;c<r;++c)for(n+=(a-n)*s,l.each((function(e){e(n)})),o=0;o<u;++o)null==(i=e[o]).fx?i.x+=i.vx*=d:(i.x=i.fx,i.vx=0),null==i.fy?i.y+=i.vy*=d:(i.y=i.fy,i.vy=0);return t}function _(){for(var t,n=0,r=e.length;n<r;++n){if((t=e[n]).index=n,null!=t.fx&&(t.x=t.fx),null!=t.fy&&(t.y=t.fy),isNaN(t.x)||isNaN(t.y)){var o=10*Math.sqrt(n),i=n*c;t.x=o*Math.cos(i),t.y=o*Math.sin(i)}(isNaN(t.vx)||isNaN(t.vy))&&(t.vx=t.vy=0)}}function v(t){return t.initialize&&t.initialize(e),t}return null==e&&(e=[]),_(),t={tick:m,restart:function(){return f.restart(p),t},stop:function(){return f.stop(),t},nodes:function(n){return arguments.length?(e=n,_(),l.each(v),t):e},alpha:function(e){return arguments.length?(n=+e,t):n},alphaMin:function(e){return arguments.length?(u=+e,t):u},alphaDecay:function(e){return arguments.length?(s=+e,t):+s},alphaTarget:function(e){return arguments.length?(a=+e,t):a},velocityDecay:function(e){return arguments.length?(d=1-e,t):1-d},force:function(e,n){return arguments.length>1?(null==n?l.remove(e):l.set(e,v(n)),t):l.get(e)},find:function(t,n,r){var o,i,u,s,c,a=0,d=e.length;for(null==r?r=1/0:r*=r,a=0;a<d;++a)(u=(o=t-(s=e[a]).x)*o+(i=n-s.y)*i)<r&&(c=s,r=u);return c},on:function(e,n){return arguments.length>1?(h.on(e,n),t):h.on(e)}}}},"./node_modules/d3-force/src/x.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-force/src/constant.js");t.default=function(e){var t,n,o,i=Object(r.default)(.1);function u(e){for(var r,i=0,u=t.length;i<u;++i)(r=t[i]).vx+=(o[i]-r.x)*n[i]*e}function s(){if(t){var r,u=t.length;for(n=new Array(u),o=new Array(u),r=0;r<u;++r)n[r]=isNaN(o[r]=+e(t[r],r,t))?0:+i(t[r],r,t)}}return"function"!=typeof e&&(e=Object(r.default)(null==e?0:+e)),u.initialize=function(e){t=e,s()},u.strength=function(e){return arguments.length?(i="function"==typeof e?e:Object(r.default)(+e),s(),u):i},u.x=function(t){return arguments.length?(e="function"==typeof t?t:Object(r.default)(+t),s(),u):e},u}},"./node_modules/d3-force/src/y.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-force/src/constant.js");t.default=function(e){var t,n,o,i=Object(r.default)(.1);function u(e){for(var r,i=0,u=t.length;i<u;++i)(r=t[i]).vy+=(o[i]-r.y)*n[i]*e}function s(){if(t){var r,u=t.length;for(n=new Array(u),o=new Array(u),r=0;r<u;++r)n[r]=isNaN(o[r]=+e(t[r],r,t))?0:+i(t[r],r,t)}}return"function"!=typeof e&&(e=Object(r.default)(null==e?0:+e)),u.initialize=function(e){t=e,s()},u.strength=function(e){return arguments.length?(i="function"==typeof e?e:Object(r.default)(+e),s(),u):i},u.y=function(t){return arguments.length?(e="function"==typeof t?t:Object(r.default)(+t),s(),u):e},u}},"./node_modules/d3-format/src/defaultLocale.js":function(e,t,n){"use strict";n.r(t),n.d(t,"format",(function(){return o})),n.d(t,"formatPrefix",(function(){return i})),n.d(t,"default",(function(){return s}));var r,o,i,u=n("./node_modules/d3-format/src/locale.js");function s(e){return r=Object(u.default)(e),o=r.format,i=r.formatPrefix,r}s({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"})},"./node_modules/d3-format/src/exponent.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-format/src/formatDecimal.js");t.default=function(e){return(e=Object(r.default)(Math.abs(e)))?e[1]:NaN}},"./node_modules/d3-format/src/formatDecimal.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){if((n=(e=t?e.toExponential(t-1):e.toExponential()).indexOf("e"))<0)return null;var n,r=e.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+e.slice(n+1)]}},"./node_modules/d3-format/src/formatGroup.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){return function(n,r){for(var o=n.length,i=[],u=0,s=e[0],c=0;o>0&&s>0&&(c+s+1>r&&(s=Math.max(1,r-c)),i.push(n.substring(o-=s,o+s)),!((c+=s+1)>r));)s=e[u=(u+1)%e.length];return i.reverse().join(t)}}},"./node_modules/d3-format/src/formatNumerals.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(t){return t.replace(/[0-9]/g,(function(t){return e[+t]}))}}},"./node_modules/d3-format/src/formatPrefixAuto.js":function(e,t,n){"use strict";n.r(t),n.d(t,"prefixExponent",(function(){return r}));var r,o=n("./node_modules/d3-format/src/formatDecimal.js");t.default=function(e,t){var n=Object(o.default)(e,t);if(!n)return e+"";var i=n[0],u=n[1],s=u-(r=3*Math.max(-8,Math.min(8,Math.floor(u/3))))+1,c=i.length;return s===c?i:s>c?i+new Array(s-c+1).join("0"):s>0?i.slice(0,s)+"."+i.slice(s):"0."+new Array(1-s).join("0")+Object(o.default)(e,Math.max(0,t+s-1))[0]}},"./node_modules/d3-format/src/formatRounded.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-format/src/formatDecimal.js");t.default=function(e,t){var n=Object(r.default)(e,t);if(!n)return e+"";var o=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+o:o.length>i+1?o.slice(0,i+1)+"."+o.slice(i+1):o+new Array(i-o.length+2).join("0")}},"./node_modules/d3-format/src/formatSpecifier.js":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return o})),n.d(t,"FormatSpecifier",(function(){return i}));var r=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function o(e){if(!(t=r.exec(e)))throw new Error("invalid format: "+e);var t;return new i({fill:t[1],align:t[2],sign:t[3],symbol:t[4],zero:t[5],width:t[6],comma:t[7],precision:t[8]&&t[8].slice(1),trim:t[9],type:t[10]})}function i(e){this.fill=void 0===e.fill?" ":e.fill+"",this.align=void 0===e.align?">":e.align+"",this.sign=void 0===e.sign?"-":e.sign+"",this.symbol=void 0===e.symbol?"":e.symbol+"",this.zero=!!e.zero,this.width=void 0===e.width?void 0:+e.width,this.comma=!!e.comma,this.precision=void 0===e.precision?void 0:+e.precision,this.trim=!!e.trim,this.type=void 0===e.type?"":e.type+""}o.prototype=i.prototype,i.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type}},"./node_modules/d3-format/src/formatTrim.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){e:for(var t,n=e.length,r=1,o=-1;r<n;++r)switch(e[r]){case".":o=t=r;break;case"0":0===o&&(o=r),t=r;break;default:if(!+e[r])break e;o>0&&(o=0)}return o>0?e.slice(0,o)+e.slice(t+1):e}},"./node_modules/d3-format/src/formatTypes.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-format/src/formatPrefixAuto.js"),o=n("./node_modules/d3-format/src/formatRounded.js");t.default={"%":function(e,t){return(100*e).toFixed(t)},b:function(e){return Math.round(e).toString(2)},c:function(e){return e+""},d:function(e){return Math.round(e).toString(10)},e:function(e,t){return e.toExponential(t)},f:function(e,t){return e.toFixed(t)},g:function(e,t){return e.toPrecision(t)},o:function(e){return Math.round(e).toString(8)},p:function(e,t){return Object(o.default)(100*e,t)},r:o.default,s:r.default,X:function(e){return Math.round(e).toString(16).toUpperCase()},x:function(e){return Math.round(e).toString(16)}}},"./node_modules/d3-format/src/identity.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return e}},"./node_modules/d3-format/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-format/src/defaultLocale.js");n.d(t,"formatDefaultLocale",(function(){return r.default})),n.d(t,"format",(function(){return r.format})),n.d(t,"formatPrefix",(function(){return r.formatPrefix}));var o=n("./node_modules/d3-format/src/locale.js");n.d(t,"formatLocale",(function(){return o.default}));var i=n("./node_modules/d3-format/src/formatSpecifier.js");n.d(t,"formatSpecifier",(function(){return i.default})),n.d(t,"FormatSpecifier",(function(){return i.FormatSpecifier}));var u=n("./node_modules/d3-format/src/precisionFixed.js");n.d(t,"precisionFixed",(function(){return u.default}));var s=n("./node_modules/d3-format/src/precisionPrefix.js");n.d(t,"precisionPrefix",(function(){return s.default}));var c=n("./node_modules/d3-format/src/precisionRound.js");n.d(t,"precisionRound",(function(){return c.default}))},"./node_modules/d3-format/src/locale.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-format/src/exponent.js"),o=n("./node_modules/d3-format/src/formatGroup.js"),i=n("./node_modules/d3-format/src/formatNumerals.js"),u=n("./node_modules/d3-format/src/formatSpecifier.js"),s=n("./node_modules/d3-format/src/formatTrim.js"),c=n("./node_modules/d3-format/src/formatTypes.js"),a=n("./node_modules/d3-format/src/formatPrefixAuto.js"),d=n("./node_modules/d3-format/src/identity.js"),l=Array.prototype.map,f=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];t.default=function(e){var t=void 0===e.grouping||void 0===e.thousands?d.default:Object(o.default)(l.call(e.grouping,Number),e.thousands+""),n=void 0===e.currency?"":e.currency[0]+"",h=void 0===e.currency?"":e.currency[1]+"",p=void 0===e.decimal?".":e.decimal+"",m=void 0===e.numerals?d.default:Object(i.default)(l.call(e.numerals,String)),_=void 0===e.percent?"%":e.percent+"",v=void 0===e.minus?"-":e.minus+"",g=void 0===e.nan?"NaN":e.nan+"";function b(e){var r=(e=Object(u.default)(e)).fill,o=e.align,i=e.sign,d=e.symbol,l=e.zero,b=e.width,j=e.comma,y=e.precision,x=e.trim,w=e.type;"n"===w?(j=!0,w="g"):c.default[w]||(void 0===y&&(y=12),x=!0,w="g"),(l||"0"===r&&"="===o)&&(l=!0,r="0",o="=");var O="$"===d?n:"#"===d&&/[boxX]/.test(w)?"0"+w.toLowerCase():"",M="$"===d?h:/[%p]/.test(w)?_:"",S=c.default[w],A=/[defgprs%]/.test(w);function P(e){var n,u,c,d=O,h=M;if("c"===w)h=S(e)+h,e="";else{var _=(e=+e)<0||1/e<0;if(e=isNaN(e)?g:S(Math.abs(e),y),x&&(e=Object(s.default)(e)),_&&0==+e&&"+"!==i&&(_=!1),d=(_?"("===i?i:v:"-"===i||"("===i?"":i)+d,h=("s"===w?f[8+a.prefixExponent/3]:"")+h+(_&&"("===i?")":""),A)for(n=-1,u=e.length;++n<u;)if(48>(c=e.charCodeAt(n))||c>57){h=(46===c?p+e.slice(n+1):e.slice(n))+h,e=e.slice(0,n);break}}j&&!l&&(e=t(e,1/0));var P=d.length+e.length+h.length,k=P<b?new Array(b-P+1).join(r):"";switch(j&&l&&(e=t(k+e,k.length?b-h.length:1/0),k=""),o){case"<":e=d+e+h+k;break;case"=":e=d+k+e+h;break;case"^":e=k.slice(0,P=k.length>>1)+d+e+h+k.slice(P);break;default:e=k+d+e+h}return m(e)}return y=void 0===y?6:/[gprs]/.test(w)?Math.max(1,Math.min(21,y)):Math.max(0,Math.min(20,y)),P.toString=function(){return e+""},P}return{format:b,formatPrefix:function(e,t){var n=b(((e=Object(u.default)(e)).type="f",e)),o=3*Math.max(-8,Math.min(8,Math.floor(Object(r.default)(t)/3))),i=Math.pow(10,-o),s=f[8+o/3];return function(e){return n(i*e)+s}}}}},"./node_modules/d3-format/src/precisionFixed.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-format/src/exponent.js");t.default=function(e){return Math.max(0,-Object(r.default)(Math.abs(e)))}},"./node_modules/d3-format/src/precisionPrefix.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-format/src/exponent.js");t.default=function(e,t){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Object(r.default)(t)/3)))-Object(r.default)(Math.abs(e)))}},"./node_modules/d3-format/src/precisionRound.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-format/src/exponent.js");t.default=function(e,t){return e=Math.abs(e),t=Math.abs(t)-e,Math.max(0,Object(r.default)(t)-Object(r.default)(e))+1}},"./node_modules/d3-geo/src/adder.js":function(e,t,n){"use strict";function r(){this.reset()}n.r(t),t.default=function(){return new r},r.prototype={constructor:r,reset:function(){this.s=this.t=0},add:function(e){i(o,e,this.t),i(this,o.s,this.s),this.s?this.t+=o.t:this.s=o.t},valueOf:function(){return this.s}};var o=new r;function i(e,t,n){var r=e.s=t+n,o=r-t,i=r-o;e.t=t-i+(n-o)}},"./node_modules/d3-geo/src/area.js":function(e,t,n){"use strict";n.r(t),n.d(t,"areaRingSum",(function(){return f})),n.d(t,"areaStream",(function(){return p}));var r,o,i,u,s,c=n("./node_modules/d3-geo/src/adder.js"),a=n("./node_modules/d3-geo/src/math.js"),d=n("./node_modules/d3-geo/src/noop.js"),l=n("./node_modules/d3-geo/src/stream.js"),f=Object(c.default)(),h=Object(c.default)(),p={point:d.default,lineStart:d.default,lineEnd:d.default,polygonStart:function(){f.reset(),p.lineStart=m,p.lineEnd=_},polygonEnd:function(){var e=+f;h.add(e<0?a.tau+e:e),this.lineStart=this.lineEnd=this.point=d.default},sphere:function(){h.add(a.tau)}};function m(){p.point=v}function _(){g(r,o)}function v(e,t){p.point=g,r=e,o=t,e*=a.radians,t*=a.radians,i=e,u=Object(a.cos)(t=t/2+a.quarterPi),s=Object(a.sin)(t)}function g(e,t){e*=a.radians,t=(t*=a.radians)/2+a.quarterPi;var n=e-i,r=n>=0?1:-1,o=r*n,c=Object(a.cos)(t),d=Object(a.sin)(t),l=s*d,h=u*c+l*Object(a.cos)(o),p=l*r*Object(a.sin)(o);f.add(Object(a.atan2)(p,h)),i=e,u=c,s=d}t.default=function(e){return h.reset(),Object(l.default)(e,p),2*h}},"./node_modules/d3-geo/src/bounds.js":function(e,t,n){"use strict";n.r(t);var r,o,i,u,s,c,a,d,l,f,h=n("./node_modules/d3-geo/src/adder.js"),p=n("./node_modules/d3-geo/src/area.js"),m=n("./node_modules/d3-geo/src/cartesian.js"),_=n("./node_modules/d3-geo/src/math.js"),v=n("./node_modules/d3-geo/src/stream.js"),g=Object(h.default)(),b={point:j,lineStart:x,lineEnd:w,polygonStart:function(){b.point=O,b.lineStart=M,b.lineEnd=S,g.reset(),p.areaStream.polygonStart()},polygonEnd:function(){p.areaStream.polygonEnd(),b.point=j,b.lineStart=x,b.lineEnd=w,p.areaRingSum<0?(r=-(i=180),o=-(u=90)):g>_.epsilon?u=90:g<-_.epsilon&&(o=-90),f[0]=r,f[1]=i},sphere:function(){r=-(i=180),o=-(u=90)}};function j(e,t){l.push(f=[r=e,i=e]),t<o&&(o=t),t>u&&(u=t)}function y(e,t){var n=Object(m.cartesian)([e*_.radians,t*_.radians]);if(d){var c=Object(m.cartesianCross)(d,n),a=[c[1],-c[0],0],h=Object(m.cartesianCross)(a,c);Object(m.cartesianNormalizeInPlace)(h),h=Object(m.spherical)(h);var p,v=e-s,g=v>0?1:-1,b=h[0]*_.degrees*g,j=Object(_.abs)(v)>180;j^(g*s<b&&b<g*e)?(p=h[1]*_.degrees)>u&&(u=p):j^(g*s<(b=(b+360)%360-180)&&b<g*e)?(p=-h[1]*_.degrees)<o&&(o=p):(t<o&&(o=t),t>u&&(u=t)),j?e<s?A(r,e)>A(r,i)&&(i=e):A(e,i)>A(r,i)&&(r=e):i>=r?(e<r&&(r=e),e>i&&(i=e)):e>s?A(r,e)>A(r,i)&&(i=e):A(e,i)>A(r,i)&&(r=e)}else l.push(f=[r=e,i=e]);t<o&&(o=t),t>u&&(u=t),d=n,s=e}function x(){b.point=y}function w(){f[0]=r,f[1]=i,b.point=j,d=null}function O(e,t){if(d){var n=e-s;g.add(Object(_.abs)(n)>180?n+(n>0?360:-360):n)}else c=e,a=t;p.areaStream.point(e,t),y(e,t)}function M(){p.areaStream.lineStart()}function S(){O(c,a),p.areaStream.lineEnd(),Object(_.abs)(g)>_.epsilon&&(r=-(i=180)),f[0]=r,f[1]=i,d=null}function A(e,t){return(t-=e)<0?t+360:t}function P(e,t){return e[0]-t[0]}function k(e,t){return e[0]<=e[1]?e[0]<=t&&t<=e[1]:t<e[0]||e[1]<t}t.default=function(e){var t,n,s,c,a,d,h;if(u=i=-(r=o=1/0),l=[],Object(v.default)(e,b),n=l.length){for(l.sort(P),t=1,a=[s=l[0]];t<n;++t)k(s,(c=l[t])[0])||k(s,c[1])?(A(s[0],c[1])>A(s[0],s[1])&&(s[1]=c[1]),A(c[0],s[1])>A(s[0],s[1])&&(s[0]=c[0])):a.push(s=c);for(d=-1/0,t=0,s=a[n=a.length-1];t<=n;s=c,++t)c=a[t],(h=A(s[1],c[0]))>d&&(d=h,r=c[0],i=s[1])}return l=f=null,r===1/0||o===1/0?[[NaN,NaN],[NaN,NaN]]:[[r,o],[i,u]]}},"./node_modules/d3-geo/src/cartesian.js":function(e,t,n){"use strict";n.r(t),n.d(t,"spherical",(function(){return o})),n.d(t,"cartesian",(function(){return i})),n.d(t,"cartesianDot",(function(){return u})),n.d(t,"cartesianCross",(function(){return s})),n.d(t,"cartesianAddInPlace",(function(){return c})),n.d(t,"cartesianScale",(function(){return a})),n.d(t,"cartesianNormalizeInPlace",(function(){return d}));var r=n("./node_modules/d3-geo/src/math.js");function o(e){return[Object(r.atan2)(e[1],e[0]),Object(r.asin)(e[2])]}function i(e){var t=e[0],n=e[1],o=Object(r.cos)(n);return[o*Object(r.cos)(t),o*Object(r.sin)(t),Object(r.sin)(n)]}function u(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function s(e,t){return[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]]}function c(e,t){e[0]+=t[0],e[1]+=t[1],e[2]+=t[2]}function a(e,t){return[e[0]*t,e[1]*t,e[2]*t]}function d(e){var t=Object(r.sqrt)(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]);e[0]/=t,e[1]/=t,e[2]/=t}},"./node_modules/d3-geo/src/centroid.js":function(e,t,n){"use strict";n.r(t);var r,o,i,u,s,c,a,d,l,f,h,p,m,_,v,g,b=n("./node_modules/d3-geo/src/math.js"),j=n("./node_modules/d3-geo/src/noop.js"),y=n("./node_modules/d3-geo/src/stream.js"),x={sphere:j.default,point:w,lineStart:M,lineEnd:P,polygonStart:function(){x.lineStart=k,x.lineEnd=C},polygonEnd:function(){x.lineStart=M,x.lineEnd=P}};function w(e,t){e*=b.radians,t*=b.radians;var n=Object(b.cos)(t);O(n*Object(b.cos)(e),n*Object(b.sin)(e),Object(b.sin)(t))}function O(e,t,n){++r,i+=(e-i)/r,u+=(t-u)/r,s+=(n-s)/r}function M(){x.point=S}function S(e,t){e*=b.radians,t*=b.radians;var n=Object(b.cos)(t);_=n*Object(b.cos)(e),v=n*Object(b.sin)(e),g=Object(b.sin)(t),x.point=A,O(_,v,g)}function A(e,t){e*=b.radians,t*=b.radians;var n=Object(b.cos)(t),r=n*Object(b.cos)(e),i=n*Object(b.sin)(e),u=Object(b.sin)(t),s=Object(b.atan2)(Object(b.sqrt)((s=v*u-g*i)*s+(s=g*r-_*u)*s+(s=_*i-v*r)*s),_*r+v*i+g*u);o+=s,c+=s*(_+(_=r)),a+=s*(v+(v=i)),d+=s*(g+(g=u)),O(_,v,g)}function P(){x.point=w}function k(){x.point=T}function C(){E(p,m),x.point=w}function T(e,t){p=e,m=t,e*=b.radians,t*=b.radians,x.point=E;var n=Object(b.cos)(t);_=n*Object(b.cos)(e),v=n*Object(b.sin)(e),g=Object(b.sin)(t),O(_,v,g)}function E(e,t){e*=b.radians,t*=b.radians;var n=Object(b.cos)(t),r=n*Object(b.cos)(e),i=n*Object(b.sin)(e),u=Object(b.sin)(t),s=v*u-g*i,p=g*r-_*u,m=_*i-v*r,j=Object(b.sqrt)(s*s+p*p+m*m),y=Object(b.asin)(j),x=j&&-y/j;l+=x*s,f+=x*p,h+=x*m,o+=y,c+=y*(_+(_=r)),a+=y*(v+(v=i)),d+=y*(g+(g=u)),O(_,v,g)}t.default=function(e){r=o=i=u=s=c=a=d=l=f=h=0,Object(y.default)(e,x);var t=l,n=f,p=h,m=t*t+n*n+p*p;return m<b.epsilon2&&(t=c,n=a,p=d,o<b.epsilon&&(t=i,n=u,p=s),(m=t*t+n*n+p*p)<b.epsilon2)?[NaN,NaN]:[Object(b.atan2)(n,t)*b.degrees,Object(b.asin)(p/Object(b.sqrt)(m))*b.degrees]}},"./node_modules/d3-geo/src/circle.js":function(e,t,n){"use strict";n.r(t),n.d(t,"circleStream",(function(){return s}));var r=n("./node_modules/d3-geo/src/cartesian.js"),o=n("./node_modules/d3-geo/src/constant.js"),i=n("./node_modules/d3-geo/src/math.js"),u=n("./node_modules/d3-geo/src/rotation.js");function s(e,t,n,o,u,s){if(n){var a=Object(i.cos)(t),d=Object(i.sin)(t),l=o*n;null==u?(u=t+o*i.tau,s=t-l/2):(u=c(a,u),s=c(a,s),(o>0?u<s:u>s)&&(u+=o*i.tau));for(var f,h=u;o>0?h>s:h<s;h-=l)f=Object(r.spherical)([a,-d*Object(i.cos)(h),-d*Object(i.sin)(h)]),e.point(f[0],f[1])}}function c(e,t){(t=Object(r.cartesian)(t))[0]-=e,Object(r.cartesianNormalizeInPlace)(t);var n=Object(i.acos)(-t[1]);return((-t[2]<0?-n:n)+i.tau-i.epsilon)%i.tau}t.default=function(){var e,t,n=Object(o.default)([0,0]),r=Object(o.default)(90),c=Object(o.default)(6),a={point:function(n,r){e.push(n=t(n,r)),n[0]*=i.degrees,n[1]*=i.degrees}};function d(){var o=n.apply(this,arguments),d=r.apply(this,arguments)*i.radians,l=c.apply(this,arguments)*i.radians;return e=[],t=Object(u.rotateRadians)(-o[0]*i.radians,-o[1]*i.radians,0).invert,s(a,d,l,1),o={type:"Polygon",coordinates:[e]},e=t=null,o}return d.center=function(e){return arguments.length?(n="function"==typeof e?e:Object(o.default)([+e[0],+e[1]]),d):n},d.radius=function(e){return arguments.length?(r="function"==typeof e?e:Object(o.default)(+e),d):r},d.precision=function(e){return arguments.length?(c="function"==typeof e?e:Object(o.default)(+e),d):c},d}},"./node_modules/d3-geo/src/clip/antimeridian.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-geo/src/clip/index.js"),o=n("./node_modules/d3-geo/src/math.js");t.default=Object(r.default)((function(){return!0}),(function(e){var t,n=NaN,r=NaN,i=NaN;return{lineStart:function(){e.lineStart(),t=1},point:function(u,s){var c=u>0?o.pi:-o.pi,a=Object(o.abs)(u-n);Object(o.abs)(a-o.pi)<o.epsilon?(e.point(n,r=(r+s)/2>0?o.halfPi:-o.halfPi),e.point(i,r),e.lineEnd(),e.lineStart(),e.point(c,r),e.point(u,r),t=0):i!==c&&a>=o.pi&&(Object(o.abs)(n-i)<o.epsilon&&(n-=i*o.epsilon),Object(o.abs)(u-c)<o.epsilon&&(u-=c*o.epsilon),r=function(e,t,n,r){var i,u,s=Object(o.sin)(e-n);return Object(o.abs)(s)>o.epsilon?Object(o.atan)((Object(o.sin)(t)*(u=Object(o.cos)(r))*Object(o.sin)(n)-Object(o.sin)(r)*(i=Object(o.cos)(t))*Object(o.sin)(e))/(i*u*s)):(t+r)/2}(n,r,u,s),e.point(i,r),e.lineEnd(),e.lineStart(),e.point(c,r),t=0),e.point(n=u,r=s),i=c},lineEnd:function(){e.lineEnd(),n=r=NaN},clean:function(){return 2-t}}}),(function(e,t,n,r){var i;if(null==e)i=n*o.halfPi,r.point(-o.pi,i),r.point(0,i),r.point(o.pi,i),r.point(o.pi,0),r.point(o.pi,-i),r.point(0,-i),r.point(-o.pi,-i),r.point(-o.pi,0),r.point(-o.pi,i);else if(Object(o.abs)(e[0]-t[0])>o.epsilon){var u=e[0]<t[0]?o.pi:-o.pi;i=n*u/2,r.point(-u,i),r.point(0,i),r.point(u,i)}else r.point(t[0],t[1])}),[-o.pi,-o.halfPi])},"./node_modules/d3-geo/src/clip/buffer.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-geo/src/noop.js");t.default=function(){var e,t=[];return{point:function(t,n){e.push([t,n])},lineStart:function(){t.push(e=[])},lineEnd:r.default,rejoin:function(){t.length>1&&t.push(t.pop().concat(t.shift()))},result:function(){var n=t;return t=[],e=null,n}}}},"./node_modules/d3-geo/src/clip/circle.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-geo/src/cartesian.js"),o=n("./node_modules/d3-geo/src/circle.js"),i=n("./node_modules/d3-geo/src/math.js"),u=n("./node_modules/d3-geo/src/pointEqual.js"),s=n("./node_modules/d3-geo/src/clip/index.js");t.default=function(e){var t=Object(i.cos)(e),n=6*i.radians,c=t>0,a=Object(i.abs)(t)>i.epsilon;function d(e,n){return Object(i.cos)(e)*Object(i.cos)(n)>t}function l(e,n,o){var u=Object(r.cartesian)(e),s=Object(r.cartesian)(n),c=[1,0,0],a=Object(r.cartesianCross)(u,s),d=Object(r.cartesianDot)(a,a),l=a[0],f=d-l*l;if(!f)return!o&&e;var h=t*d/f,p=-t*l/f,m=Object(r.cartesianCross)(c,a),_=Object(r.cartesianScale)(c,h),v=Object(r.cartesianScale)(a,p);Object(r.cartesianAddInPlace)(_,v);var g=m,b=Object(r.cartesianDot)(_,g),j=Object(r.cartesianDot)(g,g),y=b*b-j*(Object(r.cartesianDot)(_,_)-1);if(!(y<0)){var x=Object(i.sqrt)(y),w=Object(r.cartesianScale)(g,(-b-x)/j);if(Object(r.cartesianAddInPlace)(w,_),w=Object(r.spherical)(w),!o)return w;var O,M=e[0],S=n[0],A=e[1],P=n[1];S<M&&(O=M,M=S,S=O);var k=S-M,C=Object(i.abs)(k-i.pi)<i.epsilon;if(!C&&P<A&&(O=A,A=P,P=O),C||k<i.epsilon?C?A+P>0^w[1]<(Object(i.abs)(w[0]-M)<i.epsilon?A:P):A<=w[1]&&w[1]<=P:k>i.pi^(M<=w[0]&&w[0]<=S)){var T=Object(r.cartesianScale)(g,(-b+x)/j);return Object(r.cartesianAddInPlace)(T,_),[w,Object(r.spherical)(T)]}}}function f(t,n){var r=c?e:i.pi-e,o=0;return t<-r?o|=1:t>r&&(o|=2),n<-r?o|=4:n>r&&(o|=8),o}return Object(s.default)(d,(function(e){var t,n,r,o,s;return{lineStart:function(){o=r=!1,s=1},point:function(h,p){var m,_=[h,p],v=d(h,p),g=c?v?0:f(h,p):v?f(h+(h<0?i.pi:-i.pi),p):0;if(!t&&(o=r=v)&&e.lineStart(),v!==r&&(!(m=l(t,_))||Object(u.default)(t,m)||Object(u.default)(_,m))&&(_[0]+=i.epsilon,_[1]+=i.epsilon,v=d(_[0],_[1])),v!==r)s=0,v?(e.lineStart(),m=l(_,t),e.point(m[0],m[1])):(m=l(t,_),e.point(m[0],m[1]),e.lineEnd()),t=m;else if(a&&t&&c^v){var b;g&n||!(b=l(_,t,!0))||(s=0,c?(e.lineStart(),e.point(b[0][0],b[0][1]),e.point(b[1][0],b[1][1]),e.lineEnd()):(e.point(b[1][0],b[1][1]),e.lineEnd(),e.lineStart(),e.point(b[0][0],b[0][1])))}!v||t&&Object(u.default)(t,_)||e.point(_[0],_[1]),t=_,r=v,n=g},lineEnd:function(){r&&e.lineEnd(),t=null},clean:function(){return s|(o&&r)<<1}}}),(function(t,r,i,u){Object(o.circleStream)(u,e,n,i,t,r)}),c?[0,-e]:[-i.pi,e-i.pi])}},"./node_modules/d3-geo/src/clip/extent.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-geo/src/clip/rectangle.js");t.default=function(){var e,t,n,o=0,i=0,u=960,s=500;return n={stream:function(n){return e&&t===n?e:e=Object(r.default)(o,i,u,s)(t=n)},extent:function(r){return arguments.length?(o=+r[0][0],i=+r[0][1],u=+r[1][0],s=+r[1][1],e=t=null,n):[[o,i],[u,s]]}}}},"./node_modules/d3-geo/src/clip/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-geo/src/clip/buffer.js"),o=n("./node_modules/d3-geo/src/clip/rejoin.js"),i=n("./node_modules/d3-geo/src/math.js"),u=n("./node_modules/d3-geo/src/polygonContains.js"),s=n("./node_modules/d3-array/src/index.js");function c(e){return e.length>1}function a(e,t){return((e=e.x)[0]<0?e[1]-i.halfPi-i.epsilon:i.halfPi-e[1])-((t=t.x)[0]<0?t[1]-i.halfPi-i.epsilon:i.halfPi-t[1])}t.default=function(e,t,n,i){return function(d){var l,f,h,p=t(d),m=Object(r.default)(),_=t(m),v=!1,g={point:b,lineStart:y,lineEnd:x,polygonStart:function(){g.point=w,g.lineStart=O,g.lineEnd=M,f=[],l=[]},polygonEnd:function(){g.point=b,g.lineStart=y,g.lineEnd=x,f=Object(s.merge)(f);var e=Object(u.default)(l,i);f.length?(v||(d.polygonStart(),v=!0),Object(o.default)(f,a,e,n,d)):e&&(v||(d.polygonStart(),v=!0),d.lineStart(),n(null,null,1,d),d.lineEnd()),v&&(d.polygonEnd(),v=!1),f=l=null},sphere:function(){d.polygonStart(),d.lineStart(),n(null,null,1,d),d.lineEnd(),d.polygonEnd()}};function b(t,n){e(t,n)&&d.point(t,n)}function j(e,t){p.point(e,t)}function y(){g.point=j,p.lineStart()}function x(){g.point=b,p.lineEnd()}function w(e,t){h.push([e,t]),_.point(e,t)}function O(){_.lineStart(),h=[]}function M(){w(h[0][0],h[0][1]),_.lineEnd();var e,t,n,r,o=_.clean(),i=m.result(),u=i.length;if(h.pop(),l.push(h),h=null,u)if(1&o){if((t=(n=i[0]).length-1)>0){for(v||(d.polygonStart(),v=!0),d.lineStart(),e=0;e<t;++e)d.point((r=n[e])[0],r[1]);d.lineEnd()}}else u>1&&2&o&&i.push(i.pop().concat(i.shift())),f.push(i.filter(c))}return g}}},"./node_modules/d3-geo/src/clip/line.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t,n,r,o,i){var u,s=e[0],c=e[1],a=0,d=1,l=t[0]-s,f=t[1]-c;if(u=n-s,l||!(u>0)){if(u/=l,l<0){if(u<a)return;u<d&&(d=u)}else if(l>0){if(u>d)return;u>a&&(a=u)}if(u=o-s,l||!(u<0)){if(u/=l,l<0){if(u>d)return;u>a&&(a=u)}else if(l>0){if(u<a)return;u<d&&(d=u)}if(u=r-c,f||!(u>0)){if(u/=f,f<0){if(u<a)return;u<d&&(d=u)}else if(f>0){if(u>d)return;u>a&&(a=u)}if(u=i-c,f||!(u<0)){if(u/=f,f<0){if(u>d)return;u>a&&(a=u)}else if(f>0){if(u<a)return;u<d&&(d=u)}return a>0&&(e[0]=s+a*l,e[1]=c+a*f),d<1&&(t[0]=s+d*l,t[1]=c+d*f),!0}}}}}},"./node_modules/d3-geo/src/clip/rectangle.js":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return c}));var r=n("./node_modules/d3-geo/src/math.js"),o=n("./node_modules/d3-geo/src/clip/buffer.js"),i=n("./node_modules/d3-geo/src/clip/line.js"),u=n("./node_modules/d3-geo/src/clip/rejoin.js"),s=n("./node_modules/d3-array/src/index.js");function c(e,t,n,c){function a(r,o){return e<=r&&r<=n&&t<=o&&o<=c}function d(r,o,i,u){var s=0,a=0;if(null==r||(s=l(r,i))!==(a=l(o,i))||h(r,o)<0^i>0)do{u.point(0===s||3===s?e:n,s>1?c:t)}while((s=(s+i+4)%4)!==a);else u.point(o[0],o[1])}function l(o,i){return Object(r.abs)(o[0]-e)<r.epsilon?i>0?0:3:Object(r.abs)(o[0]-n)<r.epsilon?i>0?2:1:Object(r.abs)(o[1]-t)<r.epsilon?i>0?1:0:i>0?3:2}function f(e,t){return h(e.x,t.x)}function h(e,t){var n=l(e,1),r=l(t,1);return n!==r?n-r:0===n?t[1]-e[1]:1===n?e[0]-t[0]:2===n?e[1]-t[1]:t[0]-e[0]}return function(r){var l,h,p,m,_,v,g,b,j,y,x,w=r,O=Object(o.default)(),M={point:S,lineStart:function(){M.point=A,h&&h.push(p=[]);y=!0,j=!1,g=b=NaN},lineEnd:function(){l&&(A(m,_),v&&j&&O.rejoin(),l.push(O.result()));M.point=S,j&&w.lineEnd()},polygonStart:function(){w=O,l=[],h=[],x=!0},polygonEnd:function(){var t=function(){for(var t=0,n=0,r=h.length;n<r;++n)for(var o,i,u=h[n],s=1,a=u.length,d=u[0],l=d[0],f=d[1];s<a;++s)o=l,i=f,d=u[s],l=d[0],f=d[1],i<=c?f>c&&(l-o)*(c-i)>(f-i)*(e-o)&&++t:f<=c&&(l-o)*(c-i)<(f-i)*(e-o)&&--t;return t}(),n=x&&t,o=(l=Object(s.merge)(l)).length;(n||o)&&(r.polygonStart(),n&&(r.lineStart(),d(null,null,1,r),r.lineEnd()),o&&Object(u.default)(l,f,t,d,r),r.polygonEnd());w=r,l=h=p=null}};function S(e,t){a(e,t)&&w.point(e,t)}function A(r,o){var u=a(r,o);if(h&&p.push([r,o]),y)m=r,_=o,v=u,y=!1,u&&(w.lineStart(),w.point(r,o));else if(u&&j)w.point(r,o);else{var s=[g=Math.max(-1e9,Math.min(1e9,g)),b=Math.max(-1e9,Math.min(1e9,b))],d=[r=Math.max(-1e9,Math.min(1e9,r)),o=Math.max(-1e9,Math.min(1e9,o))];Object(i.default)(s,d,e,t,n,c)?(j||(w.lineStart(),w.point(s[0],s[1])),w.point(d[0],d[1]),u||w.lineEnd(),x=!1):u&&(w.lineStart(),w.point(r,o),x=!1)}g=r,b=o,j=u}return M}}},"./node_modules/d3-geo/src/clip/rejoin.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-geo/src/pointEqual.js");function o(e,t,n,r){this.x=e,this.z=t,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}function i(e){if(t=e.length){for(var t,n,r=0,o=e[0];++r<t;)o.n=n=e[r],n.p=o,o=n;o.n=n=e[0],n.p=o}}t.default=function(e,t,n,u,s){var c,a,d=[],l=[];if(e.forEach((function(e){if(!((t=e.length-1)<=0)){var t,n,i=e[0],u=e[t];if(Object(r.default)(i,u)){for(s.lineStart(),c=0;c<t;++c)s.point((i=e[c])[0],i[1]);s.lineEnd()}else d.push(n=new o(i,e,null,!0)),l.push(n.o=new o(i,null,n,!1)),d.push(n=new o(u,e,null,!1)),l.push(n.o=new o(u,null,n,!0))}})),d.length){for(l.sort(t),i(d),i(l),c=0,a=l.length;c<a;++c)l[c].e=n=!n;for(var f,h,p=d[0];;){for(var m=p,_=!0;m.v;)if((m=m.n)===p)return;f=m.z,s.lineStart();do{if(m.v=m.o.v=!0,m.e){if(_)for(c=0,a=f.length;c<a;++c)s.point((h=f[c])[0],h[1]);else u(m.x,m.n.x,1,s);m=m.n}else{if(_)for(f=m.p.z,c=f.length-1;c>=0;--c)s.point((h=f[c])[0],h[1]);else u(m.x,m.p.x,-1,s);m=m.p}f=(m=m.o).z,_=!_}while(!m.v);s.lineEnd()}}}},"./node_modules/d3-geo/src/compose.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){function n(n,r){return n=e(n,r),t(n[0],n[1])}return e.invert&&t.invert&&(n.invert=function(n,r){return(n=t.invert(n,r))&&e.invert(n[0],n[1])}),n}},"./node_modules/d3-geo/src/constant.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return e}}},"./node_modules/d3-geo/src/contains.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-geo/src/polygonContains.js"),o=n("./node_modules/d3-geo/src/distance.js"),i=n("./node_modules/d3-geo/src/math.js"),u={Feature:function(e,t){return c(e.geometry,t)},FeatureCollection:function(e,t){for(var n=e.features,r=-1,o=n.length;++r<o;)if(c(n[r].geometry,t))return!0;return!1}},s={Sphere:function(){return!0},Point:function(e,t){return a(e.coordinates,t)},MultiPoint:function(e,t){for(var n=e.coordinates,r=-1,o=n.length;++r<o;)if(a(n[r],t))return!0;return!1},LineString:function(e,t){return d(e.coordinates,t)},MultiLineString:function(e,t){for(var n=e.coordinates,r=-1,o=n.length;++r<o;)if(d(n[r],t))return!0;return!1},Polygon:function(e,t){return l(e.coordinates,t)},MultiPolygon:function(e,t){for(var n=e.coordinates,r=-1,o=n.length;++r<o;)if(l(n[r],t))return!0;return!1},GeometryCollection:function(e,t){for(var n=e.geometries,r=-1,o=n.length;++r<o;)if(c(n[r],t))return!0;return!1}};function c(e,t){return!(!e||!s.hasOwnProperty(e.type))&&s[e.type](e,t)}function a(e,t){return 0===Object(o.default)(e,t)}function d(e,t){for(var n,r,u,s=0,c=e.length;s<c;s++){if(0===(r=Object(o.default)(e[s],t)))return!0;if(s>0&&(u=Object(o.default)(e[s],e[s-1]))>0&&n<=u&&r<=u&&(n+r-u)*(1-Math.pow((n-r)/u,2))<i.epsilon2*u)return!0;n=r}return!1}function l(e,t){return!!Object(r.default)(e.map(f),h(t))}function f(e){return(e=e.map(h)).pop(),e}function h(e){return[e[0]*i.radians,e[1]*i.radians]}t.default=function(e,t){return(e&&u.hasOwnProperty(e.type)?u[e.type]:c)(e,t)}},"./node_modules/d3-geo/src/distance.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-geo/src/length.js"),o=[null,null],i={type:"LineString",coordinates:o};t.default=function(e,t){return o[0]=e,o[1]=t,Object(r.default)(i)}},"./node_modules/d3-geo/src/graticule.js":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return s})),n.d(t,"graticule10",(function(){return c}));var r=n("./node_modules/d3-array/src/index.js"),o=n("./node_modules/d3-geo/src/math.js");function i(e,t,n){var i=Object(r.range)(e,t-o.epsilon,n).concat(t);return function(e){return i.map((function(t){return[e,t]}))}}function u(e,t,n){var i=Object(r.range)(e,t-o.epsilon,n).concat(t);return function(e){return i.map((function(t){return[t,e]}))}}function s(){var e,t,n,s,c,a,d,l,f,h,p,m,_=10,v=_,g=90,b=360,j=2.5;function y(){return{type:"MultiLineString",coordinates:x()}}function x(){return Object(r.range)(Object(o.ceil)(s/g)*g,n,g).map(p).concat(Object(r.range)(Object(o.ceil)(l/b)*b,d,b).map(m)).concat(Object(r.range)(Object(o.ceil)(t/_)*_,e,_).filter((function(e){return Object(o.abs)(e%g)>o.epsilon})).map(f)).concat(Object(r.range)(Object(o.ceil)(a/v)*v,c,v).filter((function(e){return Object(o.abs)(e%b)>o.epsilon})).map(h))}return y.lines=function(){return x().map((function(e){return{type:"LineString",coordinates:e}}))},y.outline=function(){return{type:"Polygon",coordinates:[p(s).concat(m(d).slice(1),p(n).reverse().slice(1),m(l).reverse().slice(1))]}},y.extent=function(e){return arguments.length?y.extentMajor(e).extentMinor(e):y.extentMinor()},y.extentMajor=function(e){return arguments.length?(s=+e[0][0],n=+e[1][0],l=+e[0][1],d=+e[1][1],s>n&&(e=s,s=n,n=e),l>d&&(e=l,l=d,d=e),y.precision(j)):[[s,l],[n,d]]},y.extentMinor=function(n){return arguments.length?(t=+n[0][0],e=+n[1][0],a=+n[0][1],c=+n[1][1],t>e&&(n=t,t=e,e=n),a>c&&(n=a,a=c,c=n),y.precision(j)):[[t,a],[e,c]]},y.step=function(e){return arguments.length?y.stepMajor(e).stepMinor(e):y.stepMinor()},y.stepMajor=function(e){return arguments.length?(g=+e[0],b=+e[1],y):[g,b]},y.stepMinor=function(e){return arguments.length?(_=+e[0],v=+e[1],y):[_,v]},y.precision=function(r){return arguments.length?(j=+r,f=i(a,c,90),h=u(t,e,j),p=i(l,d,90),m=u(s,n,j),y):j},y.extentMajor([[-180,-90+o.epsilon],[180,90-o.epsilon]]).extentMinor([[-180,-80-o.epsilon],[180,80+o.epsilon]])}function c(){return s()()}},"./node_modules/d3-geo/src/identity.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return e}},"./node_modules/d3-geo/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-geo/src/area.js");n.d(t,"geoArea",(function(){return r.default}));var o=n("./node_modules/d3-geo/src/bounds.js");n.d(t,"geoBounds",(function(){return o.default}));var i=n("./node_modules/d3-geo/src/centroid.js");n.d(t,"geoCentroid",(function(){return i.default}));var u=n("./node_modules/d3-geo/src/circle.js");n.d(t,"geoCircle",(function(){return u.default}));var s=n("./node_modules/d3-geo/src/clip/antimeridian.js");n.d(t,"geoClipAntimeridian",(function(){return s.default}));var c=n("./node_modules/d3-geo/src/clip/circle.js");n.d(t,"geoClipCircle",(function(){return c.default}));var a=n("./node_modules/d3-geo/src/clip/extent.js");n.d(t,"geoClipExtent",(function(){return a.default}));var d=n("./node_modules/d3-geo/src/clip/rectangle.js");n.d(t,"geoClipRectangle",(function(){return d.default}));var l=n("./node_modules/d3-geo/src/contains.js");n.d(t,"geoContains",(function(){return l.default}));var f=n("./node_modules/d3-geo/src/distance.js");n.d(t,"geoDistance",(function(){return f.default}));var h=n("./node_modules/d3-geo/src/graticule.js");n.d(t,"geoGraticule",(function(){return h.default})),n.d(t,"geoGraticule10",(function(){return h.graticule10}));var p=n("./node_modules/d3-geo/src/interpolate.js");n.d(t,"geoInterpolate",(function(){return p.default}));var m=n("./node_modules/d3-geo/src/length.js");n.d(t,"geoLength",(function(){return m.default}));var _=n("./node_modules/d3-geo/src/path/index.js");n.d(t,"geoPath",(function(){return _.default}));var v=n("./node_modules/d3-geo/src/projection/albers.js");n.d(t,"geoAlbers",(function(){return v.default}));var g=n("./node_modules/d3-geo/src/projection/albersUsa.js");n.d(t,"geoAlbersUsa",(function(){return g.default}));var b=n("./node_modules/d3-geo/src/projection/azimuthalEqualArea.js");n.d(t,"geoAzimuthalEqualArea",(function(){return b.default})),n.d(t,"geoAzimuthalEqualAreaRaw",(function(){return b.azimuthalEqualAreaRaw}));var j=n("./node_modules/d3-geo/src/projection/azimuthalEquidistant.js");n.d(t,"geoAzimuthalEquidistant",(function(){return j.default})),n.d(t,"geoAzimuthalEquidistantRaw",(function(){return j.azimuthalEquidistantRaw}));var y=n("./node_modules/d3-geo/src/projection/conicConformal.js");n.d(t,"geoConicConformal",(function(){return y.default})),n.d(t,"geoConicConformalRaw",(function(){return y.conicConformalRaw}));var x=n("./node_modules/d3-geo/src/projection/conicEqualArea.js");n.d(t,"geoConicEqualArea",(function(){return x.default})),n.d(t,"geoConicEqualAreaRaw",(function(){return x.conicEqualAreaRaw}));var w=n("./node_modules/d3-geo/src/projection/conicEquidistant.js");n.d(t,"geoConicEquidistant",(function(){return w.default})),n.d(t,"geoConicEquidistantRaw",(function(){return w.conicEquidistantRaw}));var O=n("./node_modules/d3-geo/src/projection/equalEarth.js");n.d(t,"geoEqualEarth",(function(){return O.default})),n.d(t,"geoEqualEarthRaw",(function(){return O.equalEarthRaw}));var M=n("./node_modules/d3-geo/src/projection/equirectangular.js");n.d(t,"geoEquirectangular",(function(){return M.default})),n.d(t,"geoEquirectangularRaw",(function(){return M.equirectangularRaw}));var S=n("./node_modules/d3-geo/src/projection/gnomonic.js");n.d(t,"geoGnomonic",(function(){return S.default})),n.d(t,"geoGnomonicRaw",(function(){return S.gnomonicRaw}));var A=n("./node_modules/d3-geo/src/projection/identity.js");n.d(t,"geoIdentity",(function(){return A.default}));var P=n("./node_modules/d3-geo/src/projection/index.js");n.d(t,"geoProjection",(function(){return P.default})),n.d(t,"geoProjectionMutator",(function(){return P.projectionMutator}));var k=n("./node_modules/d3-geo/src/projection/mercator.js");n.d(t,"geoMercator",(function(){return k.default})),n.d(t,"geoMercatorRaw",(function(){return k.mercatorRaw}));var C=n("./node_modules/d3-geo/src/projection/naturalEarth1.js");n.d(t,"geoNaturalEarth1",(function(){return C.default})),n.d(t,"geoNaturalEarth1Raw",(function(){return C.naturalEarth1Raw}));var T=n("./node_modules/d3-geo/src/projection/orthographic.js");n.d(t,"geoOrthographic",(function(){return T.default})),n.d(t,"geoOrthographicRaw",(function(){return T.orthographicRaw}));var E=n("./node_modules/d3-geo/src/projection/stereographic.js");n.d(t,"geoStereographic",(function(){return E.default})),n.d(t,"geoStereographicRaw",(function(){return E.stereographicRaw}));var R=n("./node_modules/d3-geo/src/projection/transverseMercator.js");n.d(t,"geoTransverseMercator",(function(){return R.default})),n.d(t,"geoTransverseMercatorRaw",(function(){return R.transverseMercatorRaw}));var N=n("./node_modules/d3-geo/src/rotation.js");n.d(t,"geoRotation",(function(){return N.default}));var q=n("./node_modules/d3-geo/src/stream.js");n.d(t,"geoStream",(function(){return q.default}));var B=n("./node_modules/d3-geo/src/transform.js");n.d(t,"geoTransform",(function(){return B.default}))},"./node_modules/d3-geo/src/interpolate.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-geo/src/math.js");t.default=function(e,t){var n=e[0]*r.radians,o=e[1]*r.radians,i=t[0]*r.radians,u=t[1]*r.radians,s=Object(r.cos)(o),c=Object(r.sin)(o),a=Object(r.cos)(u),d=Object(r.sin)(u),l=s*Object(r.cos)(n),f=s*Object(r.sin)(n),h=a*Object(r.cos)(i),p=a*Object(r.sin)(i),m=2*Object(r.asin)(Object(r.sqrt)(Object(r.haversin)(u-o)+s*a*Object(r.haversin)(i-n))),_=Object(r.sin)(m),v=m?function(e){var t=Object(r.sin)(e*=m)/_,n=Object(r.sin)(m-e)/_,o=n*l+t*h,i=n*f+t*p,u=n*c+t*d;return[Object(r.atan2)(i,o)*r.degrees,Object(r.atan2)(u,Object(r.sqrt)(o*o+i*i))*r.degrees]}:function(){return[n*r.degrees,o*r.degrees]};return v.distance=m,v}},"./node_modules/d3-geo/src/length.js":function(e,t,n){"use strict";n.r(t);var r,o,i,u=n("./node_modules/d3-geo/src/adder.js"),s=n("./node_modules/d3-geo/src/math.js"),c=n("./node_modules/d3-geo/src/noop.js"),a=n("./node_modules/d3-geo/src/stream.js"),d=Object(u.default)(),l={sphere:c.default,point:c.default,lineStart:function(){l.point=h,l.lineEnd=f},lineEnd:c.default,polygonStart:c.default,polygonEnd:c.default};function f(){l.point=l.lineEnd=c.default}function h(e,t){e*=s.radians,t*=s.radians,r=e,o=Object(s.sin)(t),i=Object(s.cos)(t),l.point=p}function p(e,t){e*=s.radians,t*=s.radians;var n=Object(s.sin)(t),u=Object(s.cos)(t),c=Object(s.abs)(e-r),a=Object(s.cos)(c),l=u*Object(s.sin)(c),f=i*n-o*u*a,h=o*n+i*u*a;d.add(Object(s.atan2)(Object(s.sqrt)(l*l+f*f),h)),r=e,o=n,i=u}t.default=function(e){return d.reset(),Object(a.default)(e,l),+d}},"./node_modules/d3-geo/src/math.js":function(e,t,n){"use strict";n.r(t),n.d(t,"epsilon",(function(){return r})),n.d(t,"epsilon2",(function(){return o})),n.d(t,"pi",(function(){return i})),n.d(t,"halfPi",(function(){return u})),n.d(t,"quarterPi",(function(){return s})),n.d(t,"tau",(function(){return c})),n.d(t,"degrees",(function(){return a})),n.d(t,"radians",(function(){return d})),n.d(t,"abs",(function(){return l})),n.d(t,"atan",(function(){return f})),n.d(t,"atan2",(function(){return h})),n.d(t,"cos",(function(){return p})),n.d(t,"ceil",(function(){return m})),n.d(t,"exp",(function(){return _})),n.d(t,"floor",(function(){return v})),n.d(t,"log",(function(){return g})),n.d(t,"pow",(function(){return b})),n.d(t,"sin",(function(){return j})),n.d(t,"sign",(function(){return y})),n.d(t,"sqrt",(function(){return x})),n.d(t,"tan",(function(){return w})),n.d(t,"acos",(function(){return O})),n.d(t,"asin",(function(){return M})),n.d(t,"haversin",(function(){return S}));var r=1e-6,o=1e-12,i=Math.PI,u=i/2,s=i/4,c=2*i,a=180/i,d=i/180,l=Math.abs,f=Math.atan,h=Math.atan2,p=Math.cos,m=Math.ceil,_=Math.exp,v=Math.floor,g=Math.log,b=Math.pow,j=Math.sin,y=Math.sign||function(e){return e>0?1:e<0?-1:0},x=Math.sqrt,w=Math.tan;function O(e){return e>1?0:e<-1?i:Math.acos(e)}function M(e){return e>1?u:e<-1?-u:Math.asin(e)}function S(e){return(e=j(e/2))*e}},"./node_modules/d3-geo/src/noop.js":function(e,t,n){"use strict";function r(){}n.r(t),n.d(t,"default",(function(){return r}))},"./node_modules/d3-geo/src/path/area.js":function(e,t,n){"use strict";n.r(t);var r,o,i,u,s=n("./node_modules/d3-geo/src/adder.js"),c=n("./node_modules/d3-geo/src/math.js"),a=n("./node_modules/d3-geo/src/noop.js"),d=Object(s.default)(),l=Object(s.default)(),f={point:a.default,lineStart:a.default,lineEnd:a.default,polygonStart:function(){f.lineStart=h,f.lineEnd=_},polygonEnd:function(){f.lineStart=f.lineEnd=f.point=a.default,d.add(Object(c.abs)(l)),l.reset()},result:function(){var e=d/2;return d.reset(),e}};function h(){f.point=p}function p(e,t){f.point=m,r=i=e,o=u=t}function m(e,t){l.add(u*e-i*t),i=e,u=t}function _(){m(r,o)}t.default=f},"./node_modules/d3-geo/src/path/bounds.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-geo/src/noop.js"),o=1/0,i=o,u=-o,s=u,c={point:function(e,t){e<o&&(o=e);e>u&&(u=e);t<i&&(i=t);t>s&&(s=t)},lineStart:r.default,lineEnd:r.default,polygonStart:r.default,polygonEnd:r.default,result:function(){var e=[[o,i],[u,s]];return u=s=-(i=o=1/0),e}};t.default=c},"./node_modules/d3-geo/src/path/centroid.js":function(e,t,n){"use strict";n.r(t);var r,o,i,u,s=n("./node_modules/d3-geo/src/math.js"),c=0,a=0,d=0,l=0,f=0,h=0,p=0,m=0,_=0,v={point:g,lineStart:b,lineEnd:x,polygonStart:function(){v.lineStart=w,v.lineEnd=O},polygonEnd:function(){v.point=g,v.lineStart=b,v.lineEnd=x},result:function(){var e=_?[p/_,m/_]:h?[l/h,f/h]:d?[c/d,a/d]:[NaN,NaN];return c=a=d=l=f=h=p=m=_=0,e}};function g(e,t){c+=e,a+=t,++d}function b(){v.point=j}function j(e,t){v.point=y,g(i=e,u=t)}function y(e,t){var n=e-i,r=t-u,o=Object(s.sqrt)(n*n+r*r);l+=o*(i+e)/2,f+=o*(u+t)/2,h+=o,g(i=e,u=t)}function x(){v.point=g}function w(){v.point=M}function O(){S(r,o)}function M(e,t){v.point=S,g(r=i=e,o=u=t)}function S(e,t){var n=e-i,r=t-u,o=Object(s.sqrt)(n*n+r*r);l+=o*(i+e)/2,f+=o*(u+t)/2,h+=o,p+=(o=u*e-i*t)*(i+e),m+=o*(u+t),_+=3*o,g(i=e,u=t)}t.default=v},"./node_modules/d3-geo/src/path/context.js":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return i}));var r=n("./node_modules/d3-geo/src/math.js"),o=n("./node_modules/d3-geo/src/noop.js");function i(e){this._context=e}i.prototype={_radius:4.5,pointRadius:function(e){return this._radius=e,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(e,t){switch(this._point){case 0:this._context.moveTo(e,t),this._point=1;break;case 1:this._context.lineTo(e,t);break;default:this._context.moveTo(e+this._radius,t),this._context.arc(e,t,this._radius,0,r.tau)}},result:o.default}},"./node_modules/d3-geo/src/path/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-geo/src/identity.js"),o=n("./node_modules/d3-geo/src/stream.js"),i=n("./node_modules/d3-geo/src/path/area.js"),u=n("./node_modules/d3-geo/src/path/bounds.js"),s=n("./node_modules/d3-geo/src/path/centroid.js"),c=n("./node_modules/d3-geo/src/path/context.js"),a=n("./node_modules/d3-geo/src/path/measure.js"),d=n("./node_modules/d3-geo/src/path/string.js");t.default=function(e,t){var n,l,f=4.5;function h(e){return e&&("function"==typeof f&&l.pointRadius(+f.apply(this,arguments)),Object(o.default)(e,n(l))),l.result()}return h.area=function(e){return Object(o.default)(e,n(i.default)),i.default.result()},h.measure=function(e){return Object(o.default)(e,n(a.default)),a.default.result()},h.bounds=function(e){return Object(o.default)(e,n(u.default)),u.default.result()},h.centroid=function(e){return Object(o.default)(e,n(s.default)),s.default.result()},h.projection=function(t){return arguments.length?(n=null==t?(e=null,r.default):(e=t).stream,h):e},h.context=function(e){return arguments.length?(l=null==e?(t=null,new d.default):new c.default(t=e),"function"!=typeof f&&l.pointRadius(f),h):t},h.pointRadius=function(e){return arguments.length?(f="function"==typeof e?e:(l.pointRadius(+e),+e),h):f},h.projection(e).context(t)}},"./node_modules/d3-geo/src/path/measure.js":function(e,t,n){"use strict";n.r(t);var r,o,i,u,s,c=n("./node_modules/d3-geo/src/adder.js"),a=n("./node_modules/d3-geo/src/math.js"),d=n("./node_modules/d3-geo/src/noop.js"),l=Object(c.default)(),f={point:d.default,lineStart:function(){f.point=h},lineEnd:function(){r&&p(o,i),f.point=d.default},polygonStart:function(){r=!0},polygonEnd:function(){r=null},result:function(){var e=+l;return l.reset(),e}};function h(e,t){f.point=p,o=u=e,i=s=t}function p(e,t){u-=e,s-=t,l.add(Object(a.sqrt)(u*u+s*s)),u=e,s=t}t.default=f},"./node_modules/d3-geo/src/path/string.js":function(e,t,n){"use strict";function r(){this._string=[]}function o(e){return"m0,"+e+"a"+e+","+e+" 0 1,1 0,"+-2*e+"a"+e+","+e+" 0 1,1 0,"+2*e+"z"}n.r(t),n.d(t,"default",(function(){return r})),r.prototype={_radius:4.5,_circle:o(4.5),pointRadius:function(e){return(e=+e)!==this._radius&&(this._radius=e,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(e,t){switch(this._point){case 0:this._string.push("M",e,",",t),this._point=1;break;case 1:this._string.push("L",e,",",t);break;default:null==this._circle&&(this._circle=o(this._radius)),this._string.push("M",e,",",t,this._circle)}},result:function(){if(this._string.length){var e=this._string.join("");return this._string=[],e}return null}}},"./node_modules/d3-geo/src/pointEqual.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-geo/src/math.js");t.default=function(e,t){return Object(r.abs)(e[0]-t[0])<r.epsilon&&Object(r.abs)(e[1]-t[1])<r.epsilon}},"./node_modules/d3-geo/src/polygonContains.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-geo/src/adder.js"),o=n("./node_modules/d3-geo/src/cartesian.js"),i=n("./node_modules/d3-geo/src/math.js"),u=Object(r.default)();function s(e){return Object(i.abs)(e[0])<=i.pi?e[0]:Object(i.sign)(e[0])*((Object(i.abs)(e[0])+i.pi)%i.tau-i.pi)}t.default=function(e,t){var n=s(t),r=t[1],c=Object(i.sin)(r),a=[Object(i.sin)(n),-Object(i.cos)(n),0],d=0,l=0;u.reset(),1===c?r=i.halfPi+i.epsilon:-1===c&&(r=-i.halfPi-i.epsilon);for(var f=0,h=e.length;f<h;++f)if(m=(p=e[f]).length)for(var p,m,_=p[m-1],v=s(_),g=_[1]/2+i.quarterPi,b=Object(i.sin)(g),j=Object(i.cos)(g),y=0;y<m;++y,v=w,b=M,j=S,_=x){var x=p[y],w=s(x),O=x[1]/2+i.quarterPi,M=Object(i.sin)(O),S=Object(i.cos)(O),A=w-v,P=A>=0?1:-1,k=P*A,C=k>i.pi,T=b*M;if(u.add(Object(i.atan2)(T*P*Object(i.sin)(k),j*S+T*Object(i.cos)(k))),d+=C?A+P*i.tau:A,C^v>=n^w>=n){var E=Object(o.cartesianCross)(Object(o.cartesian)(_),Object(o.cartesian)(x));Object(o.cartesianNormalizeInPlace)(E);var R=Object(o.cartesianCross)(a,E);Object(o.cartesianNormalizeInPlace)(R);var N=(C^A>=0?-1:1)*Object(i.asin)(R[2]);(r>N||r===N&&(E[0]||E[1]))&&(l+=C^A>=0?1:-1)}}return(d<-i.epsilon||d<i.epsilon&&u<-i.epsilon)^1&l}},"./node_modules/d3-geo/src/projection/albers.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-geo/src/projection/conicEqualArea.js");t.default=function(){return Object(r.default)().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}},"./node_modules/d3-geo/src/projection/albersUsa.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-geo/src/math.js"),o=n("./node_modules/d3-geo/src/projection/albers.js"),i=n("./node_modules/d3-geo/src/projection/conicEqualArea.js"),u=n("./node_modules/d3-geo/src/projection/fit.js");t.default=function(){var e,t,n,s,c,a,d=Object(o.default)(),l=Object(i.default)().rotate([154,0]).center([-2,58.5]).parallels([55,65]),f=Object(i.default)().rotate([157,0]).center([-3,19.9]).parallels([8,18]),h={point:function(e,t){a=[e,t]}};function p(e){var t=e[0],r=e[1];return a=null,n.point(t,r),a||(s.point(t,r),a)||(c.point(t,r),a)}function m(){return e=t=null,p}return p.invert=function(e){var t=d.scale(),n=d.translate(),r=(e[0]-n[0])/t,o=(e[1]-n[1])/t;return(o>=.12&&o<.234&&r>=-.425&&r<-.214?l:o>=.166&&o<.234&&r>=-.214&&r<-.115?f:d).invert(e)},p.stream=function(n){return e&&t===n?e:(r=[d.stream(t=n),l.stream(n),f.stream(n)],o=r.length,e={point:function(e,t){for(var n=-1;++n<o;)r[n].point(e,t)},sphere:function(){for(var e=-1;++e<o;)r[e].sphere()},lineStart:function(){for(var e=-1;++e<o;)r[e].lineStart()},lineEnd:function(){for(var e=-1;++e<o;)r[e].lineEnd()},polygonStart:function(){for(var e=-1;++e<o;)r[e].polygonStart()},polygonEnd:function(){for(var e=-1;++e<o;)r[e].polygonEnd()}});var r,o},p.precision=function(e){return arguments.length?(d.precision(e),l.precision(e),f.precision(e),m()):d.precision()},p.scale=function(e){return arguments.length?(d.scale(e),l.scale(.35*e),f.scale(e),p.translate(d.translate())):d.scale()},p.translate=function(e){if(!arguments.length)return d.translate();var t=d.scale(),o=+e[0],i=+e[1];return n=d.translate(e).clipExtent([[o-.455*t,i-.238*t],[o+.455*t,i+.238*t]]).stream(h),s=l.translate([o-.307*t,i+.201*t]).clipExtent([[o-.425*t+r.epsilon,i+.12*t+r.epsilon],[o-.214*t-r.epsilon,i+.234*t-r.epsilon]]).stream(h),c=f.translate([o-.205*t,i+.212*t]).clipExtent([[o-.214*t+r.epsilon,i+.166*t+r.epsilon],[o-.115*t-r.epsilon,i+.234*t-r.epsilon]]).stream(h),m()},p.fitExtent=function(e,t){return Object(u.fitExtent)(p,e,t)},p.fitSize=function(e,t){return Object(u.fitSize)(p,e,t)},p.fitWidth=function(e,t){return Object(u.fitWidth)(p,e,t)},p.fitHeight=function(e,t){return Object(u.fitHeight)(p,e,t)},p.scale(1070)}},"./node_modules/d3-geo/src/projection/azimuthal.js":function(e,t,n){"use strict";n.r(t),n.d(t,"azimuthalRaw",(function(){return o})),n.d(t,"azimuthalInvert",(function(){return i}));var r=n("./node_modules/d3-geo/src/math.js");function o(e){return function(t,n){var o=Object(r.cos)(t),i=Object(r.cos)(n),u=e(o*i);return[u*i*Object(r.sin)(t),u*Object(r.sin)(n)]}}function i(e){return function(t,n){var o=Object(r.sqrt)(t*t+n*n),i=e(o),u=Object(r.sin)(i),s=Object(r.cos)(i);return[Object(r.atan2)(t*u,o*s),Object(r.asin)(o&&n*u/o)]}}},"./node_modules/d3-geo/src/projection/azimuthalEqualArea.js":function(e,t,n){"use strict";n.r(t),n.d(t,"azimuthalEqualAreaRaw",(function(){return u}));var r=n("./node_modules/d3-geo/src/math.js"),o=n("./node_modules/d3-geo/src/projection/azimuthal.js"),i=n("./node_modules/d3-geo/src/projection/index.js"),u=Object(o.azimuthalRaw)((function(e){return Object(r.sqrt)(2/(1+e))}));u.invert=Object(o.azimuthalInvert)((function(e){return 2*Object(r.asin)(e/2)})),t.default=function(){return Object(i.default)(u).scale(124.75).clipAngle(179.999)}},"./node_modules/d3-geo/src/projection/azimuthalEquidistant.js":function(e,t,n){"use strict";n.r(t),n.d(t,"azimuthalEquidistantRaw",(function(){return u}));var r=n("./node_modules/d3-geo/src/math.js"),o=n("./node_modules/d3-geo/src/projection/azimuthal.js"),i=n("./node_modules/d3-geo/src/projection/index.js"),u=Object(o.azimuthalRaw)((function(e){return(e=Object(r.acos)(e))&&e/Object(r.sin)(e)}));u.invert=Object(o.azimuthalInvert)((function(e){return e})),t.default=function(){return Object(i.default)(u).scale(79.4188).clipAngle(179.999)}},"./node_modules/d3-geo/src/projection/conic.js":function(e,t,n){"use strict";n.r(t),n.d(t,"conicProjection",(function(){return i}));var r=n("./node_modules/d3-geo/src/math.js"),o=n("./node_modules/d3-geo/src/projection/index.js");function i(e){var t=0,n=r.pi/3,i=Object(o.projectionMutator)(e),u=i(t,n);return u.parallels=function(e){return arguments.length?i(t=e[0]*r.radians,n=e[1]*r.radians):[t*r.degrees,n*r.degrees]},u}},"./node_modules/d3-geo/src/projection/conicConformal.js":function(e,t,n){"use strict";n.r(t),n.d(t,"conicConformalRaw",(function(){return s}));var r=n("./node_modules/d3-geo/src/math.js"),o=n("./node_modules/d3-geo/src/projection/conic.js"),i=n("./node_modules/d3-geo/src/projection/mercator.js");function u(e){return Object(r.tan)((r.halfPi+e)/2)}function s(e,t){var n=Object(r.cos)(e),o=e===t?Object(r.sin)(e):Object(r.log)(n/Object(r.cos)(t))/Object(r.log)(u(t)/u(e)),s=n*Object(r.pow)(u(e),o)/o;if(!o)return i.mercatorRaw;function c(e,t){s>0?t<-r.halfPi+r.epsilon&&(t=-r.halfPi+r.epsilon):t>r.halfPi-r.epsilon&&(t=r.halfPi-r.epsilon);var n=s/Object(r.pow)(u(t),o);return[n*Object(r.sin)(o*e),s-n*Object(r.cos)(o*e)]}return c.invert=function(e,t){var n=s-t,i=Object(r.sign)(o)*Object(r.sqrt)(e*e+n*n),u=Object(r.atan2)(e,Object(r.abs)(n))*Object(r.sign)(n);return n*o<0&&(u-=r.pi*Object(r.sign)(e)*Object(r.sign)(n)),[u/o,2*Object(r.atan)(Object(r.pow)(s/i,1/o))-r.halfPi]},c}t.default=function(){return Object(o.conicProjection)(s).scale(109.5).parallels([30,30])}},"./node_modules/d3-geo/src/projection/conicEqualArea.js":function(e,t,n){"use strict";n.r(t),n.d(t,"conicEqualAreaRaw",(function(){return u}));var r=n("./node_modules/d3-geo/src/math.js"),o=n("./node_modules/d3-geo/src/projection/conic.js"),i=n("./node_modules/d3-geo/src/projection/cylindricalEqualArea.js");function u(e,t){var n=Object(r.sin)(e),o=(n+Object(r.sin)(t))/2;if(Object(r.abs)(o)<r.epsilon)return Object(i.cylindricalEqualAreaRaw)(e);var u=1+n*(2*o-n),s=Object(r.sqrt)(u)/o;function c(e,t){var n=Object(r.sqrt)(u-2*o*Object(r.sin)(t))/o;return[n*Object(r.sin)(e*=o),s-n*Object(r.cos)(e)]}return c.invert=function(e,t){var n=s-t,i=Object(r.atan2)(e,Object(r.abs)(n))*Object(r.sign)(n);return n*o<0&&(i-=r.pi*Object(r.sign)(e)*Object(r.sign)(n)),[i/o,Object(r.asin)((u-(e*e+n*n)*o*o)/(2*o))]},c}t.default=function(){return Object(o.conicProjection)(u).scale(155.424).center([0,33.6442])}},"./node_modules/d3-geo/src/projection/conicEquidistant.js":function(e,t,n){"use strict";n.r(t),n.d(t,"conicEquidistantRaw",(function(){return u}));var r=n("./node_modules/d3-geo/src/math.js"),o=n("./node_modules/d3-geo/src/projection/conic.js"),i=n("./node_modules/d3-geo/src/projection/equirectangular.js");function u(e,t){var n=Object(r.cos)(e),o=e===t?Object(r.sin)(e):(n-Object(r.cos)(t))/(t-e),u=n/o+e;if(Object(r.abs)(o)<r.epsilon)return i.equirectangularRaw;function s(e,t){var n=u-t,i=o*e;return[n*Object(r.sin)(i),u-n*Object(r.cos)(i)]}return s.invert=function(e,t){var n=u-t,i=Object(r.atan2)(e,Object(r.abs)(n))*Object(r.sign)(n);return n*o<0&&(i-=r.pi*Object(r.sign)(e)*Object(r.sign)(n)),[i/o,u-Object(r.sign)(o)*Object(r.sqrt)(e*e+n*n)]},s}t.default=function(){return Object(o.conicProjection)(u).scale(131.154).center([0,13.9389])}},"./node_modules/d3-geo/src/projection/cylindricalEqualArea.js":function(e,t,n){"use strict";n.r(t),n.d(t,"cylindricalEqualAreaRaw",(function(){return o}));var r=n("./node_modules/d3-geo/src/math.js");function o(e){var t=Object(r.cos)(e);function n(e,n){return[e*t,Object(r.sin)(n)/t]}return n.invert=function(e,n){return[e/t,Object(r.asin)(n*t)]},n}},"./node_modules/d3-geo/src/projection/equalEarth.js":function(e,t,n){"use strict";n.r(t),n.d(t,"equalEarthRaw",(function(){return d}));var r=n("./node_modules/d3-geo/src/projection/index.js"),o=n("./node_modules/d3-geo/src/math.js"),i=1.340264,u=-.081106,s=893e-6,c=.003796,a=Object(o.sqrt)(3)/2;function d(e,t){var n=Object(o.asin)(a*Object(o.sin)(t)),r=n*n,d=r*r*r;return[e*Object(o.cos)(n)/(a*(i+3*u*r+d*(7*s+9*c*r))),n*(i+u*r+d*(s+c*r))]}d.invert=function(e,t){for(var n,r=t,d=r*r,l=d*d*d,f=0;f<12&&(l=(d=(r-=n=(r*(i+u*d+l*(s+c*d))-t)/(i+3*u*d+l*(7*s+9*c*d)))*r)*d*d,!(Object(o.abs)(n)<o.epsilon2));++f);return[a*e*(i+3*u*d+l*(7*s+9*c*d))/Object(o.cos)(r),Object(o.asin)(Object(o.sin)(r)/a)]},t.default=function(){return Object(r.default)(d).scale(177.158)}},"./node_modules/d3-geo/src/projection/equirectangular.js":function(e,t,n){"use strict";n.r(t),n.d(t,"equirectangularRaw",(function(){return o}));var r=n("./node_modules/d3-geo/src/projection/index.js");function o(e,t){return[e,t]}o.invert=o,t.default=function(){return Object(r.default)(o).scale(152.63)}},"./node_modules/d3-geo/src/projection/fit.js":function(e,t,n){"use strict";n.r(t),n.d(t,"fitExtent",(function(){return u})),n.d(t,"fitSize",(function(){return s})),n.d(t,"fitWidth",(function(){return c})),n.d(t,"fitHeight",(function(){return a}));var r=n("./node_modules/d3-geo/src/stream.js"),o=n("./node_modules/d3-geo/src/path/bounds.js");function i(e,t,n){var i=e.clipExtent&&e.clipExtent();return e.scale(150).translate([0,0]),null!=i&&e.clipExtent(null),Object(r.default)(n,e.stream(o.default)),t(o.default.result()),null!=i&&e.clipExtent(i),e}function u(e,t,n){return i(e,(function(n){var r=t[1][0]-t[0][0],o=t[1][1]-t[0][1],i=Math.min(r/(n[1][0]-n[0][0]),o/(n[1][1]-n[0][1])),u=+t[0][0]+(r-i*(n[1][0]+n[0][0]))/2,s=+t[0][1]+(o-i*(n[1][1]+n[0][1]))/2;e.scale(150*i).translate([u,s])}),n)}function s(e,t,n){return u(e,[[0,0],t],n)}function c(e,t,n){return i(e,(function(n){var r=+t,o=r/(n[1][0]-n[0][0]),i=(r-o*(n[1][0]+n[0][0]))/2,u=-o*n[0][1];e.scale(150*o).translate([i,u])}),n)}function a(e,t,n){return i(e,(function(n){var r=+t,o=r/(n[1][1]-n[0][1]),i=-o*n[0][0],u=(r-o*(n[1][1]+n[0][1]))/2;e.scale(150*o).translate([i,u])}),n)}},"./node_modules/d3-geo/src/projection/gnomonic.js":function(e,t,n){"use strict";n.r(t),n.d(t,"gnomonicRaw",(function(){return u}));var r=n("./node_modules/d3-geo/src/math.js"),o=n("./node_modules/d3-geo/src/projection/azimuthal.js"),i=n("./node_modules/d3-geo/src/projection/index.js");function u(e,t){var n=Object(r.cos)(t),o=Object(r.cos)(e)*n;return[n*Object(r.sin)(e)/o,Object(r.sin)(t)/o]}u.invert=Object(o.azimuthalInvert)(r.atan),t.default=function(){return Object(i.default)(u).scale(144.049).clipAngle(60)}},"./node_modules/d3-geo/src/projection/identity.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-geo/src/clip/rectangle.js"),o=n("./node_modules/d3-geo/src/identity.js"),i=n("./node_modules/d3-geo/src/transform.js"),u=n("./node_modules/d3-geo/src/projection/fit.js"),s=n("./node_modules/d3-geo/src/math.js");t.default=function(){var e,t,n,c,a,d,l,f=1,h=0,p=0,m=1,_=1,v=0,g=null,b=1,j=1,y=Object(i.transformer)({point:function(e,t){var n=O([e,t]);this.stream.point(n[0],n[1])}}),x=o.default;function w(){return b=f*m,j=f*_,d=l=null,O}function O(n){var r=n[0]*b,o=n[1]*j;if(v){var i=o*e-r*t;r=r*e+o*t,o=i}return[r+h,o+p]}return O.invert=function(n){var r=n[0]-h,o=n[1]-p;if(v){var i=o*e+r*t;r=r*e-o*t,o=i}return[r/b,o/j]},O.stream=function(e){return d&&l===e?d:d=y(x(l=e))},O.postclip=function(e){return arguments.length?(x=e,g=n=c=a=null,w()):x},O.clipExtent=function(e){return arguments.length?(x=null==e?(g=n=c=a=null,o.default):Object(r.default)(g=+e[0][0],n=+e[0][1],c=+e[1][0],a=+e[1][1]),w()):null==g?null:[[g,n],[c,a]]},O.scale=function(e){return arguments.length?(f=+e,w()):f},O.translate=function(e){return arguments.length?(h=+e[0],p=+e[1],w()):[h,p]},O.angle=function(n){return arguments.length?(v=n%360*s.radians,t=Object(s.sin)(v),e=Object(s.cos)(v),w()):v*s.degrees},O.reflectX=function(e){return arguments.length?(m=e?-1:1,w()):m<0},O.reflectY=function(e){return arguments.length?(_=e?-1:1,w()):_<0},O.fitExtent=function(e,t){return Object(u.fitExtent)(O,e,t)},O.fitSize=function(e,t){return Object(u.fitSize)(O,e,t)},O.fitWidth=function(e,t){return Object(u.fitWidth)(O,e,t)},O.fitHeight=function(e,t){return Object(u.fitHeight)(O,e,t)},O}},"./node_modules/d3-geo/src/projection/index.js":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return _})),n.d(t,"projectionMutator",(function(){return v}));var r=n("./node_modules/d3-geo/src/clip/antimeridian.js"),o=n("./node_modules/d3-geo/src/clip/circle.js"),i=n("./node_modules/d3-geo/src/clip/rectangle.js"),u=n("./node_modules/d3-geo/src/compose.js"),s=n("./node_modules/d3-geo/src/identity.js"),c=n("./node_modules/d3-geo/src/math.js"),a=n("./node_modules/d3-geo/src/rotation.js"),d=n("./node_modules/d3-geo/src/transform.js"),l=n("./node_modules/d3-geo/src/projection/fit.js"),f=n("./node_modules/d3-geo/src/projection/resample.js"),h=Object(d.transformer)({point:function(e,t){this.stream.point(e*c.radians,t*c.radians)}});function p(e,t,n,r,o){function i(i,u){return[t+e*(i*=r),n-e*(u*=o)]}return i.invert=function(i,u){return[(i-t)/e*r,(n-u)/e*o]},i}function m(e,t,n,r,o,i){var u=Object(c.cos)(i),s=Object(c.sin)(i),a=u*e,d=s*e,l=u/e,f=s/e,h=(s*n-u*t)/e,p=(s*t+u*n)/e;function m(e,i){return[a*(e*=r)-d*(i*=o)+t,n-d*e-a*i]}return m.invert=function(e,t){return[r*(l*e-f*t+h),o*(p-f*e-l*t)]},m}function _(e){return v((function(){return e}))()}function v(e){var t,n,_,v,g,b,j,y,x,w,O=150,M=480,S=250,A=0,P=0,k=0,C=0,T=0,E=0,R=1,N=1,q=null,B=r.default,I=null,D=s.default,L=.5;function z(e){return y(e[0]*c.radians,e[1]*c.radians)}function F(e){return(e=y.invert(e[0],e[1]))&&[e[0]*c.degrees,e[1]*c.degrees]}function U(){var e=m(O,0,0,R,N,E).apply(null,t(A,P)),r=(E?m:p)(O,M-e[0],S-e[1],R,N,E);return n=Object(a.rotateRadians)(k,C,T),j=Object(u.default)(t,r),y=Object(u.default)(n,j),b=Object(f.default)(j,L),Y()}function Y(){return x=w=null,z}return z.stream=function(e){return x&&w===e?x:x=h(function(e){return Object(d.transformer)({point:function(t,n){var r=e(t,n);return this.stream.point(r[0],r[1])}})}(n)(B(b(D(w=e)))))},z.preclip=function(e){return arguments.length?(B=e,q=void 0,Y()):B},z.postclip=function(e){return arguments.length?(D=e,I=_=v=g=null,Y()):D},z.clipAngle=function(e){return arguments.length?(B=+e?Object(o.default)(q=e*c.radians):(q=null,r.default),Y()):q*c.degrees},z.clipExtent=function(e){return arguments.length?(D=null==e?(I=_=v=g=null,s.default):Object(i.default)(I=+e[0][0],_=+e[0][1],v=+e[1][0],g=+e[1][1]),Y()):null==I?null:[[I,_],[v,g]]},z.scale=function(e){return arguments.length?(O=+e,U()):O},z.translate=function(e){return arguments.length?(M=+e[0],S=+e[1],U()):[M,S]},z.center=function(e){return arguments.length?(A=e[0]%360*c.radians,P=e[1]%360*c.radians,U()):[A*c.degrees,P*c.degrees]},z.rotate=function(e){return arguments.length?(k=e[0]%360*c.radians,C=e[1]%360*c.radians,T=e.length>2?e[2]%360*c.radians:0,U()):[k*c.degrees,C*c.degrees,T*c.degrees]},z.angle=function(e){return arguments.length?(E=e%360*c.radians,U()):E*c.degrees},z.reflectX=function(e){return arguments.length?(R=e?-1:1,U()):R<0},z.reflectY=function(e){return arguments.length?(N=e?-1:1,U()):N<0},z.precision=function(e){return arguments.length?(b=Object(f.default)(j,L=e*e),Y()):Object(c.sqrt)(L)},z.fitExtent=function(e,t){return Object(l.fitExtent)(z,e,t)},z.fitSize=function(e,t){return Object(l.fitSize)(z,e,t)},z.fitWidth=function(e,t){return Object(l.fitWidth)(z,e,t)},z.fitHeight=function(e,t){return Object(l.fitHeight)(z,e,t)},function(){return t=e.apply(this,arguments),z.invert=t.invert&&F,U()}}},"./node_modules/d3-geo/src/projection/mercator.js":function(e,t,n){"use strict";n.r(t),n.d(t,"mercatorRaw",(function(){return u})),n.d(t,"mercatorProjection",(function(){return s}));var r=n("./node_modules/d3-geo/src/math.js"),o=n("./node_modules/d3-geo/src/rotation.js"),i=n("./node_modules/d3-geo/src/projection/index.js");function u(e,t){return[e,Object(r.log)(Object(r.tan)((r.halfPi+t)/2))]}function s(e){var t,n,s,c=Object(i.default)(e),a=c.center,d=c.scale,l=c.translate,f=c.clipExtent,h=null;function p(){var i=r.pi*d(),a=c(Object(o.default)(c.rotate()).invert([0,0]));return f(null==h?[[a[0]-i,a[1]-i],[a[0]+i,a[1]+i]]:e===u?[[Math.max(a[0]-i,h),t],[Math.min(a[0]+i,n),s]]:[[h,Math.max(a[1]-i,t)],[n,Math.min(a[1]+i,s)]])}return c.scale=function(e){return arguments.length?(d(e),p()):d()},c.translate=function(e){return arguments.length?(l(e),p()):l()},c.center=function(e){return arguments.length?(a(e),p()):a()},c.clipExtent=function(e){return arguments.length?(null==e?h=t=n=s=null:(h=+e[0][0],t=+e[0][1],n=+e[1][0],s=+e[1][1]),p()):null==h?null:[[h,t],[n,s]]},p()}u.invert=function(e,t){return[e,2*Object(r.atan)(Object(r.exp)(t))-r.halfPi]},t.default=function(){return s(u).scale(961/r.tau)}},"./node_modules/d3-geo/src/projection/naturalEarth1.js":function(e,t,n){"use strict";n.r(t),n.d(t,"naturalEarth1Raw",(function(){return i}));var r=n("./node_modules/d3-geo/src/projection/index.js"),o=n("./node_modules/d3-geo/src/math.js");function i(e,t){var n=t*t,r=n*n;return[e*(.8707-.131979*n+r*(r*(.003971*n-.001529*r)-.013791)),t*(1.007226+n*(.015085+r*(.028874*n-.044475-.005916*r)))]}i.invert=function(e,t){var n,r=t,i=25;do{var u=r*r,s=u*u;r-=n=(r*(1.007226+u*(.015085+s*(.028874*u-.044475-.005916*s)))-t)/(1.007226+u*(.045255+s*(.259866*u-.311325-.005916*11*s)))}while(Object(o.abs)(n)>o.epsilon&&--i>0);return[e/(.8707+(u=r*r)*(u*(u*u*u*(.003971-.001529*u)-.013791)-.131979)),r]},t.default=function(){return Object(r.default)(i).scale(175.295)}},"./node_modules/d3-geo/src/projection/orthographic.js":function(e,t,n){"use strict";n.r(t),n.d(t,"orthographicRaw",(function(){return u}));var r=n("./node_modules/d3-geo/src/math.js"),o=n("./node_modules/d3-geo/src/projection/azimuthal.js"),i=n("./node_modules/d3-geo/src/projection/index.js");function u(e,t){return[Object(r.cos)(t)*Object(r.sin)(e),Object(r.sin)(t)]}u.invert=Object(o.azimuthalInvert)(r.asin),t.default=function(){return Object(i.default)(u).scale(249.5).clipAngle(90+r.epsilon)}},"./node_modules/d3-geo/src/projection/resample.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-geo/src/cartesian.js"),o=n("./node_modules/d3-geo/src/math.js"),i=n("./node_modules/d3-geo/src/transform.js"),u=Object(o.cos)(30*o.radians);t.default=function(e,t){return+t?function(e,t){function n(r,i,s,c,a,d,l,f,h,p,m,_,v,g){var b=l-r,j=f-i,y=b*b+j*j;if(y>4*t&&v--){var x=c+p,w=a+m,O=d+_,M=Object(o.sqrt)(x*x+w*w+O*O),S=Object(o.asin)(O/=M),A=Object(o.abs)(Object(o.abs)(O)-1)<o.epsilon||Object(o.abs)(s-h)<o.epsilon?(s+h)/2:Object(o.atan2)(w,x),P=e(A,S),k=P[0],C=P[1],T=k-r,E=C-i,R=j*T-b*E;(R*R/y>t||Object(o.abs)((b*T+j*E)/y-.5)>.3||c*p+a*m+d*_<u)&&(n(r,i,s,c,a,d,k,C,A,x/=M,w/=M,O,v,g),g.point(k,C),n(k,C,A,x,w,O,l,f,h,p,m,_,v,g))}}return function(t){var o,i,u,s,c,a,d,l,f,h,p,m,_={point:v,lineStart:g,lineEnd:j,polygonStart:function(){t.polygonStart(),_.lineStart=y},polygonEnd:function(){t.polygonEnd(),_.lineStart=g}};function v(n,r){n=e(n,r),t.point(n[0],n[1])}function g(){l=NaN,_.point=b,t.lineStart()}function b(o,i){var u=Object(r.cartesian)([o,i]),s=e(o,i);n(l,f,d,h,p,m,l=s[0],f=s[1],d=o,h=u[0],p=u[1],m=u[2],16,t),t.point(l,f)}function j(){_.point=v,t.lineEnd()}function y(){g(),_.point=x,_.lineEnd=w}function x(e,t){b(o=e,t),i=l,u=f,s=h,c=p,a=m,_.point=b}function w(){n(l,f,d,h,p,m,i,u,o,s,c,a,16,t),_.lineEnd=j,j()}return _}}(e,t):function(e){return Object(i.transformer)({point:function(t,n){t=e(t,n),this.stream.point(t[0],t[1])}})}(e)}},"./node_modules/d3-geo/src/projection/stereographic.js":function(e,t,n){"use strict";n.r(t),n.d(t,"stereographicRaw",(function(){return u}));var r=n("./node_modules/d3-geo/src/math.js"),o=n("./node_modules/d3-geo/src/projection/azimuthal.js"),i=n("./node_modules/d3-geo/src/projection/index.js");function u(e,t){var n=Object(r.cos)(t),o=1+Object(r.cos)(e)*n;return[n*Object(r.sin)(e)/o,Object(r.sin)(t)/o]}u.invert=Object(o.azimuthalInvert)((function(e){return 2*Object(r.atan)(e)})),t.default=function(){return Object(i.default)(u).scale(250).clipAngle(142)}},"./node_modules/d3-geo/src/projection/transverseMercator.js":function(e,t,n){"use strict";n.r(t),n.d(t,"transverseMercatorRaw",(function(){return i}));var r=n("./node_modules/d3-geo/src/math.js"),o=n("./node_modules/d3-geo/src/projection/mercator.js");function i(e,t){return[Object(r.log)(Object(r.tan)((r.halfPi+t)/2)),-e]}i.invert=function(e,t){return[-t,2*Object(r.atan)(Object(r.exp)(e))-r.halfPi]},t.default=function(){var e=Object(o.mercatorProjection)(i),t=e.center,n=e.rotate;return e.center=function(e){return arguments.length?t([-e[1],e[0]]):[(e=t())[1],-e[0]]},e.rotate=function(e){return arguments.length?n([e[0],e[1],e.length>2?e[2]+90:90]):[(e=n())[0],e[1],e[2]-90]},n([0,0,90]).scale(159.155)}},"./node_modules/d3-geo/src/rotation.js":function(e,t,n){"use strict";n.r(t),n.d(t,"rotateRadians",(function(){return u}));var r=n("./node_modules/d3-geo/src/compose.js"),o=n("./node_modules/d3-geo/src/math.js");function i(e,t){return[Object(o.abs)(e)>o.pi?e+Math.round(-e/o.tau)*o.tau:e,t]}function u(e,t,n){return(e%=o.tau)?t||n?Object(r.default)(c(e),a(t,n)):c(e):t||n?a(t,n):i}function s(e){return function(t,n){return[(t+=e)>o.pi?t-o.tau:t<-o.pi?t+o.tau:t,n]}}function c(e){var t=s(e);return t.invert=s(-e),t}function a(e,t){var n=Object(o.cos)(e),r=Object(o.sin)(e),i=Object(o.cos)(t),u=Object(o.sin)(t);function s(e,t){var s=Object(o.cos)(t),c=Object(o.cos)(e)*s,a=Object(o.sin)(e)*s,d=Object(o.sin)(t),l=d*n+c*r;return[Object(o.atan2)(a*i-l*u,c*n-d*r),Object(o.asin)(l*i+a*u)]}return s.invert=function(e,t){var s=Object(o.cos)(t),c=Object(o.cos)(e)*s,a=Object(o.sin)(e)*s,d=Object(o.sin)(t),l=d*i-a*u;return[Object(o.atan2)(a*i+d*u,c*n+l*r),Object(o.asin)(l*n-c*r)]},s}i.invert=i,t.default=function(e){function t(t){return(t=e(t[0]*o.radians,t[1]*o.radians))[0]*=o.degrees,t[1]*=o.degrees,t}return e=u(e[0]*o.radians,e[1]*o.radians,e.length>2?e[2]*o.radians:0),t.invert=function(t){return(t=e.invert(t[0]*o.radians,t[1]*o.radians))[0]*=o.degrees,t[1]*=o.degrees,t},t}},"./node_modules/d3-geo/src/stream.js":function(e,t,n){"use strict";function r(e,t){e&&i.hasOwnProperty(e.type)&&i[e.type](e,t)}n.r(t);var o={Feature:function(e,t){r(e.geometry,t)},FeatureCollection:function(e,t){for(var n=e.features,o=-1,i=n.length;++o<i;)r(n[o].geometry,t)}},i={Sphere:function(e,t){t.sphere()},Point:function(e,t){e=e.coordinates,t.point(e[0],e[1],e[2])},MultiPoint:function(e,t){for(var n=e.coordinates,r=-1,o=n.length;++r<o;)e=n[r],t.point(e[0],e[1],e[2])},LineString:function(e,t){u(e.coordinates,t,0)},MultiLineString:function(e,t){for(var n=e.coordinates,r=-1,o=n.length;++r<o;)u(n[r],t,0)},Polygon:function(e,t){s(e.coordinates,t)},MultiPolygon:function(e,t){for(var n=e.coordinates,r=-1,o=n.length;++r<o;)s(n[r],t)},GeometryCollection:function(e,t){for(var n=e.geometries,o=-1,i=n.length;++o<i;)r(n[o],t)}};function u(e,t,n){var r,o=-1,i=e.length-n;for(t.lineStart();++o<i;)r=e[o],t.point(r[0],r[1],r[2]);t.lineEnd()}function s(e,t){var n=-1,r=e.length;for(t.polygonStart();++n<r;)u(e[n],t,1);t.polygonEnd()}t.default=function(e,t){e&&o.hasOwnProperty(e.type)?o[e.type](e,t):r(e,t)}},"./node_modules/d3-geo/src/transform.js":function(e,t,n){"use strict";function r(e){return function(t){var n=new o;for(var r in e)n[r]=e[r];return n.stream=t,n}}function o(){}n.r(t),n.d(t,"transformer",(function(){return r})),t.default=function(e){return{stream:r(e)}},o.prototype={constructor:o,point:function(e,t){this.stream.point(e,t)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}}},"./node_modules/d3-hierarchy/src/accessors.js":function(e,t,n){"use strict";function r(e){return null==e?null:o(e)}function o(e){if("function"!=typeof e)throw new Error;return e}n.r(t),n.d(t,"optional",(function(){return r})),n.d(t,"required",(function(){return o}))},"./node_modules/d3-hierarchy/src/array.js":function(e,t,n){"use strict";n.r(t),n.d(t,"slice",(function(){return r})),n.d(t,"shuffle",(function(){return o}));var r=Array.prototype.slice;function o(e){for(var t,n,r=e.length;r;)n=Math.random()*r--|0,t=e[r],e[r]=e[n],e[n]=t;return e}},"./node_modules/d3-hierarchy/src/cluster.js":function(e,t,n){"use strict";function r(e,t){return e.parent===t.parent?1:2}function o(e,t){return e+t.x}function i(e,t){return Math.max(e,t.y)}n.r(t),t.default=function(){var e=r,t=1,n=1,u=!1;function s(r){var s,c=0;r.eachAfter((function(t){var n=t.children;n?(t.x=function(e){return e.reduce(o,0)/e.length}(n),t.y=function(e){return 1+e.reduce(i,0)}(n)):(t.x=s?c+=e(t,s):0,t.y=0,s=t)}));var a=function(e){for(var t;t=e.children;)e=t[0];return e}(r),d=function(e){for(var t;t=e.children;)e=t[t.length-1];return e}(r),l=a.x-e(a,d)/2,f=d.x+e(d,a)/2;return r.eachAfter(u?function(e){e.x=(e.x-r.x)*t,e.y=(r.y-e.y)*n}:function(e){e.x=(e.x-l)/(f-l)*t,e.y=(1-(r.y?e.y/r.y:1))*n})}return s.separation=function(t){return arguments.length?(e=t,s):e},s.size=function(e){return arguments.length?(u=!1,t=+e[0],n=+e[1],s):u?null:[t,n]},s.nodeSize=function(e){return arguments.length?(u=!0,t=+e[0],n=+e[1],s):u?[t,n]:null},s}},"./node_modules/d3-hierarchy/src/constant.js":function(e,t,n){"use strict";function r(){return 0}n.r(t),n.d(t,"constantZero",(function(){return r})),t.default=function(e){return function(){return e}}},"./node_modules/d3-hierarchy/src/hierarchy/ancestors.js":function(e,t,n){"use strict";n.r(t),t.default=function(){for(var e=this,t=[e];e=e.parent;)t.push(e);return t}},"./node_modules/d3-hierarchy/src/hierarchy/count.js":function(e,t,n){"use strict";function r(e){var t=0,n=e.children,r=n&&n.length;if(r)for(;--r>=0;)t+=n[r].value;else t=1;e.value=t}n.r(t),t.default=function(){return this.eachAfter(r)}},"./node_modules/d3-hierarchy/src/hierarchy/descendants.js":function(e,t,n){"use strict";n.r(t),t.default=function(){var e=[];return this.each((function(t){e.push(t)})),e}},"./node_modules/d3-hierarchy/src/hierarchy/each.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){var t,n,r,o,i=this,u=[i];do{for(t=u.reverse(),u=[];i=t.pop();)if(e(i),n=i.children)for(r=0,o=n.length;r<o;++r)u.push(n[r])}while(u.length);return this}},"./node_modules/d3-hierarchy/src/hierarchy/eachAfter.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){for(var t,n,r,o=this,i=[o],u=[];o=i.pop();)if(u.push(o),t=o.children)for(n=0,r=t.length;n<r;++n)i.push(t[n]);for(;o=u.pop();)e(o);return this}},"./node_modules/d3-hierarchy/src/hierarchy/eachBefore.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){for(var t,n,r=this,o=[r];r=o.pop();)if(e(r),t=r.children)for(n=t.length-1;n>=0;--n)o.push(t[n]);return this}},"./node_modules/d3-hierarchy/src/hierarchy/index.js":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return p})),n.d(t,"computeHeight",(function(){return v})),n.d(t,"Node",(function(){return g}));var r=n("./node_modules/d3-hierarchy/src/hierarchy/count.js"),o=n("./node_modules/d3-hierarchy/src/hierarchy/each.js"),i=n("./node_modules/d3-hierarchy/src/hierarchy/eachBefore.js"),u=n("./node_modules/d3-hierarchy/src/hierarchy/eachAfter.js"),s=n("./node_modules/d3-hierarchy/src/hierarchy/sum.js"),c=n("./node_modules/d3-hierarchy/src/hierarchy/sort.js"),a=n("./node_modules/d3-hierarchy/src/hierarchy/path.js"),d=n("./node_modules/d3-hierarchy/src/hierarchy/ancestors.js"),l=n("./node_modules/d3-hierarchy/src/hierarchy/descendants.js"),f=n("./node_modules/d3-hierarchy/src/hierarchy/leaves.js"),h=n("./node_modules/d3-hierarchy/src/hierarchy/links.js");function p(e,t){var n,r,o,i,u,s=new g(e),c=+e.value&&(s.value=e.value),a=[s];for(null==t&&(t=m);n=a.pop();)if(c&&(n.value=+n.data.value),(o=t(n.data))&&(u=o.length))for(n.children=new Array(u),i=u-1;i>=0;--i)a.push(r=n.children[i]=new g(o[i])),r.parent=n,r.depth=n.depth+1;return s.eachBefore(v)}function m(e){return e.children}function _(e){e.data=e.data.data}function v(e){var t=0;do{e.height=t}while((e=e.parent)&&e.height<++t)}function g(e){this.data=e,this.depth=this.height=0,this.parent=null}g.prototype=p.prototype={constructor:g,count:r.default,each:o.default,eachAfter:u.default,eachBefore:i.default,sum:s.default,sort:c.default,path:a.default,ancestors:d.default,descendants:l.default,leaves:f.default,links:h.default,copy:function(){return p(this).eachBefore(_)}}},"./node_modules/d3-hierarchy/src/hierarchy/leaves.js":function(e,t,n){"use strict";n.r(t),t.default=function(){var e=[];return this.eachBefore((function(t){t.children||e.push(t)})),e}},"./node_modules/d3-hierarchy/src/hierarchy/links.js":function(e,t,n){"use strict";n.r(t),t.default=function(){var e=this,t=[];return e.each((function(n){n!==e&&t.push({source:n.parent,target:n})})),t}},"./node_modules/d3-hierarchy/src/hierarchy/path.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){for(var t=this,n=function(e,t){if(e===t)return e;var n=e.ancestors(),r=t.ancestors(),o=null;e=n.pop(),t=r.pop();for(;e===t;)o=e,e=n.pop(),t=r.pop();return o}(t,e),r=[t];t!==n;)t=t.parent,r.push(t);for(var o=r.length;e!==n;)r.splice(o,0,e),e=e.parent;return r}},"./node_modules/d3-hierarchy/src/hierarchy/sort.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return this.eachBefore((function(t){t.children&&t.children.sort(e)}))}},"./node_modules/d3-hierarchy/src/hierarchy/sum.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return this.eachAfter((function(t){for(var n=+e(t.data)||0,r=t.children,o=r&&r.length;--o>=0;)n+=r[o].value;t.value=n}))}},"./node_modules/d3-hierarchy/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-hierarchy/src/cluster.js");n.d(t,"cluster",(function(){return r.default}));var o=n("./node_modules/d3-hierarchy/src/hierarchy/index.js");n.d(t,"hierarchy",(function(){return o.default}));var i=n("./node_modules/d3-hierarchy/src/pack/index.js");n.d(t,"pack",(function(){return i.default}));var u=n("./node_modules/d3-hierarchy/src/pack/siblings.js");n.d(t,"packSiblings",(function(){return u.default}));var s=n("./node_modules/d3-hierarchy/src/pack/enclose.js");n.d(t,"packEnclose",(function(){return s.default}));var c=n("./node_modules/d3-hierarchy/src/partition.js");n.d(t,"partition",(function(){return c.default}));var a=n("./node_modules/d3-hierarchy/src/stratify.js");n.d(t,"stratify",(function(){return a.default}));var d=n("./node_modules/d3-hierarchy/src/tree.js");n.d(t,"tree",(function(){return d.default}));var l=n("./node_modules/d3-hierarchy/src/treemap/index.js");n.d(t,"treemap",(function(){return l.default}));var f=n("./node_modules/d3-hierarchy/src/treemap/binary.js");n.d(t,"treemapBinary",(function(){return f.default}));var h=n("./node_modules/d3-hierarchy/src/treemap/dice.js");n.d(t,"treemapDice",(function(){return h.default}));var p=n("./node_modules/d3-hierarchy/src/treemap/slice.js");n.d(t,"treemapSlice",(function(){return p.default}));var m=n("./node_modules/d3-hierarchy/src/treemap/sliceDice.js");n.d(t,"treemapSliceDice",(function(){return m.default}));var _=n("./node_modules/d3-hierarchy/src/treemap/squarify.js");n.d(t,"treemapSquarify",(function(){return _.default}));var v=n("./node_modules/d3-hierarchy/src/treemap/resquarify.js");n.d(t,"treemapResquarify",(function(){return v.default}))},"./node_modules/d3-hierarchy/src/pack/enclose.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-hierarchy/src/array.js");function o(e,t){var n,r;if(s(t,e))return[t];for(n=0;n<e.length;++n)if(i(t,e[n])&&s(a(e[n],t),e))return[e[n],t];for(n=0;n<e.length-1;++n)for(r=n+1;r<e.length;++r)if(i(a(e[n],e[r]),t)&&i(a(e[n],t),e[r])&&i(a(e[r],t),e[n])&&s(d(e[n],e[r],t),e))return[e[n],e[r],t];throw new Error}function i(e,t){var n=e.r-t.r,r=t.x-e.x,o=t.y-e.y;return n<0||n*n<r*r+o*o}function u(e,t){var n=e.r-t.r+1e-6,r=t.x-e.x,o=t.y-e.y;return n>0&&n*n>r*r+o*o}function s(e,t){for(var n=0;n<t.length;++n)if(!u(e,t[n]))return!1;return!0}function c(e){switch(e.length){case 1:return{x:(t=e[0]).x,y:t.y,r:t.r};case 2:return a(e[0],e[1]);case 3:return d(e[0],e[1],e[2])}var t}function a(e,t){var n=e.x,r=e.y,o=e.r,i=t.x,u=t.y,s=t.r,c=i-n,a=u-r,d=s-o,l=Math.sqrt(c*c+a*a);return{x:(n+i+c/l*d)/2,y:(r+u+a/l*d)/2,r:(l+o+s)/2}}function d(e,t,n){var r=e.x,o=e.y,i=e.r,u=t.x,s=t.y,c=t.r,a=n.x,d=n.y,l=n.r,f=r-u,h=r-a,p=o-s,m=o-d,_=c-i,v=l-i,g=r*r+o*o-i*i,b=g-u*u-s*s+c*c,j=g-a*a-d*d+l*l,y=h*p-f*m,x=(p*j-m*b)/(2*y)-r,w=(m*_-p*v)/y,O=(h*b-f*j)/(2*y)-o,M=(f*v-h*_)/y,S=w*w+M*M-1,A=2*(i+x*w+O*M),P=x*x+O*O-i*i,k=-(S?(A+Math.sqrt(A*A-4*S*P))/(2*S):P/A);return{x:r+x+w*k,y:o+O+M*k,r:k}}t.default=function(e){for(var t,n,i=0,s=(e=Object(r.shuffle)(r.slice.call(e))).length,a=[];i<s;)t=e[i],n&&u(n,t)?++i:(n=c(a=o(a,t)),i=0);return n}},"./node_modules/d3-hierarchy/src/pack/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-hierarchy/src/pack/siblings.js"),o=n("./node_modules/d3-hierarchy/src/accessors.js"),i=n("./node_modules/d3-hierarchy/src/constant.js");function u(e){return Math.sqrt(e.value)}function s(e){return function(t){t.children||(t.r=Math.max(0,+e(t)||0))}}function c(e,t){return function(n){if(o=n.children){var o,i,u,s=o.length,c=e(n)*t||0;if(c)for(i=0;i<s;++i)o[i].r+=c;if(u=Object(r.packEnclose)(o),c)for(i=0;i<s;++i)o[i].r-=c;n.r=u+c}}}function a(e){return function(t){var n=t.parent;t.r*=e,n&&(t.x=n.x+e*t.x,t.y=n.y+e*t.y)}}t.default=function(){var e=null,t=1,n=1,r=i.constantZero;function d(o){return o.x=t/2,o.y=n/2,e?o.eachBefore(s(e)).eachAfter(c(r,.5)).eachBefore(a(1)):o.eachBefore(s(u)).eachAfter(c(i.constantZero,1)).eachAfter(c(r,o.r/Math.min(t,n))).eachBefore(a(Math.min(t,n)/(2*o.r))),o}return d.radius=function(t){return arguments.length?(e=Object(o.optional)(t),d):e},d.size=function(e){return arguments.length?(t=+e[0],n=+e[1],d):[t,n]},d.padding=function(e){return arguments.length?(r="function"==typeof e?e:Object(i.default)(+e),d):r},d}},"./node_modules/d3-hierarchy/src/pack/siblings.js":function(e,t,n){"use strict";n.r(t),n.d(t,"packEnclose",(function(){return c}));var r=n("./node_modules/d3-hierarchy/src/pack/enclose.js");function o(e,t,n){var r,o,i,u,s=e.x-t.x,c=e.y-t.y,a=s*s+c*c;a?(o=t.r+n.r,o*=o,u=e.r+n.r,o>(u*=u)?(r=(a+u-o)/(2*a),i=Math.sqrt(Math.max(0,u/a-r*r)),n.x=e.x-r*s-i*c,n.y=e.y-r*c+i*s):(r=(a+o-u)/(2*a),i=Math.sqrt(Math.max(0,o/a-r*r)),n.x=t.x+r*s-i*c,n.y=t.y+r*c+i*s)):(n.x=t.x+n.r,n.y=t.y)}function i(e,t){var n=e.r+t.r-1e-6,r=t.x-e.x,o=t.y-e.y;return n>0&&n*n>r*r+o*o}function u(e){var t=e._,n=e.next._,r=t.r+n.r,o=(t.x*n.r+n.x*t.r)/r,i=(t.y*n.r+n.y*t.r)/r;return o*o+i*i}function s(e){this._=e,this.next=null,this.previous=null}function c(e){if(!(a=e.length))return 0;var t,n,c,a,d,l,f,h,p,m,_;if((t=e[0]).x=0,t.y=0,!(a>1))return t.r;if(n=e[1],t.x=-n.r,n.x=t.r,n.y=0,!(a>2))return t.r+n.r;o(n,t,c=e[2]),t=new s(t),n=new s(n),c=new s(c),t.next=c.previous=n,n.next=t.previous=c,c.next=n.previous=t;e:for(f=3;f<a;++f){o(t._,n._,c=e[f]),c=new s(c),h=n.next,p=t.previous,m=n._.r,_=t._.r;do{if(m<=_){if(i(h._,c._)){n=h,t.next=n,n.previous=t,--f;continue e}m+=h._.r,h=h.next}else{if(i(p._,c._)){(t=p).next=n,n.previous=t,--f;continue e}_+=p._.r,p=p.previous}}while(h!==p.next);for(c.previous=t,c.next=n,t.next=n.previous=n=c,d=u(t);(c=c.next)!==n;)(l=u(c))<d&&(t=c,d=l);n=t.next}for(t=[n._],c=n;(c=c.next)!==n;)t.push(c._);for(c=Object(r.default)(t),f=0;f<a;++f)(t=e[f]).x-=c.x,t.y-=c.y;return c.r}t.default=function(e){return c(e),e}},"./node_modules/d3-hierarchy/src/partition.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-hierarchy/src/treemap/round.js"),o=n("./node_modules/d3-hierarchy/src/treemap/dice.js");t.default=function(){var e=1,t=1,n=0,i=!1;function u(u){var s=u.height+1;return u.x0=u.y0=n,u.x1=e,u.y1=t/s,u.eachBefore(function(e,t){return function(r){r.children&&Object(o.default)(r,r.x0,e*(r.depth+1)/t,r.x1,e*(r.depth+2)/t);var i=r.x0,u=r.y0,s=r.x1-n,c=r.y1-n;s<i&&(i=s=(i+s)/2),c<u&&(u=c=(u+c)/2),r.x0=i,r.y0=u,r.x1=s,r.y1=c}}(t,s)),i&&u.eachBefore(r.default),u}return u.round=function(e){return arguments.length?(i=!!e,u):i},u.size=function(n){return arguments.length?(e=+n[0],t=+n[1],u):[e,t]},u.padding=function(e){return arguments.length?(n=+e,u):n},u}},"./node_modules/d3-hierarchy/src/stratify.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-hierarchy/src/accessors.js"),o=n("./node_modules/d3-hierarchy/src/hierarchy/index.js"),i={depth:-1},u={};function s(e){return e.id}function c(e){return e.parentId}t.default=function(){var e=s,t=c;function n(n){var r,s,c,a,d,l,f,h=n.length,p=new Array(h),m={};for(s=0;s<h;++s)r=n[s],d=p[s]=new o.Node(r),null!=(l=e(r,s,n))&&(l+="")&&(m[f="$"+(d.id=l)]=f in m?u:d);for(s=0;s<h;++s)if(d=p[s],null!=(l=t(n[s],s,n))&&(l+="")){if(!(a=m["$"+l]))throw new Error("missing: "+l);if(a===u)throw new Error("ambiguous: "+l);a.children?a.children.push(d):a.children=[d],d.parent=a}else{if(c)throw new Error("multiple roots");c=d}if(!c)throw new Error("no root");if(c.parent=i,c.eachBefore((function(e){e.depth=e.parent.depth+1,--h})).eachBefore(o.computeHeight),c.parent=null,h>0)throw new Error("cycle");return c}return n.id=function(t){return arguments.length?(e=Object(r.required)(t),n):e},n.parentId=function(e){return arguments.length?(t=Object(r.required)(e),n):t},n}},"./node_modules/d3-hierarchy/src/tree.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-hierarchy/src/hierarchy/index.js");function o(e,t){return e.parent===t.parent?1:2}function i(e){var t=e.children;return t?t[0]:e.t}function u(e){var t=e.children;return t?t[t.length-1]:e.t}function s(e,t,n){var r=n/(t.i-e.i);t.c-=r,t.s+=n,e.c+=r,t.z+=n,t.m+=n}function c(e,t,n){return e.a.parent===t.parent?e.a:n}function a(e,t){this._=e,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=t}a.prototype=Object.create(r.Node.prototype),t.default=function(){var e=o,t=1,n=1,r=null;function d(o){var i=function(e){for(var t,n,r,o,i,u=new a(e,0),s=[u];t=s.pop();)if(r=t._.children)for(t.children=new Array(i=r.length),o=i-1;o>=0;--o)s.push(n=t.children[o]=new a(r[o],o)),n.parent=t;return(u.parent=new a(null,0)).children=[u],u}(o);if(i.eachAfter(l),i.parent.m=-i.z,i.eachBefore(f),r)o.eachBefore(h);else{var u=o,s=o,c=o;o.eachBefore((function(e){e.x<u.x&&(u=e),e.x>s.x&&(s=e),e.depth>c.depth&&(c=e)}));var d=u===s?1:e(u,s)/2,p=d-u.x,m=t/(s.x+d+p),_=n/(c.depth||1);o.eachBefore((function(e){e.x=(e.x+p)*m,e.y=e.depth*_}))}return o}function l(t){var n=t.children,r=t.parent.children,o=t.i?r[t.i-1]:null;if(n){!function(e){for(var t,n=0,r=0,o=e.children,i=o.length;--i>=0;)(t=o[i]).z+=n,t.m+=n,n+=t.s+(r+=t.c)}(t);var a=(n[0].z+n[n.length-1].z)/2;o?(t.z=o.z+e(t._,o._),t.m=t.z-a):t.z=a}else o&&(t.z=o.z+e(t._,o._));t.parent.A=function(t,n,r){if(n){for(var o,a=t,d=t,l=n,f=a.parent.children[0],h=a.m,p=d.m,m=l.m,_=f.m;l=u(l),a=i(a),l&&a;)f=i(f),(d=u(d)).a=t,(o=l.z+m-a.z-h+e(l._,a._))>0&&(s(c(l,t,r),t,o),h+=o,p+=o),m+=l.m,h+=a.m,_+=f.m,p+=d.m;l&&!u(d)&&(d.t=l,d.m+=m-p),a&&!i(f)&&(f.t=a,f.m+=h-_,r=t)}return r}(t,o,t.parent.A||r[0])}function f(e){e._.x=e.z+e.parent.m,e.m+=e.parent.m}function h(e){e.x*=t,e.y=e.depth*n}return d.separation=function(t){return arguments.length?(e=t,d):e},d.size=function(e){return arguments.length?(r=!1,t=+e[0],n=+e[1],d):r?null:[t,n]},d.nodeSize=function(e){return arguments.length?(r=!0,t=+e[0],n=+e[1],d):r?[t,n]:null},d}},"./node_modules/d3-hierarchy/src/treemap/binary.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t,n,r,o){var i,u,s=e.children,c=s.length,a=new Array(c+1);for(a[0]=u=i=0;i<c;++i)a[i+1]=u+=s[i].value;!function e(t,n,r,o,i,u,c){if(t>=n-1){var d=s[t];return d.x0=o,d.y0=i,d.x1=u,void(d.y1=c)}var l=a[t],f=r/2+l,h=t+1,p=n-1;for(;h<p;){var m=h+p>>>1;a[m]<f?h=m+1:p=m}f-a[h-1]<a[h]-f&&t+1<h&&--h;var _=a[h]-l,v=r-_;if(u-o>c-i){var g=(o*v+u*_)/r;e(t,h,_,o,i,g,c),e(h,n,v,g,i,u,c)}else{var b=(i*v+c*_)/r;e(t,h,_,o,i,u,b),e(h,n,v,o,b,u,c)}}(0,c,e.value,t,n,r,o)}},"./node_modules/d3-hierarchy/src/treemap/dice.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t,n,r,o){for(var i,u=e.children,s=-1,c=u.length,a=e.value&&(r-t)/e.value;++s<c;)(i=u[s]).y0=n,i.y1=o,i.x0=t,i.x1=t+=i.value*a}},"./node_modules/d3-hierarchy/src/treemap/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-hierarchy/src/treemap/round.js"),o=n("./node_modules/d3-hierarchy/src/treemap/squarify.js"),i=n("./node_modules/d3-hierarchy/src/accessors.js"),u=n("./node_modules/d3-hierarchy/src/constant.js");t.default=function(){var e=o.default,t=!1,n=1,s=1,c=[0],a=u.constantZero,d=u.constantZero,l=u.constantZero,f=u.constantZero,h=u.constantZero;function p(e){return e.x0=e.y0=0,e.x1=n,e.y1=s,e.eachBefore(m),c=[0],t&&e.eachBefore(r.default),e}function m(t){var n=c[t.depth],r=t.x0+n,o=t.y0+n,i=t.x1-n,u=t.y1-n;i<r&&(r=i=(r+i)/2),u<o&&(o=u=(o+u)/2),t.x0=r,t.y0=o,t.x1=i,t.y1=u,t.children&&(n=c[t.depth+1]=a(t)/2,r+=h(t)-n,o+=d(t)-n,(i-=l(t)-n)<r&&(r=i=(r+i)/2),(u-=f(t)-n)<o&&(o=u=(o+u)/2),e(t,r,o,i,u))}return p.round=function(e){return arguments.length?(t=!!e,p):t},p.size=function(e){return arguments.length?(n=+e[0],s=+e[1],p):[n,s]},p.tile=function(t){return arguments.length?(e=Object(i.required)(t),p):e},p.padding=function(e){return arguments.length?p.paddingInner(e).paddingOuter(e):p.paddingInner()},p.paddingInner=function(e){return arguments.length?(a="function"==typeof e?e:Object(u.default)(+e),p):a},p.paddingOuter=function(e){return arguments.length?p.paddingTop(e).paddingRight(e).paddingBottom(e).paddingLeft(e):p.paddingTop()},p.paddingTop=function(e){return arguments.length?(d="function"==typeof e?e:Object(u.default)(+e),p):d},p.paddingRight=function(e){return arguments.length?(l="function"==typeof e?e:Object(u.default)(+e),p):l},p.paddingBottom=function(e){return arguments.length?(f="function"==typeof e?e:Object(u.default)(+e),p):f},p.paddingLeft=function(e){return arguments.length?(h="function"==typeof e?e:Object(u.default)(+e),p):h},p}},"./node_modules/d3-hierarchy/src/treemap/resquarify.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-hierarchy/src/treemap/dice.js"),o=n("./node_modules/d3-hierarchy/src/treemap/slice.js"),i=n("./node_modules/d3-hierarchy/src/treemap/squarify.js");t.default=function e(t){function n(e,n,u,s,c){if((a=e._squarify)&&a.ratio===t)for(var a,d,l,f,h,p=-1,m=a.length,_=e.value;++p<m;){for(l=(d=a[p]).children,f=d.value=0,h=l.length;f<h;++f)d.value+=l[f].value;d.dice?Object(r.default)(d,n,u,s,u+=(c-u)*d.value/_):Object(o.default)(d,n,u,n+=(s-n)*d.value/_,c),_-=d.value}else e._squarify=a=Object(i.squarifyRatio)(t,e,n,u,s,c),a.ratio=t}return n.ratio=function(t){return e((t=+t)>1?t:1)},n}(i.phi)},"./node_modules/d3-hierarchy/src/treemap/round.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){e.x0=Math.round(e.x0),e.y0=Math.round(e.y0),e.x1=Math.round(e.x1),e.y1=Math.round(e.y1)}},"./node_modules/d3-hierarchy/src/treemap/slice.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t,n,r,o){for(var i,u=e.children,s=-1,c=u.length,a=e.value&&(o-n)/e.value;++s<c;)(i=u[s]).x0=t,i.x1=r,i.y0=n,i.y1=n+=i.value*a}},"./node_modules/d3-hierarchy/src/treemap/sliceDice.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-hierarchy/src/treemap/dice.js"),o=n("./node_modules/d3-hierarchy/src/treemap/slice.js");t.default=function(e,t,n,i,u){(1&e.depth?o.default:r.default)(e,t,n,i,u)}},"./node_modules/d3-hierarchy/src/treemap/squarify.js":function(e,t,n){"use strict";n.r(t),n.d(t,"phi",(function(){return i})),n.d(t,"squarifyRatio",(function(){return u}));var r=n("./node_modules/d3-hierarchy/src/treemap/dice.js"),o=n("./node_modules/d3-hierarchy/src/treemap/slice.js"),i=(1+Math.sqrt(5))/2;function u(e,t,n,i,u,s){for(var c,a,d,l,f,h,p,m,_,v,g,b=[],j=t.children,y=0,x=0,w=j.length,O=t.value;y<w;){d=u-n,l=s-i;do{f=j[x++].value}while(!f&&x<w);for(h=p=f,g=f*f*(v=Math.max(l/d,d/l)/(O*e)),_=Math.max(p/g,g/h);x<w;++x){if(f+=a=j[x].value,a<h&&(h=a),a>p&&(p=a),g=f*f*v,(m=Math.max(p/g,g/h))>_){f-=a;break}_=m}b.push(c={value:f,dice:d<l,children:j.slice(y,x)}),c.dice?Object(r.default)(c,n,i,u,O?i+=l*f/O:s):Object(o.default)(c,n,i,O?n+=d*f/O:u,s),O-=f,y=x}return b}t.default=function e(t){function n(e,n,r,o,i){u(t,e,n,r,o,i)}return n.ratio=function(t){return e((t=+t)>1?t:1)},n}(i)},"./node_modules/d3-interpolate/src/array.js":function(e,t,n){"use strict";n.r(t),n.d(t,"genericArray",(function(){return i}));var r=n("./node_modules/d3-interpolate/src/value.js"),o=n("./node_modules/d3-interpolate/src/numberArray.js");function i(e,t){var n,o=t?t.length:0,i=e?Math.min(o,e.length):0,u=new Array(i),s=new Array(o);for(n=0;n<i;++n)u[n]=Object(r.default)(e[n],t[n]);for(;n<o;++n)s[n]=t[n];return function(e){for(n=0;n<i;++n)s[n]=u[n](e);return s}}t.default=function(e,t){return(Object(o.isNumberArray)(t)?o.default:i)(e,t)}},"./node_modules/d3-interpolate/src/basis.js":function(e,t,n){"use strict";function r(e,t,n,r,o){var i=e*e,u=i*e;return((1-3*e+3*i-u)*t+(4-6*i+3*u)*n+(1+3*e+3*i-3*u)*r+u*o)/6}n.r(t),n.d(t,"basis",(function(){return r})),t.default=function(e){var t=e.length-1;return function(n){var o=n<=0?n=0:n>=1?(n=1,t-1):Math.floor(n*t),i=e[o],u=e[o+1],s=o>0?e[o-1]:2*i-u,c=o<t-1?e[o+2]:2*u-i;return r((n-o/t)*t,s,i,u,c)}}},"./node_modules/d3-interpolate/src/basisClosed.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-interpolate/src/basis.js");t.default=function(e){var t=e.length;return function(n){var o=Math.floor(((n%=1)<0?++n:n)*t),i=e[(o+t-1)%t],u=e[o%t],s=e[(o+1)%t],c=e[(o+2)%t];return Object(r.basis)((n-o/t)*t,i,u,s,c)}}},"./node_modules/d3-interpolate/src/color.js":function(e,t,n){"use strict";n.r(t),n.d(t,"hue",(function(){return i})),n.d(t,"gamma",(function(){return u})),n.d(t,"default",(function(){return s}));var r=n("./node_modules/d3-interpolate/src/constant.js");function o(e,t){return function(n){return e+n*t}}function i(e,t){var n=t-e;return n?o(e,n>180||n<-180?n-360*Math.round(n/360):n):Object(r.default)(isNaN(e)?t:e)}function u(e){return 1==(e=+e)?s:function(t,n){return n-t?function(e,t,n){return e=Math.pow(e,n),t=Math.pow(t,n)-e,n=1/n,function(r){return Math.pow(e+r*t,n)}}(t,n,e):Object(r.default)(isNaN(t)?n:t)}}function s(e,t){var n=t-e;return n?o(e,n):Object(r.default)(isNaN(e)?t:e)}},"./node_modules/d3-interpolate/src/constant.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return e}}},"./node_modules/d3-interpolate/src/cubehelix.js":function(e,t,n){"use strict";n.r(t),n.d(t,"cubehelixLong",(function(){return u}));var r=n("./node_modules/d3-color/src/index.js"),o=n("./node_modules/d3-interpolate/src/color.js");function i(e){return function t(n){function i(t,i){var u=e((t=Object(r.cubehelix)(t)).h,(i=Object(r.cubehelix)(i)).h),s=Object(o.default)(t.s,i.s),c=Object(o.default)(t.l,i.l),a=Object(o.default)(t.opacity,i.opacity);return function(e){return t.h=u(e),t.s=s(e),t.l=c(Math.pow(e,n)),t.opacity=a(e),t+""}}return n=+n,i.gamma=t,i}(1)}t.default=i(o.hue);var u=i(o.default)},"./node_modules/d3-interpolate/src/date.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){var n=new Date;return e=+e,t=+t,function(r){return n.setTime(e*(1-r)+t*r),n}}},"./node_modules/d3-interpolate/src/discrete.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){var t=e.length;return function(n){return e[Math.max(0,Math.min(t-1,Math.floor(n*t)))]}}},"./node_modules/d3-interpolate/src/hcl.js":function(e,t,n){"use strict";n.r(t),n.d(t,"hclLong",(function(){return u}));var r=n("./node_modules/d3-color/src/index.js"),o=n("./node_modules/d3-interpolate/src/color.js");function i(e){return function(t,n){var i=e((t=Object(r.hcl)(t)).h,(n=Object(r.hcl)(n)).h),u=Object(o.default)(t.c,n.c),s=Object(o.default)(t.l,n.l),c=Object(o.default)(t.opacity,n.opacity);return function(e){return t.h=i(e),t.c=u(e),t.l=s(e),t.opacity=c(e),t+""}}}t.default=i(o.hue);var u=i(o.default)},"./node_modules/d3-interpolate/src/hsl.js":function(e,t,n){"use strict";n.r(t),n.d(t,"hslLong",(function(){return u}));var r=n("./node_modules/d3-color/src/index.js"),o=n("./node_modules/d3-interpolate/src/color.js");function i(e){return function(t,n){var i=e((t=Object(r.hsl)(t)).h,(n=Object(r.hsl)(n)).h),u=Object(o.default)(t.s,n.s),s=Object(o.default)(t.l,n.l),c=Object(o.default)(t.opacity,n.opacity);return function(e){return t.h=i(e),t.s=u(e),t.l=s(e),t.opacity=c(e),t+""}}}t.default=i(o.hue);var u=i(o.default)},"./node_modules/d3-interpolate/src/hue.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-interpolate/src/color.js");t.default=function(e,t){var n=Object(r.hue)(+e,+t);return function(e){var t=n(e);return t-360*Math.floor(t/360)}}},"./node_modules/d3-interpolate/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-interpolate/src/value.js");n.d(t,"interpolate",(function(){return r.default}));var o=n("./node_modules/d3-interpolate/src/array.js");n.d(t,"interpolateArray",(function(){return o.default}));var i=n("./node_modules/d3-interpolate/src/basis.js");n.d(t,"interpolateBasis",(function(){return i.default}));var u=n("./node_modules/d3-interpolate/src/basisClosed.js");n.d(t,"interpolateBasisClosed",(function(){return u.default}));var s=n("./node_modules/d3-interpolate/src/date.js");n.d(t,"interpolateDate",(function(){return s.default}));var c=n("./node_modules/d3-interpolate/src/discrete.js");n.d(t,"interpolateDiscrete",(function(){return c.default}));var a=n("./node_modules/d3-interpolate/src/hue.js");n.d(t,"interpolateHue",(function(){return a.default}));var d=n("./node_modules/d3-interpolate/src/number.js");n.d(t,"interpolateNumber",(function(){return d.default}));var l=n("./node_modules/d3-interpolate/src/numberArray.js");n.d(t,"interpolateNumberArray",(function(){return l.default}));var f=n("./node_modules/d3-interpolate/src/object.js");n.d(t,"interpolateObject",(function(){return f.default}));var h=n("./node_modules/d3-interpolate/src/round.js");n.d(t,"interpolateRound",(function(){return h.default}));var p=n("./node_modules/d3-interpolate/src/string.js");n.d(t,"interpolateString",(function(){return p.default}));var m=n("./node_modules/d3-interpolate/src/transform/index.js");n.d(t,"interpolateTransformCss",(function(){return m.interpolateTransformCss})),n.d(t,"interpolateTransformSvg",(function(){return m.interpolateTransformSvg}));var _=n("./node_modules/d3-interpolate/src/zoom.js");n.d(t,"interpolateZoom",(function(){return _.default}));var v=n("./node_modules/d3-interpolate/src/rgb.js");n.d(t,"interpolateRgb",(function(){return v.default})),n.d(t,"interpolateRgbBasis",(function(){return v.rgbBasis})),n.d(t,"interpolateRgbBasisClosed",(function(){return v.rgbBasisClosed}));var g=n("./node_modules/d3-interpolate/src/hsl.js");n.d(t,"interpolateHsl",(function(){return g.default})),n.d(t,"interpolateHslLong",(function(){return g.hslLong}));var b=n("./node_modules/d3-interpolate/src/lab.js");n.d(t,"interpolateLab",(function(){return b.default}));var j=n("./node_modules/d3-interpolate/src/hcl.js");n.d(t,"interpolateHcl",(function(){return j.default})),n.d(t,"interpolateHclLong",(function(){return j.hclLong}));var y=n("./node_modules/d3-interpolate/src/cubehelix.js");n.d(t,"interpolateCubehelix",(function(){return y.default})),n.d(t,"interpolateCubehelixLong",(function(){return y.cubehelixLong}));var x=n("./node_modules/d3-interpolate/src/piecewise.js");n.d(t,"piecewise",(function(){return x.default}));var w=n("./node_modules/d3-interpolate/src/quantize.js");n.d(t,"quantize",(function(){return w.default}))},"./node_modules/d3-interpolate/src/lab.js":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return i}));var r=n("./node_modules/d3-color/src/index.js"),o=n("./node_modules/d3-interpolate/src/color.js");function i(e,t){var n=Object(o.default)((e=Object(r.lab)(e)).l,(t=Object(r.lab)(t)).l),i=Object(o.default)(e.a,t.a),u=Object(o.default)(e.b,t.b),s=Object(o.default)(e.opacity,t.opacity);return function(t){return e.l=n(t),e.a=i(t),e.b=u(t),e.opacity=s(t),e+""}}},"./node_modules/d3-interpolate/src/number.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){return e=+e,t=+t,function(n){return e*(1-n)+t*n}}},"./node_modules/d3-interpolate/src/numberArray.js":function(e,t,n){"use strict";function r(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)}n.r(t),n.d(t,"isNumberArray",(function(){return r})),t.default=function(e,t){t||(t=[]);var n,r=e?Math.min(t.length,e.length):0,o=t.slice();return function(i){for(n=0;n<r;++n)o[n]=e[n]*(1-i)+t[n]*i;return o}}},"./node_modules/d3-interpolate/src/object.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-interpolate/src/value.js");t.default=function(e,t){var n,o={},i={};for(n in null!==e&&"object"==typeof e||(e={}),null!==t&&"object"==typeof t||(t={}),t)n in e?o[n]=Object(r.default)(e[n],t[n]):i[n]=t[n];return function(e){for(n in o)i[n]=o[n](e);return i}}},"./node_modules/d3-interpolate/src/piecewise.js":function(e,t,n){"use strict";function r(e,t){for(var n=0,r=t.length-1,o=t[0],i=new Array(r<0?0:r);n<r;)i[n]=e(o,o=t[++n]);return function(e){var t=Math.max(0,Math.min(r-1,Math.floor(e*=r)));return i[t](e-t)}}n.r(t),n.d(t,"default",(function(){return r}))},"./node_modules/d3-interpolate/src/quantize.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e(r/(t-1));return n}},"./node_modules/d3-interpolate/src/rgb.js":function(e,t,n){"use strict";n.r(t),n.d(t,"rgbBasis",(function(){return c})),n.d(t,"rgbBasisClosed",(function(){return a}));var r=n("./node_modules/d3-color/src/index.js"),o=n("./node_modules/d3-interpolate/src/basis.js"),i=n("./node_modules/d3-interpolate/src/basisClosed.js"),u=n("./node_modules/d3-interpolate/src/color.js");function s(e){return function(t){var n,o,i=t.length,u=new Array(i),s=new Array(i),c=new Array(i);for(n=0;n<i;++n)o=Object(r.rgb)(t[n]),u[n]=o.r||0,s[n]=o.g||0,c[n]=o.b||0;return u=e(u),s=e(s),c=e(c),o.opacity=1,function(e){return o.r=u(e),o.g=s(e),o.b=c(e),o+""}}}t.default=function e(t){var n=Object(u.gamma)(t);function o(e,t){var o=n((e=Object(r.rgb)(e)).r,(t=Object(r.rgb)(t)).r),i=n(e.g,t.g),s=n(e.b,t.b),c=Object(u.default)(e.opacity,t.opacity);return function(t){return e.r=o(t),e.g=i(t),e.b=s(t),e.opacity=c(t),e+""}}return o.gamma=e,o}(1);var c=s(o.default),a=s(i.default)},"./node_modules/d3-interpolate/src/round.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){return e=+e,t=+t,function(n){return Math.round(e*(1-n)+t*n)}}},"./node_modules/d3-interpolate/src/string.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-interpolate/src/number.js"),o=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,i=new RegExp(o.source,"g");t.default=function(e,t){var n,u,s,c=o.lastIndex=i.lastIndex=0,a=-1,d=[],l=[];for(e+="",t+="";(n=o.exec(e))&&(u=i.exec(t));)(s=u.index)>c&&(s=t.slice(c,s),d[a]?d[a]+=s:d[++a]=s),(n=n[0])===(u=u[0])?d[a]?d[a]+=u:d[++a]=u:(d[++a]=null,l.push({i:a,x:Object(r.default)(n,u)})),c=i.lastIndex;return c<t.length&&(s=t.slice(c),d[a]?d[a]+=s:d[++a]=s),d.length<2?l[0]?function(e){return function(t){return e(t)+""}}(l[0].x):function(e){return function(){return e}}(t):(t=l.length,function(e){for(var n,r=0;r<t;++r)d[(n=l[r]).i]=n.x(e);return d.join("")})}},"./node_modules/d3-interpolate/src/transform/decompose.js":function(e,t,n){"use strict";n.r(t),n.d(t,"identity",(function(){return o}));var r=180/Math.PI,o={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};t.default=function(e,t,n,o,i,u){var s,c,a;return(s=Math.sqrt(e*e+t*t))&&(e/=s,t/=s),(a=e*n+t*o)&&(n-=e*a,o-=t*a),(c=Math.sqrt(n*n+o*o))&&(n/=c,o/=c,a/=c),e*o<t*n&&(e=-e,t=-t,a=-a,s=-s),{translateX:i,translateY:u,rotate:Math.atan2(t,e)*r,skewX:Math.atan(a)*r,scaleX:s,scaleY:c}}},"./node_modules/d3-interpolate/src/transform/index.js":function(e,t,n){"use strict";n.r(t),n.d(t,"interpolateTransformCss",(function(){return u})),n.d(t,"interpolateTransformSvg",(function(){return s}));var r=n("./node_modules/d3-interpolate/src/number.js"),o=n("./node_modules/d3-interpolate/src/transform/parse.js");function i(e,t,n,o){function i(e){return e.length?e.pop()+" ":""}return function(u,s){var c=[],a=[];return u=e(u),s=e(s),function(e,o,i,u,s,c){if(e!==i||o!==u){var a=s.push("translate(",null,t,null,n);c.push({i:a-4,x:Object(r.default)(e,i)},{i:a-2,x:Object(r.default)(o,u)})}else(i||u)&&s.push("translate("+i+t+u+n)}(u.translateX,u.translateY,s.translateX,s.translateY,c,a),function(e,t,n,u){e!==t?(e-t>180?t+=360:t-e>180&&(e+=360),u.push({i:n.push(i(n)+"rotate(",null,o)-2,x:Object(r.default)(e,t)})):t&&n.push(i(n)+"rotate("+t+o)}(u.rotate,s.rotate,c,a),function(e,t,n,u){e!==t?u.push({i:n.push(i(n)+"skewX(",null,o)-2,x:Object(r.default)(e,t)}):t&&n.push(i(n)+"skewX("+t+o)}(u.skewX,s.skewX,c,a),function(e,t,n,o,u,s){if(e!==n||t!==o){var c=u.push(i(u)+"scale(",null,",",null,")");s.push({i:c-4,x:Object(r.default)(e,n)},{i:c-2,x:Object(r.default)(t,o)})}else 1===n&&1===o||u.push(i(u)+"scale("+n+","+o+")")}(u.scaleX,u.scaleY,s.scaleX,s.scaleY,c,a),u=s=null,function(e){for(var t,n=-1,r=a.length;++n<r;)c[(t=a[n]).i]=t.x(e);return c.join("")}}}var u=i(o.parseCss,"px, ","px)","deg)"),s=i(o.parseSvg,", ",")",")")},"./node_modules/d3-interpolate/src/transform/parse.js":function(e,t,n){"use strict";n.r(t),n.d(t,"parseCss",(function(){return c})),n.d(t,"parseSvg",(function(){return a}));var r,o,i,u,s=n("./node_modules/d3-interpolate/src/transform/decompose.js");function c(e){return"none"===e?s.identity:(r||(r=document.createElement("DIV"),o=document.documentElement,i=document.defaultView),r.style.transform=e,e=i.getComputedStyle(o.appendChild(r),null).getPropertyValue("transform"),o.removeChild(r),e=e.slice(7,-1).split(","),Object(s.default)(+e[0],+e[1],+e[2],+e[3],+e[4],+e[5]))}function a(e){return null==e?s.identity:(u||(u=document.createElementNS("http://www.w3.org/2000/svg","g")),u.setAttribute("transform",e),(e=u.transform.baseVal.consolidate())?(e=e.matrix,Object(s.default)(e.a,e.b,e.c,e.d,e.e,e.f)):s.identity)}},"./node_modules/d3-interpolate/src/value.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-color/src/index.js"),o=n("./node_modules/d3-interpolate/src/rgb.js"),i=n("./node_modules/d3-interpolate/src/array.js"),u=n("./node_modules/d3-interpolate/src/date.js"),s=n("./node_modules/d3-interpolate/src/number.js"),c=n("./node_modules/d3-interpolate/src/object.js"),a=n("./node_modules/d3-interpolate/src/string.js"),d=n("./node_modules/d3-interpolate/src/constant.js"),l=n("./node_modules/d3-interpolate/src/numberArray.js");t.default=function(e,t){var n,f=typeof t;return null==t||"boolean"===f?Object(d.default)(t):("number"===f?s.default:"string"===f?(n=Object(r.color)(t))?(t=n,o.default):a.default:t instanceof r.color?o.default:t instanceof Date?u.default:Object(l.isNumberArray)(t)?l.default:Array.isArray(t)?i.genericArray:"function"!=typeof t.valueOf&&"function"!=typeof t.toString||isNaN(t)?c.default:s.default)(e,t)}},"./node_modules/d3-interpolate/src/zoom.js":function(e,t,n){"use strict";n.r(t);var r=Math.SQRT2;function o(e){return((e=Math.exp(e))+1/e)/2}t.default=function(e,t){var n,i,u=e[0],s=e[1],c=e[2],a=t[0],d=t[1],l=t[2],f=a-u,h=d-s,p=f*f+h*h;if(p<1e-12)i=Math.log(l/c)/r,n=function(e){return[u+e*f,s+e*h,c*Math.exp(r*e*i)]};else{var m=Math.sqrt(p),_=(l*l-c*c+4*p)/(2*c*2*m),v=(l*l-c*c-4*p)/(2*l*2*m),g=Math.log(Math.sqrt(_*_+1)-_),b=Math.log(Math.sqrt(v*v+1)-v);i=(b-g)/r,n=function(e){var t,n=e*i,a=o(g),d=c/(2*m)*(a*(t=r*n+g,((t=Math.exp(2*t))-1)/(t+1))-function(e){return((e=Math.exp(e))-1/e)/2}(g));return[u+d*f,s+d*h,c*a/o(r*n+g)]}}return n.duration=1e3*i,n}},"./node_modules/d3-path/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-path/src/path.js");n.d(t,"path",(function(){return r.default}))},"./node_modules/d3-path/src/path.js":function(e,t,n){"use strict";n.r(t);var r=Math.PI,o=2*r,i=o-1e-6;function u(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function s(){return new u}u.prototype=s.prototype={constructor:u,moveTo:function(e,t){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(e,t){this._+="L"+(this._x1=+e)+","+(this._y1=+t)},quadraticCurveTo:function(e,t,n,r){this._+="Q"+ +e+","+ +t+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(e,t,n,r,o,i){this._+="C"+ +e+","+ +t+","+ +n+","+ +r+","+(this._x1=+o)+","+(this._y1=+i)},arcTo:function(e,t,n,o,i){e=+e,t=+t,n=+n,o=+o,i=+i;var u=this._x1,s=this._y1,c=n-e,a=o-t,d=u-e,l=s-t,f=d*d+l*l;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=e)+","+(this._y1=t);else if(f>1e-6)if(Math.abs(l*c-a*d)>1e-6&&i){var h=n-u,p=o-s,m=c*c+a*a,_=h*h+p*p,v=Math.sqrt(m),g=Math.sqrt(f),b=i*Math.tan((r-Math.acos((m+f-_)/(2*v*g)))/2),j=b/g,y=b/v;Math.abs(j-1)>1e-6&&(this._+="L"+(e+j*d)+","+(t+j*l)),this._+="A"+i+","+i+",0,0,"+ +(l*h>d*p)+","+(this._x1=e+y*c)+","+(this._y1=t+y*a)}else this._+="L"+(this._x1=e)+","+(this._y1=t);else;},arc:function(e,t,n,u,s,c){e=+e,t=+t,c=!!c;var a=(n=+n)*Math.cos(u),d=n*Math.sin(u),l=e+a,f=t+d,h=1^c,p=c?u-s:s-u;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+l+","+f:(Math.abs(this._x1-l)>1e-6||Math.abs(this._y1-f)>1e-6)&&(this._+="L"+l+","+f),n&&(p<0&&(p=p%o+o),p>i?this._+="A"+n+","+n+",0,1,"+h+","+(e-a)+","+(t-d)+"A"+n+","+n+",0,1,"+h+","+(this._x1=l)+","+(this._y1=f):p>1e-6&&(this._+="A"+n+","+n+",0,"+ +(p>=r)+","+h+","+(this._x1=e+n*Math.cos(s))+","+(this._y1=t+n*Math.sin(s))))},rect:function(e,t,n,r){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}},t.default=s},"./node_modules/d3-polygon/src/area.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){for(var t,n=-1,r=e.length,o=e[r-1],i=0;++n<r;)t=o,o=e[n],i+=t[1]*o[0]-t[0]*o[1];return i/2}},"./node_modules/d3-polygon/src/centroid.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){for(var t,n,r=-1,o=e.length,i=0,u=0,s=e[o-1],c=0;++r<o;)t=s,s=e[r],c+=n=t[0]*s[1]-s[0]*t[1],i+=(t[0]+s[0])*n,u+=(t[1]+s[1])*n;return[i/(c*=3),u/c]}},"./node_modules/d3-polygon/src/contains.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){for(var n,r,o=e.length,i=e[o-1],u=t[0],s=t[1],c=i[0],a=i[1],d=!1,l=0;l<o;++l)n=(i=e[l])[0],(r=i[1])>s!=a>s&&u<(c-n)*(s-r)/(a-r)+n&&(d=!d),c=n,a=r;return d}},"./node_modules/d3-polygon/src/cross.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t,n){return(t[0]-e[0])*(n[1]-e[1])-(t[1]-e[1])*(n[0]-e[0])}},"./node_modules/d3-polygon/src/hull.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-polygon/src/cross.js");function o(e,t){return e[0]-t[0]||e[1]-t[1]}function i(e){for(var t=e.length,n=[0,1],o=2,i=2;i<t;++i){for(;o>1&&Object(r.default)(e[n[o-2]],e[n[o-1]],e[i])<=0;)--o;n[o++]=i}return n.slice(0,o)}t.default=function(e){if((n=e.length)<3)return null;var t,n,r=new Array(n),u=new Array(n);for(t=0;t<n;++t)r[t]=[+e[t][0],+e[t][1],t];for(r.sort(o),t=0;t<n;++t)u[t]=[r[t][0],-r[t][1]];var s=i(r),c=i(u),a=c[0]===s[0],d=c[c.length-1]===s[s.length-1],l=[];for(t=s.length-1;t>=0;--t)l.push(e[r[s[t]][2]]);for(t=+a;t<c.length-d;++t)l.push(e[r[c[t]][2]]);return l}},"./node_modules/d3-polygon/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-polygon/src/area.js");n.d(t,"polygonArea",(function(){return r.default}));var o=n("./node_modules/d3-polygon/src/centroid.js");n.d(t,"polygonCentroid",(function(){return o.default}));var i=n("./node_modules/d3-polygon/src/hull.js");n.d(t,"polygonHull",(function(){return i.default}));var u=n("./node_modules/d3-polygon/src/contains.js");n.d(t,"polygonContains",(function(){return u.default}));var s=n("./node_modules/d3-polygon/src/length.js");n.d(t,"polygonLength",(function(){return s.default}))},"./node_modules/d3-polygon/src/length.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){for(var t,n,r=-1,o=e.length,i=e[o-1],u=i[0],s=i[1],c=0;++r<o;)t=u,n=s,t-=u=(i=e[r])[0],n-=s=i[1],c+=Math.sqrt(t*t+n*n);return c}},"./node_modules/d3-quadtree/src/add.js":function(e,t,n){"use strict";function r(e,t,n,r){if(isNaN(t)||isNaN(n))return e;var o,i,u,s,c,a,d,l,f,h=e._root,p={data:r},m=e._x0,_=e._y0,v=e._x1,g=e._y1;if(!h)return e._root=p,e;for(;h.length;)if((a=t>=(i=(m+v)/2))?m=i:v=i,(d=n>=(u=(_+g)/2))?_=u:g=u,o=h,!(h=h[l=d<<1|a]))return o[l]=p,e;if(s=+e._x.call(null,h.data),c=+e._y.call(null,h.data),t===s&&n===c)return p.next=h,o?o[l]=p:e._root=p,e;do{o=o?o[l]=new Array(4):e._root=new Array(4),(a=t>=(i=(m+v)/2))?m=i:v=i,(d=n>=(u=(_+g)/2))?_=u:g=u}while((l=d<<1|a)==(f=(c>=u)<<1|s>=i));return o[f]=h,o[l]=p,e}function o(e){var t,n,o,i,u=e.length,s=new Array(u),c=new Array(u),a=1/0,d=1/0,l=-1/0,f=-1/0;for(n=0;n<u;++n)isNaN(o=+this._x.call(null,t=e[n]))||isNaN(i=+this._y.call(null,t))||(s[n]=o,c[n]=i,o<a&&(a=o),o>l&&(l=o),i<d&&(d=i),i>f&&(f=i));if(a>l||d>f)return this;for(this.cover(a,d).cover(l,f),n=0;n<u;++n)r(this,s[n],c[n],e[n]);return this}n.r(t),n.d(t,"addAll",(function(){return o})),t.default=function(e){var t=+this._x.call(null,e),n=+this._y.call(null,e);return r(this.cover(t,n),t,n,e)}},"./node_modules/d3-quadtree/src/cover.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){if(isNaN(e=+e)||isNaN(t=+t))return this;var n=this._x0,r=this._y0,o=this._x1,i=this._y1;if(isNaN(n))o=(n=Math.floor(e))+1,i=(r=Math.floor(t))+1;else{for(var u,s,c=o-n,a=this._root;n>e||e>=o||r>t||t>=i;)switch(s=(t<r)<<1|e<n,(u=new Array(4))[s]=a,a=u,c*=2,s){case 0:o=n+c,i=r+c;break;case 1:n=o-c,i=r+c;break;case 2:o=n+c,r=i-c;break;case 3:n=o-c,r=i-c}this._root&&this._root.length&&(this._root=a)}return this._x0=n,this._y0=r,this._x1=o,this._y1=i,this}},"./node_modules/d3-quadtree/src/data.js":function(e,t,n){"use strict";n.r(t),t.default=function(){var e=[];return this.visit((function(t){if(!t.length)do{e.push(t.data)}while(t=t.next)})),e}},"./node_modules/d3-quadtree/src/extent.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return arguments.length?this.cover(+e[0][0],+e[0][1]).cover(+e[1][0],+e[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]}},"./node_modules/d3-quadtree/src/find.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-quadtree/src/quad.js");t.default=function(e,t,n){var o,i,u,s,c,a,d,l=this._x0,f=this._y0,h=this._x1,p=this._y1,m=[],_=this._root;for(_&&m.push(new r.default(_,l,f,h,p)),null==n?n=1/0:(l=e-n,f=t-n,h=e+n,p=t+n,n*=n);a=m.pop();)if(!(!(_=a.node)||(i=a.x0)>h||(u=a.y0)>p||(s=a.x1)<l||(c=a.y1)<f))if(_.length){var v=(i+s)/2,g=(u+c)/2;m.push(new r.default(_[3],v,g,s,c),new r.default(_[2],i,g,v,c),new r.default(_[1],v,u,s,g),new r.default(_[0],i,u,v,g)),(d=(t>=g)<<1|e>=v)&&(a=m[m.length-1],m[m.length-1]=m[m.length-1-d],m[m.length-1-d]=a)}else{var b=e-+this._x.call(null,_.data),j=t-+this._y.call(null,_.data),y=b*b+j*j;if(y<n){var x=Math.sqrt(n=y);l=e-x,f=t-x,h=e+x,p=t+x,o=_.data}}return o}},"./node_modules/d3-quadtree/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-quadtree/src/quadtree.js");n.d(t,"quadtree",(function(){return r.default}))},"./node_modules/d3-quadtree/src/quad.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t,n,r,o){this.node=e,this.x0=t,this.y0=n,this.x1=r,this.y1=o}},"./node_modules/d3-quadtree/src/quadtree.js":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return m}));var r=n("./node_modules/d3-quadtree/src/add.js"),o=n("./node_modules/d3-quadtree/src/cover.js"),i=n("./node_modules/d3-quadtree/src/data.js"),u=n("./node_modules/d3-quadtree/src/extent.js"),s=n("./node_modules/d3-quadtree/src/find.js"),c=n("./node_modules/d3-quadtree/src/remove.js"),a=n("./node_modules/d3-quadtree/src/root.js"),d=n("./node_modules/d3-quadtree/src/size.js"),l=n("./node_modules/d3-quadtree/src/visit.js"),f=n("./node_modules/d3-quadtree/src/visitAfter.js"),h=n("./node_modules/d3-quadtree/src/x.js"),p=n("./node_modules/d3-quadtree/src/y.js");function m(e,t,n){var r=new _(null==t?h.defaultX:t,null==n?p.defaultY:n,NaN,NaN,NaN,NaN);return null==e?r:r.addAll(e)}function _(e,t,n,r,o,i){this._x=e,this._y=t,this._x0=n,this._y0=r,this._x1=o,this._y1=i,this._root=void 0}function v(e){for(var t={data:e.data},n=t;e=e.next;)n=n.next={data:e.data};return t}var g=m.prototype=_.prototype;g.copy=function(){var e,t,n=new _(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=v(r),n;for(e=[{source:r,target:n._root=new Array(4)}];r=e.pop();)for(var o=0;o<4;++o)(t=r.source[o])&&(t.length?e.push({source:t,target:r.target[o]=new Array(4)}):r.target[o]=v(t));return n},g.add=r.default,g.addAll=r.addAll,g.cover=o.default,g.data=i.default,g.extent=u.default,g.find=s.default,g.remove=c.default,g.removeAll=c.removeAll,g.root=a.default,g.size=d.default,g.visit=l.default,g.visitAfter=f.default,g.x=h.default,g.y=p.default},"./node_modules/d3-quadtree/src/remove.js":function(e,t,n){"use strict";function r(e){for(var t=0,n=e.length;t<n;++t)this.remove(e[t]);return this}n.r(t),n.d(t,"removeAll",(function(){return r})),t.default=function(e){if(isNaN(i=+this._x.call(null,e))||isNaN(u=+this._y.call(null,e)))return this;var t,n,r,o,i,u,s,c,a,d,l,f,h=this._root,p=this._x0,m=this._y0,_=this._x1,v=this._y1;if(!h)return this;if(h.length)for(;;){if((a=i>=(s=(p+_)/2))?p=s:_=s,(d=u>=(c=(m+v)/2))?m=c:v=c,t=h,!(h=h[l=d<<1|a]))return this;if(!h.length)break;(t[l+1&3]||t[l+2&3]||t[l+3&3])&&(n=t,f=l)}for(;h.data!==e;)if(r=h,!(h=h.next))return this;return(o=h.next)&&delete h.next,r?(o?r.next=o:delete r.next,this):t?(o?t[l]=o:delete t[l],(h=t[0]||t[1]||t[2]||t[3])&&h===(t[3]||t[2]||t[1]||t[0])&&!h.length&&(n?n[f]=h:this._root=h),this):(this._root=o,this)}},"./node_modules/d3-quadtree/src/root.js":function(e,t,n){"use strict";n.r(t),t.default=function(){return this._root}},"./node_modules/d3-quadtree/src/size.js":function(e,t,n){"use strict";n.r(t),t.default=function(){var e=0;return this.visit((function(t){if(!t.length)do{++e}while(t=t.next)})),e}},"./node_modules/d3-quadtree/src/visit.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-quadtree/src/quad.js");t.default=function(e){var t,n,o,i,u,s,c=[],a=this._root;for(a&&c.push(new r.default(a,this._x0,this._y0,this._x1,this._y1));t=c.pop();)if(!e(a=t.node,o=t.x0,i=t.y0,u=t.x1,s=t.y1)&&a.length){var d=(o+u)/2,l=(i+s)/2;(n=a[3])&&c.push(new r.default(n,d,l,u,s)),(n=a[2])&&c.push(new r.default(n,o,l,d,s)),(n=a[1])&&c.push(new r.default(n,d,i,u,l)),(n=a[0])&&c.push(new r.default(n,o,i,d,l))}return this}},"./node_modules/d3-quadtree/src/visitAfter.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-quadtree/src/quad.js");t.default=function(e){var t,n=[],o=[];for(this._root&&n.push(new r.default(this._root,this._x0,this._y0,this._x1,this._y1));t=n.pop();){var i=t.node;if(i.length){var u,s=t.x0,c=t.y0,a=t.x1,d=t.y1,l=(s+a)/2,f=(c+d)/2;(u=i[0])&&n.push(new r.default(u,s,c,l,f)),(u=i[1])&&n.push(new r.default(u,l,c,a,f)),(u=i[2])&&n.push(new r.default(u,s,f,l,d)),(u=i[3])&&n.push(new r.default(u,l,f,a,d))}o.push(t)}for(;t=o.pop();)e(t.node,t.x0,t.y0,t.x1,t.y1);return this}},"./node_modules/d3-quadtree/src/x.js":function(e,t,n){"use strict";function r(e){return e[0]}n.r(t),n.d(t,"defaultX",(function(){return r})),t.default=function(e){return arguments.length?(this._x=e,this):this._x}},"./node_modules/d3-quadtree/src/y.js":function(e,t,n){"use strict";function r(e){return e[1]}n.r(t),n.d(t,"defaultY",(function(){return r})),t.default=function(e){return arguments.length?(this._y=e,this):this._y}},"./node_modules/d3-random/src/bates.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-random/src/defaultSource.js"),o=n("./node_modules/d3-random/src/irwinHall.js");t.default=function e(t){function n(e){var n=o.default.source(t)(e);return function(){return n()/e}}return n.source=e,n}(r.default)},"./node_modules/d3-random/src/defaultSource.js":function(e,t,n){"use strict";n.r(t),t.default=function(){return Math.random()}},"./node_modules/d3-random/src/exponential.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-random/src/defaultSource.js");t.default=function e(t){function n(e){return function(){return-Math.log(1-t())/e}}return n.source=e,n}(r.default)},"./node_modules/d3-random/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-random/src/uniform.js");n.d(t,"randomUniform",(function(){return r.default}));var o=n("./node_modules/d3-random/src/normal.js");n.d(t,"randomNormal",(function(){return o.default}));var i=n("./node_modules/d3-random/src/logNormal.js");n.d(t,"randomLogNormal",(function(){return i.default}));var u=n("./node_modules/d3-random/src/bates.js");n.d(t,"randomBates",(function(){return u.default}));var s=n("./node_modules/d3-random/src/irwinHall.js");n.d(t,"randomIrwinHall",(function(){return s.default}));var c=n("./node_modules/d3-random/src/exponential.js");n.d(t,"randomExponential",(function(){return c.default}))},"./node_modules/d3-random/src/irwinHall.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-random/src/defaultSource.js");t.default=function e(t){function n(e){return function(){for(var n=0,r=0;r<e;++r)n+=t();return n}}return n.source=e,n}(r.default)},"./node_modules/d3-random/src/logNormal.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-random/src/defaultSource.js"),o=n("./node_modules/d3-random/src/normal.js");t.default=function e(t){function n(){var e=o.default.source(t).apply(this,arguments);return function(){return Math.exp(e())}}return n.source=e,n}(r.default)},"./node_modules/d3-random/src/normal.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-random/src/defaultSource.js");t.default=function e(t){function n(e,n){var r,o;return e=null==e?0:+e,n=null==n?1:+n,function(){var i;if(null!=r)i=r,r=null;else do{r=2*t()-1,i=2*t()-1,o=r*r+i*i}while(!o||o>1);return e+n*i*Math.sqrt(-2*Math.log(o)/o)}}return n.source=e,n}(r.default)},"./node_modules/d3-random/src/uniform.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-random/src/defaultSource.js");t.default=function e(t){function n(e,n){return e=null==e?0:+e,n=null==n?1:+n,1===arguments.length?(n=e,e=0):n-=e,function(){return t()*n+e}}return n.source=e,n}(r.default)},"./node_modules/d3-scale-chromatic/src/categorical/Accent.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-scale-chromatic/src/colors.js");t.default=Object(r.default)("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666")},"./node_modules/d3-scale-chromatic/src/categorical/Dark2.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-scale-chromatic/src/colors.js");t.default=Object(r.default)("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666")},"./node_modules/d3-scale-chromatic/src/categorical/Paired.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-scale-chromatic/src/colors.js");t.default=Object(r.default)("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928")},"./node_modules/d3-scale-chromatic/src/categorical/Pastel1.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-scale-chromatic/src/colors.js");t.default=Object(r.default)("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2")},"./node_modules/d3-scale-chromatic/src/categorical/Pastel2.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-scale-chromatic/src/colors.js");t.default=Object(r.default)("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc")},"./node_modules/d3-scale-chromatic/src/categorical/Set1.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-scale-chromatic/src/colors.js");t.default=Object(r.default)("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999")},"./node_modules/d3-scale-chromatic/src/categorical/Set2.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-scale-chromatic/src/colors.js");t.default=Object(r.default)("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3")},"./node_modules/d3-scale-chromatic/src/categorical/Set3.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-scale-chromatic/src/colors.js");t.default=Object(r.default)("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f")},"./node_modules/d3-scale-chromatic/src/categorical/Tableau10.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-scale-chromatic/src/colors.js");t.default=Object(r.default)("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab")},"./node_modules/d3-scale-chromatic/src/categorical/category10.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-scale-chromatic/src/colors.js");t.default=Object(r.default)("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf")},"./node_modules/d3-scale-chromatic/src/colors.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){for(var t=e.length/6|0,n=new Array(t),r=0;r<t;)n[r]="#"+e.slice(6*r,6*++r);return n}},"./node_modules/d3-scale-chromatic/src/diverging/BrBG.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale-chromatic/src/diverging/PRGn.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale-chromatic/src/diverging/PiYG.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale-chromatic/src/diverging/PuOr.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale-chromatic/src/diverging/RdBu.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale-chromatic/src/diverging/RdGy.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale-chromatic/src/diverging/Spectral.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale-chromatic/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-scale-chromatic/src/categorical/category10.js");n.d(t,"schemeCategory10",(function(){return r.default}));var o=n("./node_modules/d3-scale-chromatic/src/categorical/Accent.js");n.d(t,"schemeAccent",(function(){return o.default}));var i=n("./node_modules/d3-scale-chromatic/src/categorical/Dark2.js");n.d(t,"schemeDark2",(function(){return i.default}));var u=n("./node_modules/d3-scale-chromatic/src/categorical/Paired.js");n.d(t,"schemePaired",(function(){return u.default}));var s=n("./node_modules/d3-scale-chromatic/src/categorical/Pastel1.js");n.d(t,"schemePastel1",(function(){return s.default}));var c=n("./node_modules/d3-scale-chromatic/src/categorical/Pastel2.js");n.d(t,"schemePastel2",(function(){return c.default}));var a=n("./node_modules/d3-scale-chromatic/src/categorical/Set1.js");n.d(t,"schemeSet1",(function(){return a.default}));var d=n("./node_modules/d3-scale-chromatic/src/categorical/Set2.js");n.d(t,"schemeSet2",(function(){return d.default}));var l=n("./node_modules/d3-scale-chromatic/src/categorical/Set3.js");n.d(t,"schemeSet3",(function(){return l.default}));var f=n("./node_modules/d3-scale-chromatic/src/categorical/Tableau10.js");n.d(t,"schemeTableau10",(function(){return f.default}));var h=n("./node_modules/d3-scale-chromatic/src/diverging/BrBG.js");n.d(t,"interpolateBrBG",(function(){return h.default})),n.d(t,"schemeBrBG",(function(){return h.scheme}));var p=n("./node_modules/d3-scale-chromatic/src/diverging/PRGn.js");n.d(t,"interpolatePRGn",(function(){return p.default})),n.d(t,"schemePRGn",(function(){return p.scheme}));var m=n("./node_modules/d3-scale-chromatic/src/diverging/PiYG.js");n.d(t,"interpolatePiYG",(function(){return m.default})),n.d(t,"schemePiYG",(function(){return m.scheme}));var _=n("./node_modules/d3-scale-chromatic/src/diverging/PuOr.js");n.d(t,"interpolatePuOr",(function(){return _.default})),n.d(t,"schemePuOr",(function(){return _.scheme}));var v=n("./node_modules/d3-scale-chromatic/src/diverging/RdBu.js");n.d(t,"interpolateRdBu",(function(){return v.default})),n.d(t,"schemeRdBu",(function(){return v.scheme}));var g=n("./node_modules/d3-scale-chromatic/src/diverging/RdGy.js");n.d(t,"interpolateRdGy",(function(){return g.default})),n.d(t,"schemeRdGy",(function(){return g.scheme}));var b=n("./node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js");n.d(t,"interpolateRdYlBu",(function(){return b.default})),n.d(t,"schemeRdYlBu",(function(){return b.scheme}));var j=n("./node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js");n.d(t,"interpolateRdYlGn",(function(){return j.default})),n.d(t,"schemeRdYlGn",(function(){return j.scheme}));var y=n("./node_modules/d3-scale-chromatic/src/diverging/Spectral.js");n.d(t,"interpolateSpectral",(function(){return y.default})),n.d(t,"schemeSpectral",(function(){return y.scheme}));var x=n("./node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js");n.d(t,"interpolateBuGn",(function(){return x.default})),n.d(t,"schemeBuGn",(function(){return x.scheme}));var w=n("./node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js");n.d(t,"interpolateBuPu",(function(){return w.default})),n.d(t,"schemeBuPu",(function(){return w.scheme}));var O=n("./node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js");n.d(t,"interpolateGnBu",(function(){return O.default})),n.d(t,"schemeGnBu",(function(){return O.scheme}));var M=n("./node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js");n.d(t,"interpolateOrRd",(function(){return M.default})),n.d(t,"schemeOrRd",(function(){return M.scheme}));var S=n("./node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js");n.d(t,"interpolatePuBuGn",(function(){return S.default})),n.d(t,"schemePuBuGn",(function(){return S.scheme}));var A=n("./node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js");n.d(t,"interpolatePuBu",(function(){return A.default})),n.d(t,"schemePuBu",(function(){return A.scheme}));var P=n("./node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js");n.d(t,"interpolatePuRd",(function(){return P.default})),n.d(t,"schemePuRd",(function(){return P.scheme}));var k=n("./node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js");n.d(t,"interpolateRdPu",(function(){return k.default})),n.d(t,"schemeRdPu",(function(){return k.scheme}));var C=n("./node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js");n.d(t,"interpolateYlGnBu",(function(){return C.default})),n.d(t,"schemeYlGnBu",(function(){return C.scheme}));var T=n("./node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js");n.d(t,"interpolateYlGn",(function(){return T.default})),n.d(t,"schemeYlGn",(function(){return T.scheme}));var E=n("./node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js");n.d(t,"interpolateYlOrBr",(function(){return E.default})),n.d(t,"schemeYlOrBr",(function(){return E.scheme}));var R=n("./node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js");n.d(t,"interpolateYlOrRd",(function(){return R.default})),n.d(t,"schemeYlOrRd",(function(){return R.scheme}));var N=n("./node_modules/d3-scale-chromatic/src/sequential-single/Blues.js");n.d(t,"interpolateBlues",(function(){return N.default})),n.d(t,"schemeBlues",(function(){return N.scheme}));var q=n("./node_modules/d3-scale-chromatic/src/sequential-single/Greens.js");n.d(t,"interpolateGreens",(function(){return q.default})),n.d(t,"schemeGreens",(function(){return q.scheme}));var B=n("./node_modules/d3-scale-chromatic/src/sequential-single/Greys.js");n.d(t,"interpolateGreys",(function(){return B.default})),n.d(t,"schemeGreys",(function(){return B.scheme}));var I=n("./node_modules/d3-scale-chromatic/src/sequential-single/Purples.js");n.d(t,"interpolatePurples",(function(){return I.default})),n.d(t,"schemePurples",(function(){return I.scheme}));var D=n("./node_modules/d3-scale-chromatic/src/sequential-single/Reds.js");n.d(t,"interpolateReds",(function(){return D.default})),n.d(t,"schemeReds",(function(){return D.scheme}));var L=n("./node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js");n.d(t,"interpolateOranges",(function(){return L.default})),n.d(t,"schemeOranges",(function(){return L.scheme}));var z=n("./node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js");n.d(t,"interpolateCividis",(function(){return z.default}));var F=n("./node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js");n.d(t,"interpolateCubehelixDefault",(function(){return F.default}));var U=n("./node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js");n.d(t,"interpolateRainbow",(function(){return U.default})),n.d(t,"interpolateWarm",(function(){return U.warm})),n.d(t,"interpolateCool",(function(){return U.cool}));var Y=n("./node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js");n.d(t,"interpolateSinebow",(function(){return Y.default}));var H=n("./node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js");n.d(t,"interpolateTurbo",(function(){return H.default}));var G=n("./node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js");n.d(t,"interpolateViridis",(function(){return G.default})),n.d(t,"interpolateMagma",(function(){return G.magma})),n.d(t,"interpolateInferno",(function(){return G.inferno})),n.d(t,"interpolatePlasma",(function(){return G.plasma}))},"./node_modules/d3-scale-chromatic/src/ramp.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-interpolate/src/index.js");t.default=function(e){return Object(r.interpolateRgbBasis)(e[e.length-1])}},"./node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return e=Math.max(0,Math.min(1,e)),"rgb("+Math.max(0,Math.min(255,Math.round(-4.54-e*(35.34-e*(2381.73-e*(6402.7-e*(7024.72-2710.57*e)))))))+", "+Math.max(0,Math.min(255,Math.round(32.49+e*(170.73+e*(52.82-e*(131.46-e*(176.58-67.37*e)))))))+", "+Math.max(0,Math.min(255,Math.round(81.24+e*(442.36-e*(2482.43-e*(6167.24-e*(6614.94-2475.67*e)))))))+")"}},"./node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-color/src/index.js"),o=n("./node_modules/d3-interpolate/src/index.js");t.default=Object(o.interpolateCubehelixLong)(Object(r.cubehelix)(300,.5,0),Object(r.cubehelix)(-240,.5,1))},"./node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js":function(e,t,n){"use strict";n.r(t),n.d(t,"warm",(function(){return i})),n.d(t,"cool",(function(){return u}));var r=n("./node_modules/d3-color/src/index.js"),o=n("./node_modules/d3-interpolate/src/index.js"),i=Object(o.interpolateCubehelixLong)(Object(r.cubehelix)(-100,.75,.35),Object(r.cubehelix)(80,1.5,.8)),u=Object(o.interpolateCubehelixLong)(Object(r.cubehelix)(260,.75,.35),Object(r.cubehelix)(80,1.5,.8)),s=Object(r.cubehelix)();t.default=function(e){(e<0||e>1)&&(e-=Math.floor(e));var t=Math.abs(e-.5);return s.h=360*e-100,s.s=1.5-1.5*t,s.l=.8-.9*t,s+""}},"./node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-color/src/index.js"),o=Object(r.rgb)(),i=Math.PI/3,u=2*Math.PI/3;t.default=function(e){var t;return e=(.5-e)*Math.PI,o.r=255*(t=Math.sin(e))*t,o.g=255*(t=Math.sin(e+i))*t,o.b=255*(t=Math.sin(e+u))*t,o+""}},"./node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return e=Math.max(0,Math.min(1,e)),"rgb("+Math.max(0,Math.min(255,Math.round(34.61+e*(1172.33-e*(10793.56-e*(33300.12-e*(38394.49-14825.05*e)))))))+", "+Math.max(0,Math.min(255,Math.round(23.31+e*(557.33+e*(1225.33-e*(3574.96-e*(1073.77+707.56*e)))))))+", "+Math.max(0,Math.min(255,Math.round(27.2+e*(3211.1-e*(15327.97-e*(27814-e*(22569.18-6838.66*e)))))))+")"}},"./node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js":function(e,t,n){"use strict";n.r(t),n.d(t,"magma",(function(){return i})),n.d(t,"inferno",(function(){return u})),n.d(t,"plasma",(function(){return s}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js");function o(e){var t=e.length;return function(n){return e[Math.max(0,Math.min(t-1,Math.floor(n*t)))]}}t.default=o(Object(r.default)("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));var i=o(Object(r.default)("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),u=o(Object(r.default)("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),s=o(Object(r.default)("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"))},"./node_modules/d3-scale-chromatic/src/sequential-single/Blues.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale-chromatic/src/sequential-single/Greens.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale-chromatic/src/sequential-single/Greys.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale-chromatic/src/sequential-single/Purples.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale-chromatic/src/sequential-single/Reds.js":function(e,t,n){"use strict";n.r(t),n.d(t,"scheme",(function(){return i}));var r=n("./node_modules/d3-scale-chromatic/src/colors.js"),o=n("./node_modules/d3-scale-chromatic/src/ramp.js"),i=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(r.default);t.default=Object(o.default)(i)},"./node_modules/d3-scale/src/array.js":function(e,t,n){"use strict";n.r(t),n.d(t,"map",(function(){return o})),n.d(t,"slice",(function(){return i}));var r=Array.prototype,o=r.map,i=r.slice},"./node_modules/d3-scale/src/band.js":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return u})),n.d(t,"point",(function(){return c}));var r=n("./node_modules/d3-array/src/index.js"),o=n("./node_modules/d3-scale/src/init.js"),i=n("./node_modules/d3-scale/src/ordinal.js");function u(){var e,t,n=Object(i.default)().unknown(void 0),s=n.domain,c=n.range,a=[0,1],d=!1,l=0,f=0,h=.5;function p(){var n=s().length,o=a[1]<a[0],i=a[o-0],u=a[1-o];e=(u-i)/Math.max(1,n-l+2*f),d&&(e=Math.floor(e)),i+=(u-i-e*(n-l))*h,t=e*(1-l),d&&(i=Math.round(i),t=Math.round(t));var p=Object(r.range)(n).map((function(t){return i+e*t}));return c(o?p.reverse():p)}return delete n.unknown,n.domain=function(e){return arguments.length?(s(e),p()):s()},n.range=function(e){return arguments.length?(a=[+e[0],+e[1]],p()):a.slice()},n.rangeRound=function(e){return a=[+e[0],+e[1]],d=!0,p()},n.bandwidth=function(){return t},n.step=function(){return e},n.round=function(e){return arguments.length?(d=!!e,p()):d},n.padding=function(e){return arguments.length?(l=Math.min(1,f=+e),p()):l},n.paddingInner=function(e){return arguments.length?(l=Math.min(1,e),p()):l},n.paddingOuter=function(e){return arguments.length?(f=+e,p()):f},n.align=function(e){return arguments.length?(h=Math.max(0,Math.min(1,e)),p()):h},n.copy=function(){return u(s(),a).round(d).paddingInner(l).paddingOuter(f).align(h)},o.initRange.apply(p(),arguments)}function s(e){var t=e.copy;return e.padding=e.paddingOuter,delete e.paddingInner,delete e.paddingOuter,e.copy=function(){return s(t())},e}function c(){return s(u.apply(null,arguments).paddingInner(1))}},"./node_modules/d3-scale/src/constant.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return e}}},"./node_modules/d3-scale/src/continuous.js":function(e,t,n){"use strict";n.r(t),n.d(t,"identity",(function(){return a})),n.d(t,"copy",(function(){return p})),n.d(t,"transformer",(function(){return m})),n.d(t,"default",(function(){return _}));var r=n("./node_modules/d3-array/src/index.js"),o=n("./node_modules/d3-interpolate/src/index.js"),i=n("./node_modules/d3-scale/src/array.js"),u=n("./node_modules/d3-scale/src/constant.js"),s=n("./node_modules/d3-scale/src/number.js"),c=[0,1];function a(e){return e}function d(e,t){return(t-=e=+e)?function(n){return(n-e)/t}:Object(u.default)(isNaN(t)?NaN:.5)}function l(e){var t,n=e[0],r=e[e.length-1];return n>r&&(t=n,n=r,r=t),function(e){return Math.max(n,Math.min(r,e))}}function f(e,t,n){var r=e[0],o=e[1],i=t[0],u=t[1];return o<r?(r=d(o,r),i=n(u,i)):(r=d(r,o),i=n(i,u)),function(e){return i(r(e))}}function h(e,t,n){var o=Math.min(e.length,t.length)-1,i=new Array(o),u=new Array(o),s=-1;for(e[o]<e[0]&&(e=e.slice().reverse(),t=t.slice().reverse());++s<o;)i[s]=d(e[s],e[s+1]),u[s]=n(t[s],t[s+1]);return function(t){var n=Object(r.bisect)(e,t,1,o)-1;return u[n](i[n](t))}}function p(e,t){return t.domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp()).unknown(e.unknown())}function m(){var e,t,n,r,u,d,p=c,m=c,_=o.interpolate,v=a;function g(){return r=Math.min(p.length,m.length)>2?h:f,u=d=null,b}function b(t){return isNaN(t=+t)?n:(u||(u=r(p.map(e),m,_)))(e(v(t)))}return b.invert=function(n){return v(t((d||(d=r(m,p.map(e),o.interpolateNumber)))(n)))},b.domain=function(e){return arguments.length?(p=i.map.call(e,s.default),v===a||(v=l(p)),g()):p.slice()},b.range=function(e){return arguments.length?(m=i.slice.call(e),g()):m.slice()},b.rangeRound=function(e){return m=i.slice.call(e),_=o.interpolateRound,g()},b.clamp=function(e){return arguments.length?(v=e?l(p):a,b):v!==a},b.interpolate=function(e){return arguments.length?(_=e,g()):_},b.unknown=function(e){return arguments.length?(n=e,b):n},function(n,r){return e=n,t=r,g()}}function _(e,t){return m()(e,t)}},"./node_modules/d3-scale/src/diverging.js":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return l})),n.d(t,"divergingLog",(function(){return f})),n.d(t,"divergingSymlog",(function(){return h})),n.d(t,"divergingPow",(function(){return p})),n.d(t,"divergingSqrt",(function(){return m}));var r=n("./node_modules/d3-scale/src/continuous.js"),o=n("./node_modules/d3-scale/src/init.js"),i=n("./node_modules/d3-scale/src/linear.js"),u=n("./node_modules/d3-scale/src/log.js"),s=n("./node_modules/d3-scale/src/sequential.js"),c=n("./node_modules/d3-scale/src/symlog.js"),a=n("./node_modules/d3-scale/src/pow.js");function d(){var e,t,n,o,i,u,s,c=0,a=.5,d=1,l=r.identity,f=!1;function h(e){return isNaN(e=+e)?s:(e=.5+((e=+u(e))-t)*(e<t?o:i),l(f?Math.max(0,Math.min(1,e)):e))}return h.domain=function(r){return arguments.length?(e=u(c=+r[0]),t=u(a=+r[1]),n=u(d=+r[2]),o=e===t?0:.5/(t-e),i=t===n?0:.5/(n-t),h):[c,a,d]},h.clamp=function(e){return arguments.length?(f=!!e,h):f},h.interpolator=function(e){return arguments.length?(l=e,h):l},h.unknown=function(e){return arguments.length?(s=e,h):s},function(r){return u=r,e=r(c),t=r(a),n=r(d),o=e===t?0:.5/(t-e),i=t===n?0:.5/(n-t),h}}function l(){var e=Object(i.linearish)(d()(r.identity));return e.copy=function(){return Object(s.copy)(e,l())},o.initInterpolator.apply(e,arguments)}function f(){var e=Object(u.loggish)(d()).domain([.1,1,10]);return e.copy=function(){return Object(s.copy)(e,f()).base(e.base())},o.initInterpolator.apply(e,arguments)}function h(){var e=Object(c.symlogish)(d());return e.copy=function(){return Object(s.copy)(e,h()).constant(e.constant())},o.initInterpolator.apply(e,arguments)}function p(){var e=Object(a.powish)(d());return e.copy=function(){return Object(s.copy)(e,p()).exponent(e.exponent())},o.initInterpolator.apply(e,arguments)}function m(){return p.apply(null,arguments).exponent(.5)}},"./node_modules/d3-scale/src/identity.js":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return u}));var r=n("./node_modules/d3-scale/src/array.js"),o=n("./node_modules/d3-scale/src/linear.js"),i=n("./node_modules/d3-scale/src/number.js");function u(e){var t;function n(e){return isNaN(e=+e)?t:e}return n.invert=n,n.domain=n.range=function(t){return arguments.length?(e=r.map.call(t,i.default),n):e.slice()},n.unknown=function(e){return arguments.length?(t=e,n):t},n.copy=function(){return u(e).unknown(t)},e=arguments.length?r.map.call(e,i.default):[0,1],Object(o.linearish)(n)}},"./node_modules/d3-scale/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-scale/src/band.js");n.d(t,"scaleBand",(function(){return r.default})),n.d(t,"scalePoint",(function(){return r.point}));var o=n("./node_modules/d3-scale/src/identity.js");n.d(t,"scaleIdentity",(function(){return o.default}));var i=n("./node_modules/d3-scale/src/linear.js");n.d(t,"scaleLinear",(function(){return i.default}));var u=n("./node_modules/d3-scale/src/log.js");n.d(t,"scaleLog",(function(){return u.default}));var s=n("./node_modules/d3-scale/src/symlog.js");n.d(t,"scaleSymlog",(function(){return s.default}));var c=n("./node_modules/d3-scale/src/ordinal.js");n.d(t,"scaleOrdinal",(function(){return c.default})),n.d(t,"scaleImplicit",(function(){return c.implicit}));var a=n("./node_modules/d3-scale/src/pow.js");n.d(t,"scalePow",(function(){return a.default})),n.d(t,"scaleSqrt",(function(){return a.sqrt}));var d=n("./node_modules/d3-scale/src/quantile.js");n.d(t,"scaleQuantile",(function(){return d.default}));var l=n("./node_modules/d3-scale/src/quantize.js");n.d(t,"scaleQuantize",(function(){return l.default}));var f=n("./node_modules/d3-scale/src/threshold.js");n.d(t,"scaleThreshold",(function(){return f.default}));var h=n("./node_modules/d3-scale/src/time.js");n.d(t,"scaleTime",(function(){return h.default}));var p=n("./node_modules/d3-scale/src/utcTime.js");n.d(t,"scaleUtc",(function(){return p.default}));var m=n("./node_modules/d3-scale/src/sequential.js");n.d(t,"scaleSequential",(function(){return m.default})),n.d(t,"scaleSequentialLog",(function(){return m.sequentialLog})),n.d(t,"scaleSequentialPow",(function(){return m.sequentialPow})),n.d(t,"scaleSequentialSqrt",(function(){return m.sequentialSqrt})),n.d(t,"scaleSequentialSymlog",(function(){return m.sequentialSymlog}));var _=n("./node_modules/d3-scale/src/sequentialQuantile.js");n.d(t,"scaleSequentialQuantile",(function(){return _.default}));var v=n("./node_modules/d3-scale/src/diverging.js");n.d(t,"scaleDiverging",(function(){return v.default})),n.d(t,"scaleDivergingLog",(function(){return v.divergingLog})),n.d(t,"scaleDivergingPow",(function(){return v.divergingPow})),n.d(t,"scaleDivergingSqrt",(function(){return v.divergingSqrt})),n.d(t,"scaleDivergingSymlog",(function(){return v.divergingSymlog}));var g=n("./node_modules/d3-scale/src/tickFormat.js");n.d(t,"tickFormat",(function(){return g.default}))},"./node_modules/d3-scale/src/init.js":function(e,t,n){"use strict";function r(e,t){switch(arguments.length){case 0:break;case 1:this.range(e);break;default:this.range(t).domain(e)}return this}function o(e,t){switch(arguments.length){case 0:break;case 1:this.interpolator(e);break;default:this.interpolator(t).domain(e)}return this}n.r(t),n.d(t,"initRange",(function(){return r})),n.d(t,"initInterpolator",(function(){return o}))},"./node_modules/d3-scale/src/linear.js":function(e,t,n){"use strict";n.r(t),n.d(t,"linearish",(function(){return s})),n.d(t,"default",(function(){return c}));var r=n("./node_modules/d3-array/src/index.js"),o=n("./node_modules/d3-scale/src/continuous.js"),i=n("./node_modules/d3-scale/src/init.js"),u=n("./node_modules/d3-scale/src/tickFormat.js");function s(e){var t=e.domain;return e.ticks=function(e){var n=t();return Object(r.ticks)(n[0],n[n.length-1],null==e?10:e)},e.tickFormat=function(e,n){var r=t();return Object(u.default)(r[0],r[r.length-1],null==e?10:e,n)},e.nice=function(n){null==n&&(n=10);var o,i=t(),u=0,s=i.length-1,c=i[u],a=i[s];return a<c&&(o=c,c=a,a=o,o=u,u=s,s=o),(o=Object(r.tickIncrement)(c,a,n))>0?(c=Math.floor(c/o)*o,a=Math.ceil(a/o)*o,o=Object(r.tickIncrement)(c,a,n)):o<0&&(c=Math.ceil(c*o)/o,a=Math.floor(a*o)/o,o=Object(r.tickIncrement)(c,a,n)),o>0?(i[u]=Math.floor(c/o)*o,i[s]=Math.ceil(a/o)*o,t(i)):o<0&&(i[u]=Math.ceil(c*o)/o,i[s]=Math.floor(a*o)/o,t(i)),e},e}function c(){var e=Object(o.default)(o.identity,o.identity);return e.copy=function(){return Object(o.copy)(e,c())},i.initRange.apply(e,arguments),s(e)}},"./node_modules/d3-scale/src/log.js":function(e,t,n){"use strict";n.r(t),n.d(t,"loggish",(function(){return p})),n.d(t,"default",(function(){return m}));var r=n("./node_modules/d3-array/src/index.js"),o=n("./node_modules/d3-format/src/index.js"),i=n("./node_modules/d3-scale/src/nice.js"),u=n("./node_modules/d3-scale/src/continuous.js"),s=n("./node_modules/d3-scale/src/init.js");function c(e){return Math.log(e)}function a(e){return Math.exp(e)}function d(e){return-Math.log(-e)}function l(e){return-Math.exp(-e)}function f(e){return isFinite(e)?+("1e"+e):e<0?0:e}function h(e){return function(t){return-e(-t)}}function p(e){var t,n,u=e(c,a),s=u.domain,p=10;function m(){return t=function(e){return e===Math.E?Math.log:10===e&&Math.log10||2===e&&Math.log2||(e=Math.log(e),function(t){return Math.log(t)/e})}(p),n=function(e){return 10===e?f:e===Math.E?Math.exp:function(t){return Math.pow(e,t)}}(p),s()[0]<0?(t=h(t),n=h(n),e(d,l)):e(c,a),u}return u.base=function(e){return arguments.length?(p=+e,m()):p},u.domain=function(e){return arguments.length?(s(e),m()):s()},u.ticks=function(e){var o,i=s(),u=i[0],c=i[i.length-1];(o=c<u)&&(f=u,u=c,c=f);var a,d,l,f=t(u),h=t(c),m=null==e?10:+e,_=[];if(!(p%1)&&h-f<m){if(f=Math.round(f)-1,h=Math.round(h)+1,u>0){for(;f<h;++f)for(d=1,a=n(f);d<p;++d)if(!((l=a*d)<u)){if(l>c)break;_.push(l)}}else for(;f<h;++f)for(d=p-1,a=n(f);d>=1;--d)if(!((l=a*d)<u)){if(l>c)break;_.push(l)}}else _=Object(r.ticks)(f,h,Math.min(h-f,m)).map(n);return o?_.reverse():_},u.tickFormat=function(e,r){if(null==r&&(r=10===p?".0e":","),"function"!=typeof r&&(r=Object(o.format)(r)),e===1/0)return r;null==e&&(e=10);var i=Math.max(1,p*e/u.ticks().length);return function(e){var o=e/n(Math.round(t(e)));return o*p<p-.5&&(o*=p),o<=i?r(e):""}},u.nice=function(){return s(Object(i.default)(s(),{floor:function(e){return n(Math.floor(t(e)))},ceil:function(e){return n(Math.ceil(t(e)))}}))},u}function m(){var e=p(Object(u.transformer)()).domain([1,10]);return e.copy=function(){return Object(u.copy)(e,m()).base(e.base())},s.initRange.apply(e,arguments),e}},"./node_modules/d3-scale/src/nice.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){var n,r=0,o=(e=e.slice()).length-1,i=e[r],u=e[o];return u<i&&(n=r,r=o,o=n,n=i,i=u,u=n),e[r]=t.floor(i),e[o]=t.ceil(u),e}},"./node_modules/d3-scale/src/number.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return+e}},"./node_modules/d3-scale/src/ordinal.js":function(e,t,n){"use strict";n.r(t),n.d(t,"implicit",(function(){return u})),n.d(t,"default",(function(){return s}));var r=n("./node_modules/d3-collection/src/index.js"),o=n("./node_modules/d3-scale/src/array.js"),i=n("./node_modules/d3-scale/src/init.js"),u={name:"implicit"};function s(){var e=Object(r.map)(),t=[],n=[],c=u;function a(r){var o=r+"",i=e.get(o);if(!i){if(c!==u)return c;e.set(o,i=t.push(r))}return n[(i-1)%n.length]}return a.domain=function(n){if(!arguments.length)return t.slice();t=[],e=Object(r.map)();for(var o,i,u=-1,s=n.length;++u<s;)e.has(i=(o=n[u])+"")||e.set(i,t.push(o));return a},a.range=function(e){return arguments.length?(n=o.slice.call(e),a):n.slice()},a.unknown=function(e){return arguments.length?(c=e,a):c},a.copy=function(){return s(t,n).unknown(c)},i.initRange.apply(a,arguments),a}},"./node_modules/d3-scale/src/pow.js":function(e,t,n){"use strict";n.r(t),n.d(t,"powish",(function(){return a})),n.d(t,"default",(function(){return d})),n.d(t,"sqrt",(function(){return l}));var r=n("./node_modules/d3-scale/src/linear.js"),o=n("./node_modules/d3-scale/src/continuous.js"),i=n("./node_modules/d3-scale/src/init.js");function u(e){return function(t){return t<0?-Math.pow(-t,e):Math.pow(t,e)}}function s(e){return e<0?-Math.sqrt(-e):Math.sqrt(e)}function c(e){return e<0?-e*e:e*e}function a(e){var t=e(o.identity,o.identity),n=1;function i(){return 1===n?e(o.identity,o.identity):.5===n?e(s,c):e(u(n),u(1/n))}return t.exponent=function(e){return arguments.length?(n=+e,i()):n},Object(r.linearish)(t)}function d(){var e=a(Object(o.transformer)());return e.copy=function(){return Object(o.copy)(e,d()).exponent(e.exponent())},i.initRange.apply(e,arguments),e}function l(){return d.apply(null,arguments).exponent(.5)}},"./node_modules/d3-scale/src/quantile.js":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return u}));var r=n("./node_modules/d3-array/src/index.js"),o=n("./node_modules/d3-scale/src/array.js"),i=n("./node_modules/d3-scale/src/init.js");function u(){var e,t=[],n=[],s=[];function c(){var e=0,o=Math.max(1,n.length);for(s=new Array(o-1);++e<o;)s[e-1]=Object(r.quantile)(t,e/o);return a}function a(t){return isNaN(t=+t)?e:n[Object(r.bisect)(s,t)]}return a.invertExtent=function(e){var r=n.indexOf(e);return r<0?[NaN,NaN]:[r>0?s[r-1]:t[0],r<s.length?s[r]:t[t.length-1]]},a.domain=function(e){if(!arguments.length)return t.slice();t=[];for(var n,o=0,i=e.length;o<i;++o)null==(n=e[o])||isNaN(n=+n)||t.push(n);return t.sort(r.ascending),c()},a.range=function(e){return arguments.length?(n=o.slice.call(e),c()):n.slice()},a.unknown=function(t){return arguments.length?(e=t,a):e},a.quantiles=function(){return s.slice()},a.copy=function(){return u().domain(t).range(n).unknown(e)},i.initRange.apply(a,arguments)}},"./node_modules/d3-scale/src/quantize.js":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return s}));var r=n("./node_modules/d3-array/src/index.js"),o=n("./node_modules/d3-scale/src/array.js"),i=n("./node_modules/d3-scale/src/linear.js"),u=n("./node_modules/d3-scale/src/init.js");function s(){var e,t=0,n=1,c=1,a=[.5],d=[0,1];function l(t){return t<=t?d[Object(r.bisect)(a,t,0,c)]:e}function f(){var e=-1;for(a=new Array(c);++e<c;)a[e]=((e+1)*n-(e-c)*t)/(c+1);return l}return l.domain=function(e){return arguments.length?(t=+e[0],n=+e[1],f()):[t,n]},l.range=function(e){return arguments.length?(c=(d=o.slice.call(e)).length-1,f()):d.slice()},l.invertExtent=function(e){var r=d.indexOf(e);return r<0?[NaN,NaN]:r<1?[t,a[0]]:r>=c?[a[c-1],n]:[a[r-1],a[r]]},l.unknown=function(t){return arguments.length?(e=t,l):l},l.thresholds=function(){return a.slice()},l.copy=function(){return s().domain([t,n]).range(d).unknown(e)},u.initRange.apply(Object(i.linearish)(l),arguments)}},"./node_modules/d3-scale/src/sequential.js":function(e,t,n){"use strict";n.r(t),n.d(t,"copy",(function(){return d})),n.d(t,"default",(function(){return l})),n.d(t,"sequentialLog",(function(){return f})),n.d(t,"sequentialSymlog",(function(){return h})),n.d(t,"sequentialPow",(function(){return p})),n.d(t,"sequentialSqrt",(function(){return m}));var r=n("./node_modules/d3-scale/src/continuous.js"),o=n("./node_modules/d3-scale/src/init.js"),i=n("./node_modules/d3-scale/src/linear.js"),u=n("./node_modules/d3-scale/src/log.js"),s=n("./node_modules/d3-scale/src/symlog.js"),c=n("./node_modules/d3-scale/src/pow.js");function a(){var e,t,n,o,i,u=0,s=1,c=r.identity,a=!1;function d(t){return isNaN(t=+t)?i:c(0===n?.5:(t=(o(t)-e)*n,a?Math.max(0,Math.min(1,t)):t))}return d.domain=function(r){return arguments.length?(e=o(u=+r[0]),t=o(s=+r[1]),n=e===t?0:1/(t-e),d):[u,s]},d.clamp=function(e){return arguments.length?(a=!!e,d):a},d.interpolator=function(e){return arguments.length?(c=e,d):c},d.unknown=function(e){return arguments.length?(i=e,d):i},function(r){return o=r,e=r(u),t=r(s),n=e===t?0:1/(t-e),d}}function d(e,t){return t.domain(e.domain()).interpolator(e.interpolator()).clamp(e.clamp()).unknown(e.unknown())}function l(){var e=Object(i.linearish)(a()(r.identity));return e.copy=function(){return d(e,l())},o.initInterpolator.apply(e,arguments)}function f(){var e=Object(u.loggish)(a()).domain([1,10]);return e.copy=function(){return d(e,f()).base(e.base())},o.initInterpolator.apply(e,arguments)}function h(){var e=Object(s.symlogish)(a());return e.copy=function(){return d(e,h()).constant(e.constant())},o.initInterpolator.apply(e,arguments)}function p(){var e=Object(c.powish)(a());return e.copy=function(){return d(e,p()).exponent(e.exponent())},o.initInterpolator.apply(e,arguments)}function m(){return p.apply(null,arguments).exponent(.5)}},"./node_modules/d3-scale/src/sequentialQuantile.js":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return u}));var r=n("./node_modules/d3-array/src/index.js"),o=n("./node_modules/d3-scale/src/continuous.js"),i=n("./node_modules/d3-scale/src/init.js");function u(){var e=[],t=o.identity;function n(n){if(!isNaN(n=+n))return t((Object(r.bisect)(e,n)-1)/(e.length-1))}return n.domain=function(t){if(!arguments.length)return e.slice();e=[];for(var o,i=0,u=t.length;i<u;++i)null==(o=t[i])||isNaN(o=+o)||e.push(o);return e.sort(r.ascending),n},n.interpolator=function(e){return arguments.length?(t=e,n):t},n.copy=function(){return u(t).domain(e)},i.initInterpolator.apply(n,arguments)}},"./node_modules/d3-scale/src/symlog.js":function(e,t,n){"use strict";n.r(t),n.d(t,"symlogish",(function(){return c})),n.d(t,"default",(function(){return a}));var r=n("./node_modules/d3-scale/src/linear.js"),o=n("./node_modules/d3-scale/src/continuous.js"),i=n("./node_modules/d3-scale/src/init.js");function u(e){return function(t){return Math.sign(t)*Math.log1p(Math.abs(t/e))}}function s(e){return function(t){return Math.sign(t)*Math.expm1(Math.abs(t))*e}}function c(e){var t=1,n=e(u(t),s(t));return n.constant=function(n){return arguments.length?e(u(t=+n),s(t)):t},Object(r.linearish)(n)}function a(){var e=c(Object(o.transformer)());return e.copy=function(){return Object(o.copy)(e,a()).constant(e.constant())},i.initRange.apply(e,arguments)}},"./node_modules/d3-scale/src/threshold.js":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return u}));var r=n("./node_modules/d3-array/src/index.js"),o=n("./node_modules/d3-scale/src/array.js"),i=n("./node_modules/d3-scale/src/init.js");function u(){var e,t=[.5],n=[0,1],s=1;function c(o){return o<=o?n[Object(r.bisect)(t,o,0,s)]:e}return c.domain=function(e){return arguments.length?(t=o.slice.call(e),s=Math.min(t.length,n.length-1),c):t.slice()},c.range=function(e){return arguments.length?(n=o.slice.call(e),s=Math.min(t.length,n.length-1),c):n.slice()},c.invertExtent=function(e){var r=n.indexOf(e);return[t[r-1],t[r]]},c.unknown=function(t){return arguments.length?(e=t,c):e},c.copy=function(){return u().domain(t).range(n).unknown(e)},i.initRange.apply(c,arguments)}},"./node_modules/d3-scale/src/tickFormat.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-array/src/index.js"),o=n("./node_modules/d3-format/src/index.js");t.default=function(e,t,n,i){var u,s=Object(r.tickStep)(e,t,n);switch((i=Object(o.formatSpecifier)(null==i?",f":i)).type){case"s":var c=Math.max(Math.abs(e),Math.abs(t));return null!=i.precision||isNaN(u=Object(o.precisionPrefix)(s,c))||(i.precision=u),Object(o.formatPrefix)(i,c);case"":case"e":case"g":case"p":case"r":null!=i.precision||isNaN(u=Object(o.precisionRound)(s,Math.max(Math.abs(e),Math.abs(t))))||(i.precision=u-("e"===i.type));break;case"f":case"%":null!=i.precision||isNaN(u=Object(o.precisionFixed)(s))||(i.precision=u-2*("%"===i.type))}return Object(o.format)(i)}},"./node_modules/d3-scale/src/time.js":function(e,t,n){"use strict";n.r(t),n.d(t,"calendar",(function(){return f}));var r=n("./node_modules/d3-array/src/index.js"),o=n("./node_modules/d3-time/src/index.js"),i=n("./node_modules/d3-time-format/src/index.js"),u=n("./node_modules/d3-scale/src/array.js"),s=n("./node_modules/d3-scale/src/continuous.js"),c=n("./node_modules/d3-scale/src/init.js"),a=n("./node_modules/d3-scale/src/nice.js");function d(e){return new Date(e)}function l(e){return e instanceof Date?+e:+new Date(+e)}function f(e,t,n,o,i,c,h,p,m){var _=Object(s.default)(s.identity,s.identity),v=_.invert,g=_.domain,b=m(".%L"),j=m(":%S"),y=m("%I:%M"),x=m("%I %p"),w=m("%a %d"),O=m("%b %d"),M=m("%B"),S=m("%Y"),A=[[h,1,1e3],[h,5,5e3],[h,15,15e3],[h,30,3e4],[c,1,6e4],[c,5,3e5],[c,15,9e5],[c,30,18e5],[i,1,36e5],[i,3,108e5],[i,6,216e5],[i,12,432e5],[o,1,864e5],[o,2,1728e5],[n,1,6048e5],[t,1,2592e6],[t,3,7776e6],[e,1,31536e6]];function P(r){return(h(r)<r?b:c(r)<r?j:i(r)<r?y:o(r)<r?x:t(r)<r?n(r)<r?w:O:e(r)<r?M:S)(r)}function k(t,n,o,i){if(null==t&&(t=10),"number"==typeof t){var u=Math.abs(o-n)/t,s=Object(r.bisector)((function(e){return e[2]})).right(A,u);s===A.length?(i=Object(r.tickStep)(n/31536e6,o/31536e6,t),t=e):s?(i=(s=A[u/A[s-1][2]<A[s][2]/u?s-1:s])[1],t=s[0]):(i=Math.max(Object(r.tickStep)(n,o,t),1),t=p)}return null==i?t:t.every(i)}return _.invert=function(e){return new Date(v(e))},_.domain=function(e){return arguments.length?g(u.map.call(e,l)):g().map(d)},_.ticks=function(e,t){var n,r=g(),o=r[0],i=r[r.length-1],u=i<o;return u&&(n=o,o=i,i=n),n=(n=k(e,o,i,t))?n.range(o,i+1):[],u?n.reverse():n},_.tickFormat=function(e,t){return null==t?P:m(t)},_.nice=function(e,t){var n=g();return(e=k(e,n[0],n[n.length-1],t))?g(Object(a.default)(n,e)):_},_.copy=function(){return Object(s.copy)(_,f(e,t,n,o,i,c,h,p,m))},_}t.default=function(){return c.initRange.apply(f(o.timeYear,o.timeMonth,o.timeWeek,o.timeDay,o.timeHour,o.timeMinute,o.timeSecond,o.timeMillisecond,i.timeFormat).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}},"./node_modules/d3-scale/src/utcTime.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-scale/src/time.js"),o=n("./node_modules/d3-time-format/src/index.js"),i=n("./node_modules/d3-time/src/index.js"),u=n("./node_modules/d3-scale/src/init.js");t.default=function(){return u.initRange.apply(Object(r.calendar)(i.utcYear,i.utcMonth,i.utcWeek,i.utcDay,i.utcHour,i.utcMinute,i.utcSecond,i.utcMillisecond,o.utcFormat).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)}},"./node_modules/d3-selection/src/constant.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return e}}},"./node_modules/d3-selection/src/create.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/creator.js"),o=n("./node_modules/d3-selection/src/select.js");t.default=function(e){return Object(o.default)(Object(r.default)(e).call(document.documentElement))}},"./node_modules/d3-selection/src/creator.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/namespace.js"),o=n("./node_modules/d3-selection/src/namespaces.js");function i(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===o.xhtml&&t.documentElement.namespaceURI===o.xhtml?t.createElement(e):t.createElementNS(n,e)}}function u(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}t.default=function(e){var t=Object(r.default)(e);return(t.local?u:i)(t)}},"./node_modules/d3-selection/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/create.js");n.d(t,"create",(function(){return r.default}));var o=n("./node_modules/d3-selection/src/creator.js");n.d(t,"creator",(function(){return o.default}));var i=n("./node_modules/d3-selection/src/local.js");n.d(t,"local",(function(){return i.default}));var u=n("./node_modules/d3-selection/src/matcher.js");n.d(t,"matcher",(function(){return u.default}));var s=n("./node_modules/d3-selection/src/mouse.js");n.d(t,"mouse",(function(){return s.default}));var c=n("./node_modules/d3-selection/src/namespace.js");n.d(t,"namespace",(function(){return c.default}));var a=n("./node_modules/d3-selection/src/namespaces.js");n.d(t,"namespaces",(function(){return a.default}));var d=n("./node_modules/d3-selection/src/point.js");n.d(t,"clientPoint",(function(){return d.default}));var l=n("./node_modules/d3-selection/src/select.js");n.d(t,"select",(function(){return l.default}));var f=n("./node_modules/d3-selection/src/selectAll.js");n.d(t,"selectAll",(function(){return f.default}));var h=n("./node_modules/d3-selection/src/selection/index.js");n.d(t,"selection",(function(){return h.default}));var p=n("./node_modules/d3-selection/src/selector.js");n.d(t,"selector",(function(){return p.default}));var m=n("./node_modules/d3-selection/src/selectorAll.js");n.d(t,"selectorAll",(function(){return m.default}));var _=n("./node_modules/d3-selection/src/selection/style.js");n.d(t,"style",(function(){return _.styleValue}));var v=n("./node_modules/d3-selection/src/touch.js");n.d(t,"touch",(function(){return v.default}));var g=n("./node_modules/d3-selection/src/touches.js");n.d(t,"touches",(function(){return g.default}));var b=n("./node_modules/d3-selection/src/window.js");n.d(t,"window",(function(){return b.default}));var j=n("./node_modules/d3-selection/src/selection/on.js");n.d(t,"event",(function(){return j.event})),n.d(t,"customEvent",(function(){return j.customEvent}))},"./node_modules/d3-selection/src/local.js":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return o}));var r=0;function o(){return new i}function i(){this._="@"+(++r).toString(36)}i.prototype=o.prototype={constructor:i,get:function(e){for(var t=this._;!(t in e);)if(!(e=e.parentNode))return;return e[t]},set:function(e,t){return e[this._]=t},remove:function(e){return this._ in e&&delete e[this._]},toString:function(){return this._}}},"./node_modules/d3-selection/src/matcher.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return this.matches(e)}}},"./node_modules/d3-selection/src/mouse.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/sourceEvent.js"),o=n("./node_modules/d3-selection/src/point.js");t.default=function(e){var t=Object(r.default)();return t.changedTouches&&(t=t.changedTouches[0]),Object(o.default)(e,t)}},"./node_modules/d3-selection/src/namespace.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/namespaces.js");t.default=function(e){var t=e+="",n=t.indexOf(":");return n>=0&&"xmlns"!==(t=e.slice(0,n))&&(e=e.slice(n+1)),r.default.hasOwnProperty(t)?{space:r.default[t],local:e}:e}},"./node_modules/d3-selection/src/namespaces.js":function(e,t,n){"use strict";n.r(t),n.d(t,"xhtml",(function(){return r}));var r="http://www.w3.org/1999/xhtml";t.default={svg:"http://www.w3.org/2000/svg",xhtml:r,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"}},"./node_modules/d3-selection/src/point.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}var o=e.getBoundingClientRect();return[t.clientX-o.left-e.clientLeft,t.clientY-o.top-e.clientTop]}},"./node_modules/d3-selection/src/select.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/selection/index.js");t.default=function(e){return"string"==typeof e?new r.Selection([[document.querySelector(e)]],[document.documentElement]):new r.Selection([[e]],r.root)}},"./node_modules/d3-selection/src/selectAll.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/selection/index.js");t.default=function(e){return"string"==typeof e?new r.Selection([document.querySelectorAll(e)],[document.documentElement]):new r.Selection([null==e?[]:e],r.root)}},"./node_modules/d3-selection/src/selection/append.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/creator.js");t.default=function(e){var t="function"==typeof e?e:Object(r.default)(e);return this.select((function(){return this.appendChild(t.apply(this,arguments))}))}},"./node_modules/d3-selection/src/selection/attr.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/namespace.js");function o(e){return function(){this.removeAttribute(e)}}function i(e){return function(){this.removeAttributeNS(e.space,e.local)}}function u(e,t){return function(){this.setAttribute(e,t)}}function s(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}function c(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}}function a(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}t.default=function(e,t){var n=Object(r.default)(e);if(arguments.length<2){var d=this.node();return n.local?d.getAttributeNS(n.space,n.local):d.getAttribute(n)}return this.each((null==t?n.local?i:o:"function"==typeof t?n.local?a:c:n.local?s:u)(n,t))}},"./node_modules/d3-selection/src/selection/call.js":function(e,t,n){"use strict";n.r(t),t.default=function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this}},"./node_modules/d3-selection/src/selection/classed.js":function(e,t,n){"use strict";function r(e){return e.trim().split(/^|\s+/)}function o(e){return e.classList||new i(e)}function i(e){this._node=e,this._names=r(e.getAttribute("class")||"")}function u(e,t){for(var n=o(e),r=-1,i=t.length;++r<i;)n.add(t[r])}function s(e,t){for(var n=o(e),r=-1,i=t.length;++r<i;)n.remove(t[r])}function c(e){return function(){u(this,e)}}function a(e){return function(){s(this,e)}}function d(e,t){return function(){(t.apply(this,arguments)?u:s)(this,e)}}n.r(t),i.prototype={add:function(e){this._names.indexOf(e)<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}},t.default=function(e,t){var n=r(e+"");if(arguments.length<2){for(var i=o(this.node()),u=-1,s=n.length;++u<s;)if(!i.contains(n[u]))return!1;return!0}return this.each(("function"==typeof t?d:t?c:a)(n,t))}},"./node_modules/d3-selection/src/selection/clone.js":function(e,t,n){"use strict";function r(){var e=this.cloneNode(!1),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function o(){var e=this.cloneNode(!0),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}n.r(t),t.default=function(e){return this.select(e?o:r)}},"./node_modules/d3-selection/src/selection/data.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/selection/index.js"),o=n("./node_modules/d3-selection/src/selection/enter.js"),i=n("./node_modules/d3-selection/src/constant.js");function u(e,t,n,r,i,u){for(var s,c=0,a=t.length,d=u.length;c<d;++c)(s=t[c])?(s.__data__=u[c],r[c]=s):n[c]=new o.EnterNode(e,u[c]);for(;c<a;++c)(s=t[c])&&(i[c]=s)}function s(e,t,n,r,i,u,s){var c,a,d,l={},f=t.length,h=u.length,p=new Array(f);for(c=0;c<f;++c)(a=t[c])&&(p[c]=d="$"+s.call(a,a.__data__,c,t),d in l?i[c]=a:l[d]=a);for(c=0;c<h;++c)(a=l[d="$"+s.call(e,u[c],c,u)])?(r[c]=a,a.__data__=u[c],l[d]=null):n[c]=new o.EnterNode(e,u[c]);for(c=0;c<f;++c)(a=t[c])&&l[p[c]]===a&&(i[c]=a)}t.default=function(e,t){if(!e)return v=new Array(this.size()),h=-1,this.each((function(e){v[++h]=e})),v;var n=t?s:u,o=this._parents,c=this._groups;"function"!=typeof e&&(e=Object(i.default)(e));for(var a=c.length,d=new Array(a),l=new Array(a),f=new Array(a),h=0;h<a;++h){var p=o[h],m=c[h],_=m.length,v=e.call(p,p&&p.__data__,h,o),g=v.length,b=l[h]=new Array(g),j=d[h]=new Array(g);n(p,m,b,j,f[h]=new Array(_),v,t);for(var y,x,w=0,O=0;w<g;++w)if(y=b[w]){for(w>=O&&(O=w+1);!(x=j[O])&&++O<g;);y._next=x||null}}return(d=new r.Selection(d,o))._enter=l,d._exit=f,d}},"./node_modules/d3-selection/src/selection/datum.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return arguments.length?this.property("__data__",e):this.node().__data__}},"./node_modules/d3-selection/src/selection/dispatch.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/window.js");function o(e,t,n){var o=Object(r.default)(e),i=o.CustomEvent;"function"==typeof i?i=new i(t,n):(i=o.document.createEvent("Event"),n?(i.initEvent(t,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(t,!1,!1)),e.dispatchEvent(i)}function i(e,t){return function(){return o(this,e,t)}}function u(e,t){return function(){return o(this,e,t.apply(this,arguments))}}t.default=function(e,t){return this.each(("function"==typeof t?u:i)(e,t))}},"./node_modules/d3-selection/src/selection/each.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){for(var t=this._groups,n=0,r=t.length;n<r;++n)for(var o,i=t[n],u=0,s=i.length;u<s;++u)(o=i[u])&&e.call(o,o.__data__,u,i);return this}},"./node_modules/d3-selection/src/selection/empty.js":function(e,t,n){"use strict";n.r(t),t.default=function(){return!this.node()}},"./node_modules/d3-selection/src/selection/enter.js":function(e,t,n){"use strict";n.r(t),n.d(t,"EnterNode",(function(){return i}));var r=n("./node_modules/d3-selection/src/selection/sparse.js"),o=n("./node_modules/d3-selection/src/selection/index.js");function i(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}t.default=function(){return new o.Selection(this._enter||this._groups.map(r.default),this._parents)},i.prototype={constructor:i,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}}},"./node_modules/d3-selection/src/selection/exit.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/selection/sparse.js"),o=n("./node_modules/d3-selection/src/selection/index.js");t.default=function(){return new o.Selection(this._exit||this._groups.map(r.default),this._parents)}},"./node_modules/d3-selection/src/selection/filter.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/selection/index.js"),o=n("./node_modules/d3-selection/src/matcher.js");t.default=function(e){"function"!=typeof e&&(e=Object(o.default)(e));for(var t=this._groups,n=t.length,i=new Array(n),u=0;u<n;++u)for(var s,c=t[u],a=c.length,d=i[u]=[],l=0;l<a;++l)(s=c[l])&&e.call(s,s.__data__,l,c)&&d.push(s);return new r.Selection(i,this._parents)}},"./node_modules/d3-selection/src/selection/html.js":function(e,t,n){"use strict";function r(){this.innerHTML=""}function o(e){return function(){this.innerHTML=e}}function i(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?"":t}}n.r(t),t.default=function(e){return arguments.length?this.each(null==e?r:("function"==typeof e?i:o)(e)):this.node().innerHTML}},"./node_modules/d3-selection/src/selection/index.js":function(e,t,n){"use strict";n.r(t),n.d(t,"root",(function(){return N})),n.d(t,"Selection",(function(){return q}));var r=n("./node_modules/d3-selection/src/selection/select.js"),o=n("./node_modules/d3-selection/src/selection/selectAll.js"),i=n("./node_modules/d3-selection/src/selection/filter.js"),u=n("./node_modules/d3-selection/src/selection/data.js"),s=n("./node_modules/d3-selection/src/selection/enter.js"),c=n("./node_modules/d3-selection/src/selection/exit.js"),a=n("./node_modules/d3-selection/src/selection/join.js"),d=n("./node_modules/d3-selection/src/selection/merge.js"),l=n("./node_modules/d3-selection/src/selection/order.js"),f=n("./node_modules/d3-selection/src/selection/sort.js"),h=n("./node_modules/d3-selection/src/selection/call.js"),p=n("./node_modules/d3-selection/src/selection/nodes.js"),m=n("./node_modules/d3-selection/src/selection/node.js"),_=n("./node_modules/d3-selection/src/selection/size.js"),v=n("./node_modules/d3-selection/src/selection/empty.js"),g=n("./node_modules/d3-selection/src/selection/each.js"),b=n("./node_modules/d3-selection/src/selection/attr.js"),j=n("./node_modules/d3-selection/src/selection/style.js"),y=n("./node_modules/d3-selection/src/selection/property.js"),x=n("./node_modules/d3-selection/src/selection/classed.js"),w=n("./node_modules/d3-selection/src/selection/text.js"),O=n("./node_modules/d3-selection/src/selection/html.js"),M=n("./node_modules/d3-selection/src/selection/raise.js"),S=n("./node_modules/d3-selection/src/selection/lower.js"),A=n("./node_modules/d3-selection/src/selection/append.js"),P=n("./node_modules/d3-selection/src/selection/insert.js"),k=n("./node_modules/d3-selection/src/selection/remove.js"),C=n("./node_modules/d3-selection/src/selection/clone.js"),T=n("./node_modules/d3-selection/src/selection/datum.js"),E=n("./node_modules/d3-selection/src/selection/on.js"),R=n("./node_modules/d3-selection/src/selection/dispatch.js"),N=[null];function q(e,t){this._groups=e,this._parents=t}function B(){return new q([[document.documentElement]],N)}q.prototype=B.prototype={constructor:q,select:r.default,selectAll:o.default,filter:i.default,data:u.default,enter:s.default,exit:c.default,join:a.default,merge:d.default,order:l.default,sort:f.default,call:h.default,nodes:p.default,node:m.default,size:_.default,empty:v.default,each:g.default,attr:b.default,style:j.default,property:y.default,classed:x.default,text:w.default,html:O.default,raise:M.default,lower:S.default,append:A.default,insert:P.default,remove:k.default,clone:C.default,datum:T.default,on:E.default,dispatch:R.default},t.default=B},"./node_modules/d3-selection/src/selection/insert.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/creator.js"),o=n("./node_modules/d3-selection/src/selector.js");function i(){return null}t.default=function(e,t){var n="function"==typeof e?e:Object(r.default)(e),u=null==t?i:"function"==typeof t?t:Object(o.default)(t);return this.select((function(){return this.insertBefore(n.apply(this,arguments),u.apply(this,arguments)||null)}))}},"./node_modules/d3-selection/src/selection/join.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t,n){var r=this.enter(),o=this,i=this.exit();return r="function"==typeof e?e(r):r.append(e+""),null!=t&&(o=t(o)),null==n?i.remove():n(i),r&&o?r.merge(o).order():o}},"./node_modules/d3-selection/src/selection/lower.js":function(e,t,n){"use strict";function r(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}n.r(t),t.default=function(){return this.each(r)}},"./node_modules/d3-selection/src/selection/merge.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/selection/index.js");t.default=function(e){for(var t=this._groups,n=e._groups,o=t.length,i=n.length,u=Math.min(o,i),s=new Array(o),c=0;c<u;++c)for(var a,d=t[c],l=n[c],f=d.length,h=s[c]=new Array(f),p=0;p<f;++p)(a=d[p]||l[p])&&(h[p]=a);for(;c<o;++c)s[c]=t[c];return new r.Selection(s,this._parents)}},"./node_modules/d3-selection/src/selection/node.js":function(e,t,n){"use strict";n.r(t),t.default=function(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r=e[t],o=0,i=r.length;o<i;++o){var u=r[o];if(u)return u}return null}},"./node_modules/d3-selection/src/selection/nodes.js":function(e,t,n){"use strict";n.r(t),t.default=function(){var e=new Array(this.size()),t=-1;return this.each((function(){e[++t]=this})),e}},"./node_modules/d3-selection/src/selection/on.js":function(e,t,n){"use strict";n.r(t),n.d(t,"event",(function(){return o})),n.d(t,"customEvent",(function(){return d}));var r={},o=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(r={mouseenter:"mouseover",mouseleave:"mouseout"}));function i(e,t,n){return e=u(e,t,n),function(t){var n=t.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||e.call(this,t)}}function u(e,t,n){return function(r){var i=o;o=r;try{e.call(this,this.__data__,t,n)}finally{o=i}}}function s(e){return e.trim().split(/^|\s+/).map((function(e){var t="",n=e.indexOf(".");return n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),{type:e,name:t}}))}function c(e){return function(){var t=this.__on;if(t){for(var n,r=0,o=-1,i=t.length;r<i;++r)n=t[r],e.type&&n.type!==e.type||n.name!==e.name?t[++o]=n:this.removeEventListener(n.type,n.listener,n.capture);++o?t.length=o:delete this.__on}}}function a(e,t,n){var o=r.hasOwnProperty(e.type)?i:u;return function(r,i,u){var s,c=this.__on,a=o(t,i,u);if(c)for(var d=0,l=c.length;d<l;++d)if((s=c[d]).type===e.type&&s.name===e.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=a,s.capture=n),void(s.value=t);this.addEventListener(e.type,a,n),s={type:e.type,name:e.name,value:t,listener:a,capture:n},c?c.push(s):this.__on=[s]}}function d(e,t,n,r){var i=o;e.sourceEvent=o,o=e;try{return t.apply(n,r)}finally{o=i}}t.default=function(e,t,n){var r,o,i=s(e+""),u=i.length;if(!(arguments.length<2)){for(d=t?a:c,null==n&&(n=!1),r=0;r<u;++r)this.each(d(i[r],t,n));return this}var d=this.node().__on;if(d)for(var l,f=0,h=d.length;f<h;++f)for(r=0,l=d[f];r<u;++r)if((o=i[r]).type===l.type&&o.name===l.name)return l.value}},"./node_modules/d3-selection/src/selection/order.js":function(e,t,n){"use strict";n.r(t),t.default=function(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var r,o=e[t],i=o.length-1,u=o[i];--i>=0;)(r=o[i])&&(u&&4^r.compareDocumentPosition(u)&&u.parentNode.insertBefore(r,u),u=r);return this}},"./node_modules/d3-selection/src/selection/property.js":function(e,t,n){"use strict";function r(e){return function(){delete this[e]}}function o(e,t){return function(){this[e]=t}}function i(e,t){return function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}}n.r(t),t.default=function(e,t){return arguments.length>1?this.each((null==t?r:"function"==typeof t?i:o)(e,t)):this.node()[e]}},"./node_modules/d3-selection/src/selection/raise.js":function(e,t,n){"use strict";function r(){this.nextSibling&&this.parentNode.appendChild(this)}n.r(t),t.default=function(){return this.each(r)}},"./node_modules/d3-selection/src/selection/remove.js":function(e,t,n){"use strict";function r(){var e=this.parentNode;e&&e.removeChild(this)}n.r(t),t.default=function(){return this.each(r)}},"./node_modules/d3-selection/src/selection/select.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/selection/index.js"),o=n("./node_modules/d3-selection/src/selector.js");t.default=function(e){"function"!=typeof e&&(e=Object(o.default)(e));for(var t=this._groups,n=t.length,i=new Array(n),u=0;u<n;++u)for(var s,c,a=t[u],d=a.length,l=i[u]=new Array(d),f=0;f<d;++f)(s=a[f])&&(c=e.call(s,s.__data__,f,a))&&("__data__"in s&&(c.__data__=s.__data__),l[f]=c);return new r.Selection(i,this._parents)}},"./node_modules/d3-selection/src/selection/selectAll.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/selection/index.js"),o=n("./node_modules/d3-selection/src/selectorAll.js");t.default=function(e){"function"!=typeof e&&(e=Object(o.default)(e));for(var t=this._groups,n=t.length,i=[],u=[],s=0;s<n;++s)for(var c,a=t[s],d=a.length,l=0;l<d;++l)(c=a[l])&&(i.push(e.call(c,c.__data__,l,a)),u.push(c));return new r.Selection(i,u)}},"./node_modules/d3-selection/src/selection/size.js":function(e,t,n){"use strict";n.r(t),t.default=function(){var e=0;return this.each((function(){++e})),e}},"./node_modules/d3-selection/src/selection/sort.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/selection/index.js");function o(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}t.default=function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e||(e=o);for(var n=this._groups,i=n.length,u=new Array(i),s=0;s<i;++s){for(var c,a=n[s],d=a.length,l=u[s]=new Array(d),f=0;f<d;++f)(c=a[f])&&(l[f]=c);l.sort(t)}return new r.Selection(u,this._parents).order()}},"./node_modules/d3-selection/src/selection/sparse.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return new Array(e.length)}},"./node_modules/d3-selection/src/selection/style.js":function(e,t,n){"use strict";n.r(t),n.d(t,"styleValue",(function(){return s}));var r=n("./node_modules/d3-selection/src/window.js");function o(e){return function(){this.style.removeProperty(e)}}function i(e,t,n){return function(){this.style.setProperty(e,t,n)}}function u(e,t,n){return function(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(e):this.style.setProperty(e,r,n)}}function s(e,t){return e.style.getPropertyValue(t)||Object(r.default)(e).getComputedStyle(e,null).getPropertyValue(t)}t.default=function(e,t,n){return arguments.length>1?this.each((null==t?o:"function"==typeof t?u:i)(e,t,null==n?"":n)):s(this.node(),e)}},"./node_modules/d3-selection/src/selection/text.js":function(e,t,n){"use strict";function r(){this.textContent=""}function o(e){return function(){this.textContent=e}}function i(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?"":t}}n.r(t),t.default=function(e){return arguments.length?this.each(null==e?r:("function"==typeof e?i:o)(e)):this.node().textContent}},"./node_modules/d3-selection/src/selector.js":function(e,t,n){"use strict";function r(){}n.r(t),t.default=function(e){return null==e?r:function(){return this.querySelector(e)}}},"./node_modules/d3-selection/src/selectorAll.js":function(e,t,n){"use strict";function r(){return[]}n.r(t),t.default=function(e){return null==e?r:function(){return this.querySelectorAll(e)}}},"./node_modules/d3-selection/src/sourceEvent.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/selection/on.js");t.default=function(){for(var e,t=r.event;e=t.sourceEvent;)t=e;return t}},"./node_modules/d3-selection/src/touch.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/sourceEvent.js"),o=n("./node_modules/d3-selection/src/point.js");t.default=function(e,t,n){arguments.length<3&&(n=t,t=Object(r.default)().changedTouches);for(var i,u=0,s=t?t.length:0;u<s;++u)if((i=t[u]).identifier===n)return Object(o.default)(e,i);return null}},"./node_modules/d3-selection/src/touches.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/sourceEvent.js"),o=n("./node_modules/d3-selection/src/point.js");t.default=function(e,t){null==t&&(t=Object(r.default)().touches);for(var n=0,i=t?t.length:0,u=new Array(i);n<i;++n)u[n]=Object(o.default)(e,t[n]);return u}},"./node_modules/d3-selection/src/window.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView}},"./node_modules/d3-shape/src/arc.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-path/src/index.js"),o=n("./node_modules/d3-shape/src/constant.js"),i=n("./node_modules/d3-shape/src/math.js");function u(e){return e.innerRadius}function s(e){return e.outerRadius}function c(e){return e.startAngle}function a(e){return e.endAngle}function d(e){return e&&e.padAngle}function l(e,t,n,r,o,u,s,c){var a=n-e,d=r-t,l=s-o,f=c-u,h=f*a-l*d;if(!(h*h<i.epsilon))return[e+(h=(l*(t-u)-f*(e-o))/h)*a,t+h*d]}function f(e,t,n,r,o,u,s){var c=e-n,a=t-r,d=(s?u:-u)/Object(i.sqrt)(c*c+a*a),l=d*a,f=-d*c,h=e+l,p=t+f,m=n+l,_=r+f,v=(h+m)/2,g=(p+_)/2,b=m-h,j=_-p,y=b*b+j*j,x=o-u,w=h*_-m*p,O=(j<0?-1:1)*Object(i.sqrt)(Object(i.max)(0,x*x*y-w*w)),M=(w*j-b*O)/y,S=(-w*b-j*O)/y,A=(w*j+b*O)/y,P=(-w*b+j*O)/y,k=M-v,C=S-g,T=A-v,E=P-g;return k*k+C*C>T*T+E*E&&(M=A,S=P),{cx:M,cy:S,x01:-l,y01:-f,x11:M*(o/x-1),y11:S*(o/x-1)}}t.default=function(){var e=u,t=s,n=Object(o.default)(0),h=null,p=c,m=a,_=d,v=null;function g(){var o,u,s=+e.apply(this,arguments),c=+t.apply(this,arguments),a=p.apply(this,arguments)-i.halfPi,d=m.apply(this,arguments)-i.halfPi,g=Object(i.abs)(d-a),b=d>a;if(v||(v=o=Object(r.path)()),c<s&&(u=c,c=s,s=u),c>i.epsilon)if(g>i.tau-i.epsilon)v.moveTo(c*Object(i.cos)(a),c*Object(i.sin)(a)),v.arc(0,0,c,a,d,!b),s>i.epsilon&&(v.moveTo(s*Object(i.cos)(d),s*Object(i.sin)(d)),v.arc(0,0,s,d,a,b));else{var j,y,x=a,w=d,O=a,M=d,S=g,A=g,P=_.apply(this,arguments)/2,k=P>i.epsilon&&(h?+h.apply(this,arguments):Object(i.sqrt)(s*s+c*c)),C=Object(i.min)(Object(i.abs)(c-s)/2,+n.apply(this,arguments)),T=C,E=C;if(k>i.epsilon){var R=Object(i.asin)(k/s*Object(i.sin)(P)),N=Object(i.asin)(k/c*Object(i.sin)(P));(S-=2*R)>i.epsilon?(O+=R*=b?1:-1,M-=R):(S=0,O=M=(a+d)/2),(A-=2*N)>i.epsilon?(x+=N*=b?1:-1,w-=N):(A=0,x=w=(a+d)/2)}var q=c*Object(i.cos)(x),B=c*Object(i.sin)(x),I=s*Object(i.cos)(M),D=s*Object(i.sin)(M);if(C>i.epsilon){var L,z=c*Object(i.cos)(w),F=c*Object(i.sin)(w),U=s*Object(i.cos)(O),Y=s*Object(i.sin)(O);if(g<i.pi&&(L=l(q,B,U,Y,z,F,I,D))){var H=q-L[0],G=B-L[1],W=z-L[0],$=F-L[1],V=1/Object(i.sin)(Object(i.acos)((H*W+G*$)/(Object(i.sqrt)(H*H+G*G)*Object(i.sqrt)(W*W+$*$)))/2),X=Object(i.sqrt)(L[0]*L[0]+L[1]*L[1]);T=Object(i.min)(C,(s-X)/(V-1)),E=Object(i.min)(C,(c-X)/(V+1))}}A>i.epsilon?E>i.epsilon?(j=f(U,Y,q,B,c,E,b),y=f(z,F,I,D,c,E,b),v.moveTo(j.cx+j.x01,j.cy+j.y01),E<C?v.arc(j.cx,j.cy,E,Object(i.atan2)(j.y01,j.x01),Object(i.atan2)(y.y01,y.x01),!b):(v.arc(j.cx,j.cy,E,Object(i.atan2)(j.y01,j.x01),Object(i.atan2)(j.y11,j.x11),!b),v.arc(0,0,c,Object(i.atan2)(j.cy+j.y11,j.cx+j.x11),Object(i.atan2)(y.cy+y.y11,y.cx+y.x11),!b),v.arc(y.cx,y.cy,E,Object(i.atan2)(y.y11,y.x11),Object(i.atan2)(y.y01,y.x01),!b))):(v.moveTo(q,B),v.arc(0,0,c,x,w,!b)):v.moveTo(q,B),s>i.epsilon&&S>i.epsilon?T>i.epsilon?(j=f(I,D,z,F,s,-T,b),y=f(q,B,U,Y,s,-T,b),v.lineTo(j.cx+j.x01,j.cy+j.y01),T<C?v.arc(j.cx,j.cy,T,Object(i.atan2)(j.y01,j.x01),Object(i.atan2)(y.y01,y.x01),!b):(v.arc(j.cx,j.cy,T,Object(i.atan2)(j.y01,j.x01),Object(i.atan2)(j.y11,j.x11),!b),v.arc(0,0,s,Object(i.atan2)(j.cy+j.y11,j.cx+j.x11),Object(i.atan2)(y.cy+y.y11,y.cx+y.x11),b),v.arc(y.cx,y.cy,T,Object(i.atan2)(y.y11,y.x11),Object(i.atan2)(y.y01,y.x01),!b))):v.arc(0,0,s,M,O,b):v.lineTo(I,D)}else v.moveTo(0,0);if(v.closePath(),o)return v=null,o+""||null}return g.centroid=function(){var n=(+e.apply(this,arguments)+ +t.apply(this,arguments))/2,r=(+p.apply(this,arguments)+ +m.apply(this,arguments))/2-i.pi/2;return[Object(i.cos)(r)*n,Object(i.sin)(r)*n]},g.innerRadius=function(t){return arguments.length?(e="function"==typeof t?t:Object(o.default)(+t),g):e},g.outerRadius=function(e){return arguments.length?(t="function"==typeof e?e:Object(o.default)(+e),g):t},g.cornerRadius=function(e){return arguments.length?(n="function"==typeof e?e:Object(o.default)(+e),g):n},g.padRadius=function(e){return arguments.length?(h=null==e?null:"function"==typeof e?e:Object(o.default)(+e),g):h},g.startAngle=function(e){return arguments.length?(p="function"==typeof e?e:Object(o.default)(+e),g):p},g.endAngle=function(e){return arguments.length?(m="function"==typeof e?e:Object(o.default)(+e),g):m},g.padAngle=function(e){return arguments.length?(_="function"==typeof e?e:Object(o.default)(+e),g):_},g.context=function(e){return arguments.length?(v=null==e?null:e,g):v},g}},"./node_modules/d3-shape/src/area.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-path/src/index.js"),o=n("./node_modules/d3-shape/src/constant.js"),i=n("./node_modules/d3-shape/src/curve/linear.js"),u=n("./node_modules/d3-shape/src/line.js"),s=n("./node_modules/d3-shape/src/point.js");t.default=function(){var e=s.x,t=null,n=Object(o.default)(0),c=s.y,a=Object(o.default)(!0),d=null,l=i.default,f=null;function h(o){var i,u,s,h,p,m=o.length,_=!1,v=new Array(m),g=new Array(m);for(null==d&&(f=l(p=Object(r.path)())),i=0;i<=m;++i){if(!(i<m&&a(h=o[i],i,o))===_)if(_=!_)u=i,f.areaStart(),f.lineStart();else{for(f.lineEnd(),f.lineStart(),s=i-1;s>=u;--s)f.point(v[s],g[s]);f.lineEnd(),f.areaEnd()}_&&(v[i]=+e(h,i,o),g[i]=+n(h,i,o),f.point(t?+t(h,i,o):v[i],c?+c(h,i,o):g[i]))}if(p)return f=null,p+""||null}function p(){return Object(u.default)().defined(a).curve(l).context(d)}return h.x=function(n){return arguments.length?(e="function"==typeof n?n:Object(o.default)(+n),t=null,h):e},h.x0=function(t){return arguments.length?(e="function"==typeof t?t:Object(o.default)(+t),h):e},h.x1=function(e){return arguments.length?(t=null==e?null:"function"==typeof e?e:Object(o.default)(+e),h):t},h.y=function(e){return arguments.length?(n="function"==typeof e?e:Object(o.default)(+e),c=null,h):n},h.y0=function(e){return arguments.length?(n="function"==typeof e?e:Object(o.default)(+e),h):n},h.y1=function(e){return arguments.length?(c=null==e?null:"function"==typeof e?e:Object(o.default)(+e),h):c},h.lineX0=h.lineY0=function(){return p().x(e).y(n)},h.lineY1=function(){return p().x(e).y(c)},h.lineX1=function(){return p().x(t).y(n)},h.defined=function(e){return arguments.length?(a="function"==typeof e?e:Object(o.default)(!!e),h):a},h.curve=function(e){return arguments.length?(l=e,null!=d&&(f=l(d)),h):l},h.context=function(e){return arguments.length?(null==e?d=f=null:f=l(d=e),h):d},h}},"./node_modules/d3-shape/src/areaRadial.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-shape/src/curve/radial.js"),o=n("./node_modules/d3-shape/src/area.js"),i=n("./node_modules/d3-shape/src/lineRadial.js");t.default=function(){var e=Object(o.default)().curve(r.curveRadialLinear),t=e.curve,n=e.lineX0,u=e.lineX1,s=e.lineY0,c=e.lineY1;return e.angle=e.x,delete e.x,e.startAngle=e.x0,delete e.x0,e.endAngle=e.x1,delete e.x1,e.radius=e.y,delete e.y,e.innerRadius=e.y0,delete e.y0,e.outerRadius=e.y1,delete e.y1,e.lineStartAngle=function(){return Object(i.lineRadial)(n())},delete e.lineX0,e.lineEndAngle=function(){return Object(i.lineRadial)(u())},delete e.lineX1,e.lineInnerRadius=function(){return Object(i.lineRadial)(s())},delete e.lineY0,e.lineOuterRadius=function(){return Object(i.lineRadial)(c())},delete e.lineY1,e.curve=function(e){return arguments.length?t(Object(r.default)(e)):t()._curve},e}},"./node_modules/d3-shape/src/array.js":function(e,t,n){"use strict";n.r(t),n.d(t,"slice",(function(){return r}));var r=Array.prototype.slice},"./node_modules/d3-shape/src/constant.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return e}}},"./node_modules/d3-shape/src/curve/basis.js":function(e,t,n){"use strict";function r(e,t,n){e._context.bezierCurveTo((2*e._x0+e._x1)/3,(2*e._y0+e._y1)/3,(e._x0+2*e._x1)/3,(e._y0+2*e._y1)/3,(e._x0+4*e._x1+t)/6,(e._y0+4*e._y1+n)/6)}function o(e){this._context=e}n.r(t),n.d(t,"point",(function(){return r})),n.d(t,"Basis",(function(){return o})),o.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:r(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:r(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}},t.default=function(e){return new o(e)}},"./node_modules/d3-shape/src/curve/basisClosed.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-shape/src/noop.js"),o=n("./node_modules/d3-shape/src/curve/basis.js");function i(e){this._context=e}i.prototype={areaStart:r.default,areaEnd:r.default,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._x2=e,this._y2=t;break;case 1:this._point=2,this._x3=e,this._y3=t;break;case 2:this._point=3,this._x4=e,this._y4=t,this._context.moveTo((this._x0+4*this._x1+e)/6,(this._y0+4*this._y1+t)/6);break;default:Object(o.point)(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}},t.default=function(e){return new i(e)}},"./node_modules/d3-shape/src/curve/basisOpen.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-shape/src/curve/basis.js");function o(e){this._context=e}o.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+e)/6,o=(this._y0+4*this._y1+t)/6;this._line?this._context.lineTo(n,o):this._context.moveTo(n,o);break;case 3:this._point=4;default:Object(r.point)(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}},t.default=function(e){return new o(e)}},"./node_modules/d3-shape/src/curve/bundle.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-shape/src/curve/basis.js");function o(e,t){this._basis=new r.Basis(e),this._beta=t}o.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var e=this._x,t=this._y,n=e.length-1;if(n>0)for(var r,o=e[0],i=t[0],u=e[n]-o,s=t[n]-i,c=-1;++c<=n;)r=c/n,this._basis.point(this._beta*e[c]+(1-this._beta)*(o+r*u),this._beta*t[c]+(1-this._beta)*(i+r*s));this._x=this._y=null,this._basis.lineEnd()},point:function(e,t){this._x.push(+e),this._y.push(+t)}},t.default=function e(t){function n(e){return 1===t?new r.Basis(e):new o(e,t)}return n.beta=function(t){return e(+t)},n}(.85)},"./node_modules/d3-shape/src/curve/cardinal.js":function(e,t,n){"use strict";function r(e,t,n){e._context.bezierCurveTo(e._x1+e._k*(e._x2-e._x0),e._y1+e._k*(e._y2-e._y0),e._x2+e._k*(e._x1-t),e._y2+e._k*(e._y1-n),e._x2,e._y2)}function o(e,t){this._context=e,this._k=(1-t)/6}n.r(t),n.d(t,"point",(function(){return r})),n.d(t,"Cardinal",(function(){return o})),o.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:r(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2,this._x1=e,this._y1=t;break;case 2:this._point=3;default:r(this,e,t)}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}},t.default=function e(t){function n(e){return new o(e,t)}return n.tension=function(t){return e(+t)},n}(0)},"./node_modules/d3-shape/src/curve/cardinalClosed.js":function(e,t,n){"use strict";n.r(t),n.d(t,"CardinalClosed",(function(){return i}));var r=n("./node_modules/d3-shape/src/noop.js"),o=n("./node_modules/d3-shape/src/curve/cardinal.js");function i(e,t){this._context=e,this._k=(1-t)/6}i.prototype={areaStart:r.default,areaEnd:r.default,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._x3=e,this._y3=t;break;case 1:this._point=2,this._context.moveTo(this._x4=e,this._y4=t);break;case 2:this._point=3,this._x5=e,this._y5=t;break;default:Object(o.point)(this,e,t)}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}},t.default=function e(t){function n(e){return new i(e,t)}return n.tension=function(t){return e(+t)},n}(0)},"./node_modules/d3-shape/src/curve/cardinalOpen.js":function(e,t,n){"use strict";n.r(t),n.d(t,"CardinalOpen",(function(){return o}));var r=n("./node_modules/d3-shape/src/curve/cardinal.js");function o(e,t){this._context=e,this._k=(1-t)/6}o.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Object(r.point)(this,e,t)}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}},t.default=function e(t){function n(e){return new o(e,t)}return n.tension=function(t){return e(+t)},n}(0)},"./node_modules/d3-shape/src/curve/catmullRom.js":function(e,t,n){"use strict";n.r(t),n.d(t,"point",(function(){return i}));var r=n("./node_modules/d3-shape/src/math.js"),o=n("./node_modules/d3-shape/src/curve/cardinal.js");function i(e,t,n){var o=e._x1,i=e._y1,u=e._x2,s=e._y2;if(e._l01_a>r.epsilon){var c=2*e._l01_2a+3*e._l01_a*e._l12_a+e._l12_2a,a=3*e._l01_a*(e._l01_a+e._l12_a);o=(o*c-e._x0*e._l12_2a+e._x2*e._l01_2a)/a,i=(i*c-e._y0*e._l12_2a+e._y2*e._l01_2a)/a}if(e._l23_a>r.epsilon){var d=2*e._l23_2a+3*e._l23_a*e._l12_a+e._l12_2a,l=3*e._l23_a*(e._l23_a+e._l12_a);u=(u*d+e._x1*e._l23_2a-t*e._l12_2a)/l,s=(s*d+e._y1*e._l23_2a-n*e._l12_2a)/l}e._context.bezierCurveTo(o,i,u,s,e._x2,e._y2)}function u(e,t){this._context=e,this._alpha=t}u.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3;default:i(this,e,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}},t.default=function e(t){function n(e){return t?new u(e,t):new o.Cardinal(e,0)}return n.alpha=function(t){return e(+t)},n}(.5)},"./node_modules/d3-shape/src/curve/catmullRomClosed.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-shape/src/curve/cardinalClosed.js"),o=n("./node_modules/d3-shape/src/noop.js"),i=n("./node_modules/d3-shape/src/curve/catmullRom.js");function u(e,t){this._context=e,this._alpha=t}u.prototype={areaStart:o.default,areaEnd:o.default,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=e,this._y3=t;break;case 1:this._point=2,this._context.moveTo(this._x4=e,this._y4=t);break;case 2:this._point=3,this._x5=e,this._y5=t;break;default:Object(i.point)(this,e,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}},t.default=function e(t){function n(e){return t?new u(e,t):new r.CardinalClosed(e,0)}return n.alpha=function(t){return e(+t)},n}(.5)},"./node_modules/d3-shape/src/curve/catmullRomOpen.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-shape/src/curve/cardinalOpen.js"),o=n("./node_modules/d3-shape/src/curve/catmullRom.js");function i(e,t){this._context=e,this._alpha=t}i.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Object(o.point)(this,e,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}},t.default=function e(t){function n(e){return t?new i(e,t):new r.CardinalOpen(e,0)}return n.alpha=function(t){return e(+t)},n}(.5)},"./node_modules/d3-shape/src/curve/linear.js":function(e,t,n){"use strict";function r(e){this._context=e}n.r(t),r.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:this._context.lineTo(e,t)}}},t.default=function(e){return new r(e)}},"./node_modules/d3-shape/src/curve/linearClosed.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-shape/src/noop.js");function o(e){this._context=e}o.prototype={areaStart:r.default,areaEnd:r.default,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(e,t){e=+e,t=+t,this._point?this._context.lineTo(e,t):(this._point=1,this._context.moveTo(e,t))}},t.default=function(e){return new o(e)}},"./node_modules/d3-shape/src/curve/monotone.js":function(e,t,n){"use strict";function r(e){return e<0?-1:1}function o(e,t,n){var o=e._x1-e._x0,i=t-e._x1,u=(e._y1-e._y0)/(o||i<0&&-0),s=(n-e._y1)/(i||o<0&&-0),c=(u*i+s*o)/(o+i);return(r(u)+r(s))*Math.min(Math.abs(u),Math.abs(s),.5*Math.abs(c))||0}function i(e,t){var n=e._x1-e._x0;return n?(3*(e._y1-e._y0)/n-t)/2:t}function u(e,t,n){var r=e._x0,o=e._y0,i=e._x1,u=e._y1,s=(i-r)/3;e._context.bezierCurveTo(r+s,o+s*t,i-s,u-s*n,i,u)}function s(e){this._context=e}function c(e){this._context=new a(e)}function a(e){this._context=e}function d(e){return new s(e)}function l(e){return new c(e)}n.r(t),n.d(t,"monotoneX",(function(){return d})),n.d(t,"monotoneY",(function(){return l})),s.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:u(this,this._t0,i(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){var n=NaN;if(t=+t,(e=+e)!==this._x1||t!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,u(this,i(this,n=o(this,e,t)),n);break;default:u(this,this._t0,n=o(this,e,t))}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t,this._t0=n}}},(c.prototype=Object.create(s.prototype)).point=function(e,t){s.prototype.point.call(this,t,e)},a.prototype={moveTo:function(e,t){this._context.moveTo(t,e)},closePath:function(){this._context.closePath()},lineTo:function(e,t){this._context.lineTo(t,e)},bezierCurveTo:function(e,t,n,r,o,i){this._context.bezierCurveTo(t,e,r,n,i,o)}}},"./node_modules/d3-shape/src/curve/natural.js":function(e,t,n){"use strict";function r(e){this._context=e}function o(e){var t,n,r=e.length-1,o=new Array(r),i=new Array(r),u=new Array(r);for(o[0]=0,i[0]=2,u[0]=e[0]+2*e[1],t=1;t<r-1;++t)o[t]=1,i[t]=4,u[t]=4*e[t]+2*e[t+1];for(o[r-1]=2,i[r-1]=7,u[r-1]=8*e[r-1]+e[r],t=1;t<r;++t)n=o[t]/i[t-1],i[t]-=n,u[t]-=n*u[t-1];for(o[r-1]=u[r-1]/i[r-1],t=r-2;t>=0;--t)o[t]=(u[t]-o[t+1])/i[t];for(i[r-1]=(e[r]+o[r-1])/2,t=0;t<r-1;++t)i[t]=2*e[t+1]-o[t+1];return[o,i]}n.r(t),r.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var e=this._x,t=this._y,n=e.length;if(n)if(this._line?this._context.lineTo(e[0],t[0]):this._context.moveTo(e[0],t[0]),2===n)this._context.lineTo(e[1],t[1]);else for(var r=o(e),i=o(t),u=0,s=1;s<n;++u,++s)this._context.bezierCurveTo(r[0][u],i[0][u],r[1][u],i[1][u],e[s],t[s]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(e,t){this._x.push(+e),this._y.push(+t)}},t.default=function(e){return new r(e)}},"./node_modules/d3-shape/src/curve/radial.js":function(e,t,n){"use strict";n.r(t),n.d(t,"curveRadialLinear",(function(){return r})),n.d(t,"default",(function(){return i}));var r=i(n("./node_modules/d3-shape/src/curve/linear.js").default);function o(e){this._curve=e}function i(e){function t(t){return new o(e(t))}return t._curve=e,t}o.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(e,t){this._curve.point(t*Math.sin(e),t*-Math.cos(e))}}},"./node_modules/d3-shape/src/curve/step.js":function(e,t,n){"use strict";function r(e,t){this._context=e,this._t=t}function o(e){return new r(e,0)}function i(e){return new r(e,1)}n.r(t),n.d(t,"stepBefore",(function(){return o})),n.d(t,"stepAfter",(function(){return i})),r.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,t),this._context.lineTo(e,t);else{var n=this._x*(1-this._t)+e*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,t)}}this._x=e,this._y=t}},t.default=function(e){return new r(e,.5)}},"./node_modules/d3-shape/src/descending.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){return t<e?-1:t>e?1:t>=e?0:NaN}},"./node_modules/d3-shape/src/identity.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return e}},"./node_modules/d3-shape/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-shape/src/arc.js");n.d(t,"arc",(function(){return r.default}));var o=n("./node_modules/d3-shape/src/area.js");n.d(t,"area",(function(){return o.default}));var i=n("./node_modules/d3-shape/src/line.js");n.d(t,"line",(function(){return i.default}));var u=n("./node_modules/d3-shape/src/pie.js");n.d(t,"pie",(function(){return u.default}));var s=n("./node_modules/d3-shape/src/areaRadial.js");n.d(t,"areaRadial",(function(){return s.default})),n.d(t,"radialArea",(function(){return s.default}));var c=n("./node_modules/d3-shape/src/lineRadial.js");n.d(t,"lineRadial",(function(){return c.default})),n.d(t,"radialLine",(function(){return c.default}));var a=n("./node_modules/d3-shape/src/pointRadial.js");n.d(t,"pointRadial",(function(){return a.default}));var d=n("./node_modules/d3-shape/src/link/index.js");n.d(t,"linkHorizontal",(function(){return d.linkHorizontal})),n.d(t,"linkVertical",(function(){return d.linkVertical})),n.d(t,"linkRadial",(function(){return d.linkRadial}));var l=n("./node_modules/d3-shape/src/symbol.js");n.d(t,"symbol",(function(){return l.default})),n.d(t,"symbols",(function(){return l.symbols}));var f=n("./node_modules/d3-shape/src/symbol/circle.js");n.d(t,"symbolCircle",(function(){return f.default}));var h=n("./node_modules/d3-shape/src/symbol/cross.js");n.d(t,"symbolCross",(function(){return h.default}));var p=n("./node_modules/d3-shape/src/symbol/diamond.js");n.d(t,"symbolDiamond",(function(){return p.default}));var m=n("./node_modules/d3-shape/src/symbol/square.js");n.d(t,"symbolSquare",(function(){return m.default}));var _=n("./node_modules/d3-shape/src/symbol/star.js");n.d(t,"symbolStar",(function(){return _.default}));var v=n("./node_modules/d3-shape/src/symbol/triangle.js");n.d(t,"symbolTriangle",(function(){return v.default}));var g=n("./node_modules/d3-shape/src/symbol/wye.js");n.d(t,"symbolWye",(function(){return g.default}));var b=n("./node_modules/d3-shape/src/curve/basisClosed.js");n.d(t,"curveBasisClosed",(function(){return b.default}));var j=n("./node_modules/d3-shape/src/curve/basisOpen.js");n.d(t,"curveBasisOpen",(function(){return j.default}));var y=n("./node_modules/d3-shape/src/curve/basis.js");n.d(t,"curveBasis",(function(){return y.default}));var x=n("./node_modules/d3-shape/src/curve/bundle.js");n.d(t,"curveBundle",(function(){return x.default}));var w=n("./node_modules/d3-shape/src/curve/cardinalClosed.js");n.d(t,"curveCardinalClosed",(function(){return w.default}));var O=n("./node_modules/d3-shape/src/curve/cardinalOpen.js");n.d(t,"curveCardinalOpen",(function(){return O.default}));var M=n("./node_modules/d3-shape/src/curve/cardinal.js");n.d(t,"curveCardinal",(function(){return M.default}));var S=n("./node_modules/d3-shape/src/curve/catmullRomClosed.js");n.d(t,"curveCatmullRomClosed",(function(){return S.default}));var A=n("./node_modules/d3-shape/src/curve/catmullRomOpen.js");n.d(t,"curveCatmullRomOpen",(function(){return A.default}));var P=n("./node_modules/d3-shape/src/curve/catmullRom.js");n.d(t,"curveCatmullRom",(function(){return P.default}));var k=n("./node_modules/d3-shape/src/curve/linearClosed.js");n.d(t,"curveLinearClosed",(function(){return k.default}));var C=n("./node_modules/d3-shape/src/curve/linear.js");n.d(t,"curveLinear",(function(){return C.default}));var T=n("./node_modules/d3-shape/src/curve/monotone.js");n.d(t,"curveMonotoneX",(function(){return T.monotoneX})),n.d(t,"curveMonotoneY",(function(){return T.monotoneY}));var E=n("./node_modules/d3-shape/src/curve/natural.js");n.d(t,"curveNatural",(function(){return E.default}));var R=n("./node_modules/d3-shape/src/curve/step.js");n.d(t,"curveStep",(function(){return R.default})),n.d(t,"curveStepAfter",(function(){return R.stepAfter})),n.d(t,"curveStepBefore",(function(){return R.stepBefore}));var N=n("./node_modules/d3-shape/src/stack.js");n.d(t,"stack",(function(){return N.default}));var q=n("./node_modules/d3-shape/src/offset/expand.js");n.d(t,"stackOffsetExpand",(function(){return q.default}));var B=n("./node_modules/d3-shape/src/offset/diverging.js");n.d(t,"stackOffsetDiverging",(function(){return B.default}));var I=n("./node_modules/d3-shape/src/offset/none.js");n.d(t,"stackOffsetNone",(function(){return I.default}));var D=n("./node_modules/d3-shape/src/offset/silhouette.js");n.d(t,"stackOffsetSilhouette",(function(){return D.default}));var L=n("./node_modules/d3-shape/src/offset/wiggle.js");n.d(t,"stackOffsetWiggle",(function(){return L.default}));var z=n("./node_modules/d3-shape/src/order/appearance.js");n.d(t,"stackOrderAppearance",(function(){return z.default}));var F=n("./node_modules/d3-shape/src/order/ascending.js");n.d(t,"stackOrderAscending",(function(){return F.default}));var U=n("./node_modules/d3-shape/src/order/descending.js");n.d(t,"stackOrderDescending",(function(){return U.default}));var Y=n("./node_modules/d3-shape/src/order/insideOut.js");n.d(t,"stackOrderInsideOut",(function(){return Y.default}));var H=n("./node_modules/d3-shape/src/order/none.js");n.d(t,"stackOrderNone",(function(){return H.default}));var G=n("./node_modules/d3-shape/src/order/reverse.js");n.d(t,"stackOrderReverse",(function(){return G.default}))},"./node_modules/d3-shape/src/line.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-path/src/index.js"),o=n("./node_modules/d3-shape/src/constant.js"),i=n("./node_modules/d3-shape/src/curve/linear.js"),u=n("./node_modules/d3-shape/src/point.js");t.default=function(){var e=u.x,t=u.y,n=Object(o.default)(!0),s=null,c=i.default,a=null;function d(o){var i,u,d,l=o.length,f=!1;for(null==s&&(a=c(d=Object(r.path)())),i=0;i<=l;++i)!(i<l&&n(u=o[i],i,o))===f&&((f=!f)?a.lineStart():a.lineEnd()),f&&a.point(+e(u,i,o),+t(u,i,o));if(d)return a=null,d+""||null}return d.x=function(t){return arguments.length?(e="function"==typeof t?t:Object(o.default)(+t),d):e},d.y=function(e){return arguments.length?(t="function"==typeof e?e:Object(o.default)(+e),d):t},d.defined=function(e){return arguments.length?(n="function"==typeof e?e:Object(o.default)(!!e),d):n},d.curve=function(e){return arguments.length?(c=e,null!=s&&(a=c(s)),d):c},d.context=function(e){return arguments.length?(null==e?s=a=null:a=c(s=e),d):s},d}},"./node_modules/d3-shape/src/lineRadial.js":function(e,t,n){"use strict";n.r(t),n.d(t,"lineRadial",(function(){return i}));var r=n("./node_modules/d3-shape/src/curve/radial.js"),o=n("./node_modules/d3-shape/src/line.js");function i(e){var t=e.curve;return e.angle=e.x,delete e.x,e.radius=e.y,delete e.y,e.curve=function(e){return arguments.length?t(Object(r.default)(e)):t()._curve},e}t.default=function(){return i(Object(o.default)().curve(r.curveRadialLinear))}},"./node_modules/d3-shape/src/link/index.js":function(e,t,n){"use strict";n.r(t),n.d(t,"linkHorizontal",(function(){return p})),n.d(t,"linkVertical",(function(){return m})),n.d(t,"linkRadial",(function(){return _}));var r=n("./node_modules/d3-path/src/index.js"),o=n("./node_modules/d3-shape/src/array.js"),i=n("./node_modules/d3-shape/src/constant.js"),u=n("./node_modules/d3-shape/src/point.js"),s=n("./node_modules/d3-shape/src/pointRadial.js");function c(e){return e.source}function a(e){return e.target}function d(e){var t=c,n=a,s=u.x,d=u.y,l=null;function f(){var i,u=o.slice.call(arguments),c=t.apply(this,u),a=n.apply(this,u);if(l||(l=i=Object(r.path)()),e(l,+s.apply(this,(u[0]=c,u)),+d.apply(this,u),+s.apply(this,(u[0]=a,u)),+d.apply(this,u)),i)return l=null,i+""||null}return f.source=function(e){return arguments.length?(t=e,f):t},f.target=function(e){return arguments.length?(n=e,f):n},f.x=function(e){return arguments.length?(s="function"==typeof e?e:Object(i.default)(+e),f):s},f.y=function(e){return arguments.length?(d="function"==typeof e?e:Object(i.default)(+e),f):d},f.context=function(e){return arguments.length?(l=null==e?null:e,f):l},f}function l(e,t,n,r,o){e.moveTo(t,n),e.bezierCurveTo(t=(t+r)/2,n,t,o,r,o)}function f(e,t,n,r,o){e.moveTo(t,n),e.bezierCurveTo(t,n=(n+o)/2,r,n,r,o)}function h(e,t,n,r,o){var i=Object(s.default)(t,n),u=Object(s.default)(t,n=(n+o)/2),c=Object(s.default)(r,n),a=Object(s.default)(r,o);e.moveTo(i[0],i[1]),e.bezierCurveTo(u[0],u[1],c[0],c[1],a[0],a[1])}function p(){return d(l)}function m(){return d(f)}function _(){var e=d(h);return e.angle=e.x,delete e.x,e.radius=e.y,delete e.y,e}},"./node_modules/d3-shape/src/math.js":function(e,t,n){"use strict";n.r(t),n.d(t,"abs",(function(){return r})),n.d(t,"atan2",(function(){return o})),n.d(t,"cos",(function(){return i})),n.d(t,"max",(function(){return u})),n.d(t,"min",(function(){return s})),n.d(t,"sin",(function(){return c})),n.d(t,"sqrt",(function(){return a})),n.d(t,"epsilon",(function(){return d})),n.d(t,"pi",(function(){return l})),n.d(t,"halfPi",(function(){return f})),n.d(t,"tau",(function(){return h})),n.d(t,"acos",(function(){return p})),n.d(t,"asin",(function(){return m}));var r=Math.abs,o=Math.atan2,i=Math.cos,u=Math.max,s=Math.min,c=Math.sin,a=Math.sqrt,d=1e-12,l=Math.PI,f=l/2,h=2*l;function p(e){return e>1?0:e<-1?l:Math.acos(e)}function m(e){return e>=1?f:e<=-1?-f:Math.asin(e)}},"./node_modules/d3-shape/src/noop.js":function(e,t,n){"use strict";n.r(t),t.default=function(){}},"./node_modules/d3-shape/src/offset/diverging.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){if((s=e.length)>0)for(var n,r,o,i,u,s,c=0,a=e[t[0]].length;c<a;++c)for(i=u=0,n=0;n<s;++n)(o=(r=e[t[n]][c])[1]-r[0])>0?(r[0]=i,r[1]=i+=o):o<0?(r[1]=u,r[0]=u+=o):(r[0]=0,r[1]=o)}},"./node_modules/d3-shape/src/offset/expand.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-shape/src/offset/none.js");t.default=function(e,t){if((o=e.length)>0){for(var n,o,i,u=0,s=e[0].length;u<s;++u){for(i=n=0;n<o;++n)i+=e[n][u][1]||0;if(i)for(n=0;n<o;++n)e[n][u][1]/=i}Object(r.default)(e,t)}}},"./node_modules/d3-shape/src/offset/none.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){if((o=e.length)>1)for(var n,r,o,i=1,u=e[t[0]],s=u.length;i<o;++i)for(r=u,u=e[t[i]],n=0;n<s;++n)u[n][1]+=u[n][0]=isNaN(r[n][1])?r[n][0]:r[n][1]}},"./node_modules/d3-shape/src/offset/silhouette.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-shape/src/offset/none.js");t.default=function(e,t){if((n=e.length)>0){for(var n,o=0,i=e[t[0]],u=i.length;o<u;++o){for(var s=0,c=0;s<n;++s)c+=e[s][o][1]||0;i[o][1]+=i[o][0]=-c/2}Object(r.default)(e,t)}}},"./node_modules/d3-shape/src/offset/wiggle.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-shape/src/offset/none.js");t.default=function(e,t){if((i=e.length)>0&&(o=(n=e[t[0]]).length)>0){for(var n,o,i,u=0,s=1;s<o;++s){for(var c=0,a=0,d=0;c<i;++c){for(var l=e[t[c]],f=l[s][1]||0,h=(f-(l[s-1][1]||0))/2,p=0;p<c;++p){var m=e[t[p]];h+=(m[s][1]||0)-(m[s-1][1]||0)}a+=f,d+=h*f}n[s-1][1]+=n[s-1][0]=u,a&&(u-=d/a)}n[s-1][1]+=n[s-1][0]=u,Object(r.default)(e,t)}}},"./node_modules/d3-shape/src/order/appearance.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-shape/src/order/none.js");function o(e){for(var t,n=-1,r=0,o=e.length,i=-1/0;++n<o;)(t=+e[n][1])>i&&(i=t,r=n);return r}t.default=function(e){var t=e.map(o);return Object(r.default)(e).sort((function(e,n){return t[e]-t[n]}))}},"./node_modules/d3-shape/src/order/ascending.js":function(e,t,n){"use strict";n.r(t),n.d(t,"sum",(function(){return o}));var r=n("./node_modules/d3-shape/src/order/none.js");function o(e){for(var t,n=0,r=-1,o=e.length;++r<o;)(t=+e[r][1])&&(n+=t);return n}t.default=function(e){var t=e.map(o);return Object(r.default)(e).sort((function(e,n){return t[e]-t[n]}))}},"./node_modules/d3-shape/src/order/descending.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-shape/src/order/ascending.js");t.default=function(e){return Object(r.default)(e).reverse()}},"./node_modules/d3-shape/src/order/insideOut.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-shape/src/order/appearance.js"),o=n("./node_modules/d3-shape/src/order/ascending.js");t.default=function(e){var t,n,i=e.length,u=e.map(o.sum),s=Object(r.default)(e),c=0,a=0,d=[],l=[];for(t=0;t<i;++t)n=s[t],c<a?(c+=u[n],d.push(n)):(a+=u[n],l.push(n));return l.reverse().concat(d)}},"./node_modules/d3-shape/src/order/none.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){for(var t=e.length,n=new Array(t);--t>=0;)n[t]=t;return n}},"./node_modules/d3-shape/src/order/reverse.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-shape/src/order/none.js");t.default=function(e){return Object(r.default)(e).reverse()}},"./node_modules/d3-shape/src/pie.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-shape/src/constant.js"),o=n("./node_modules/d3-shape/src/descending.js"),i=n("./node_modules/d3-shape/src/identity.js"),u=n("./node_modules/d3-shape/src/math.js");t.default=function(){var e=i.default,t=o.default,n=null,s=Object(r.default)(0),c=Object(r.default)(u.tau),a=Object(r.default)(0);function d(r){var o,i,d,l,f,h=r.length,p=0,m=new Array(h),_=new Array(h),v=+s.apply(this,arguments),g=Math.min(u.tau,Math.max(-u.tau,c.apply(this,arguments)-v)),b=Math.min(Math.abs(g)/h,a.apply(this,arguments)),j=b*(g<0?-1:1);for(o=0;o<h;++o)(f=_[m[o]=o]=+e(r[o],o,r))>0&&(p+=f);for(null!=t?m.sort((function(e,n){return t(_[e],_[n])})):null!=n&&m.sort((function(e,t){return n(r[e],r[t])})),o=0,d=p?(g-h*j)/p:0;o<h;++o,v=l)i=m[o],l=v+((f=_[i])>0?f*d:0)+j,_[i]={data:r[i],index:o,value:f,startAngle:v,endAngle:l,padAngle:b};return _}return d.value=function(t){return arguments.length?(e="function"==typeof t?t:Object(r.default)(+t),d):e},d.sortValues=function(e){return arguments.length?(t=e,n=null,d):t},d.sort=function(e){return arguments.length?(n=e,t=null,d):n},d.startAngle=function(e){return arguments.length?(s="function"==typeof e?e:Object(r.default)(+e),d):s},d.endAngle=function(e){return arguments.length?(c="function"==typeof e?e:Object(r.default)(+e),d):c},d.padAngle=function(e){return arguments.length?(a="function"==typeof e?e:Object(r.default)(+e),d):a},d}},"./node_modules/d3-shape/src/point.js":function(e,t,n){"use strict";function r(e){return e[0]}function o(e){return e[1]}n.r(t),n.d(t,"x",(function(){return r})),n.d(t,"y",(function(){return o}))},"./node_modules/d3-shape/src/pointRadial.js":function(e,t,n){"use strict";n.r(t),t.default=function(e,t){return[(t=+t)*Math.cos(e-=Math.PI/2),t*Math.sin(e)]}},"./node_modules/d3-shape/src/stack.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-shape/src/array.js"),o=n("./node_modules/d3-shape/src/constant.js"),i=n("./node_modules/d3-shape/src/offset/none.js"),u=n("./node_modules/d3-shape/src/order/none.js");function s(e,t){return e[t]}t.default=function(){var e=Object(o.default)([]),t=u.default,n=i.default,c=s;function a(r){var o,i,u=e.apply(this,arguments),s=r.length,a=u.length,d=new Array(a);for(o=0;o<a;++o){for(var l,f=u[o],h=d[o]=new Array(s),p=0;p<s;++p)h[p]=l=[0,+c(r[p],f,p,r)],l.data=r[p];h.key=f}for(o=0,i=t(d);o<a;++o)d[i[o]].index=o;return n(d,i),d}return a.keys=function(t){return arguments.length?(e="function"==typeof t?t:Object(o.default)(r.slice.call(t)),a):e},a.value=function(e){return arguments.length?(c="function"==typeof e?e:Object(o.default)(+e),a):c},a.order=function(e){return arguments.length?(t=null==e?u.default:"function"==typeof e?e:Object(o.default)(r.slice.call(e)),a):t},a.offset=function(e){return arguments.length?(n=null==e?i.default:e,a):n},a}},"./node_modules/d3-shape/src/symbol.js":function(e,t,n){"use strict";n.r(t),n.d(t,"symbols",(function(){return f}));var r=n("./node_modules/d3-path/src/index.js"),o=n("./node_modules/d3-shape/src/symbol/circle.js"),i=n("./node_modules/d3-shape/src/symbol/cross.js"),u=n("./node_modules/d3-shape/src/symbol/diamond.js"),s=n("./node_modules/d3-shape/src/symbol/star.js"),c=n("./node_modules/d3-shape/src/symbol/square.js"),a=n("./node_modules/d3-shape/src/symbol/triangle.js"),d=n("./node_modules/d3-shape/src/symbol/wye.js"),l=n("./node_modules/d3-shape/src/constant.js"),f=[o.default,i.default,u.default,c.default,s.default,a.default,d.default];t.default=function(){var e=Object(l.default)(o.default),t=Object(l.default)(64),n=null;function i(){var o;if(n||(n=o=Object(r.path)()),e.apply(this,arguments).draw(n,+t.apply(this,arguments)),o)return n=null,o+""||null}return i.type=function(t){return arguments.length?(e="function"==typeof t?t:Object(l.default)(t),i):e},i.size=function(e){return arguments.length?(t="function"==typeof e?e:Object(l.default)(+e),i):t},i.context=function(e){return arguments.length?(n=null==e?null:e,i):n},i}},"./node_modules/d3-shape/src/symbol/circle.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-shape/src/math.js");t.default={draw:function(e,t){var n=Math.sqrt(t/r.pi);e.moveTo(n,0),e.arc(0,0,n,0,r.tau)}}},"./node_modules/d3-shape/src/symbol/cross.js":function(e,t,n){"use strict";n.r(t),t.default={draw:function(e,t){var n=Math.sqrt(t/5)/2;e.moveTo(-3*n,-n),e.lineTo(-n,-n),e.lineTo(-n,-3*n),e.lineTo(n,-3*n),e.lineTo(n,-n),e.lineTo(3*n,-n),e.lineTo(3*n,n),e.lineTo(n,n),e.lineTo(n,3*n),e.lineTo(-n,3*n),e.lineTo(-n,n),e.lineTo(-3*n,n),e.closePath()}}},"./node_modules/d3-shape/src/symbol/diamond.js":function(e,t,n){"use strict";n.r(t);var r=Math.sqrt(1/3),o=2*r;t.default={draw:function(e,t){var n=Math.sqrt(t/o),i=n*r;e.moveTo(0,-n),e.lineTo(i,0),e.lineTo(0,n),e.lineTo(-i,0),e.closePath()}}},"./node_modules/d3-shape/src/symbol/square.js":function(e,t,n){"use strict";n.r(t),t.default={draw:function(e,t){var n=Math.sqrt(t),r=-n/2;e.rect(r,r,n,n)}}},"./node_modules/d3-shape/src/symbol/star.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-shape/src/math.js"),o=Math.sin(r.pi/10)/Math.sin(7*r.pi/10),i=Math.sin(r.tau/10)*o,u=-Math.cos(r.tau/10)*o;t.default={draw:function(e,t){var n=Math.sqrt(.8908130915292852*t),o=i*n,s=u*n;e.moveTo(0,-n),e.lineTo(o,s);for(var c=1;c<5;++c){var a=r.tau*c/5,d=Math.cos(a),l=Math.sin(a);e.lineTo(l*n,-d*n),e.lineTo(d*o-l*s,l*o+d*s)}e.closePath()}}},"./node_modules/d3-shape/src/symbol/triangle.js":function(e,t,n){"use strict";n.r(t);var r=Math.sqrt(3);t.default={draw:function(e,t){var n=-Math.sqrt(t/(3*r));e.moveTo(0,2*n),e.lineTo(-r*n,-n),e.lineTo(r*n,-n),e.closePath()}}},"./node_modules/d3-shape/src/symbol/wye.js":function(e,t,n){"use strict";n.r(t);var r=-.5,o=Math.sqrt(3)/2,i=1/Math.sqrt(12),u=3*(i/2+1);t.default={draw:function(e,t){var n=Math.sqrt(t/u),s=n/2,c=n*i,a=s,d=n*i+n,l=-a,f=d;e.moveTo(s,c),e.lineTo(a,d),e.lineTo(l,f),e.lineTo(r*s-o*c,o*s+r*c),e.lineTo(r*a-o*d,o*a+r*d),e.lineTo(r*l-o*f,o*l+r*f),e.lineTo(r*s+o*c,r*c-o*s),e.lineTo(r*a+o*d,r*d-o*a),e.lineTo(r*l+o*f,r*f-o*l),e.closePath()}}},"./node_modules/d3-time-format/src/defaultLocale.js":function(e,t,n){"use strict";n.r(t),n.d(t,"timeFormat",(function(){return o})),n.d(t,"timeParse",(function(){return i})),n.d(t,"utcFormat",(function(){return u})),n.d(t,"utcParse",(function(){return s})),n.d(t,"default",(function(){return a}));var r,o,i,u,s,c=n("./node_modules/d3-time-format/src/locale.js");function a(e){return r=Object(c.default)(e),o=r.format,i=r.parse,u=r.utcFormat,s=r.utcParse,r}a({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]})},"./node_modules/d3-time-format/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-time-format/src/defaultLocale.js");n.d(t,"timeFormatDefaultLocale",(function(){return r.default})),n.d(t,"timeFormat",(function(){return r.timeFormat})),n.d(t,"timeParse",(function(){return r.timeParse})),n.d(t,"utcFormat",(function(){return r.utcFormat})),n.d(t,"utcParse",(function(){return r.utcParse}));var o=n("./node_modules/d3-time-format/src/locale.js");n.d(t,"timeFormatLocale",(function(){return o.default}));var i=n("./node_modules/d3-time-format/src/isoFormat.js");n.d(t,"isoFormat",(function(){return i.default}));var u=n("./node_modules/d3-time-format/src/isoParse.js");n.d(t,"isoParse",(function(){return u.default}))},"./node_modules/d3-time-format/src/isoFormat.js":function(e,t,n){"use strict";n.r(t),n.d(t,"isoSpecifier",(function(){return o}));var r=n("./node_modules/d3-time-format/src/defaultLocale.js"),o="%Y-%m-%dT%H:%M:%S.%LZ";var i=Date.prototype.toISOString?function(e){return e.toISOString()}:Object(r.utcFormat)(o);t.default=i},"./node_modules/d3-time-format/src/isoParse.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-time-format/src/isoFormat.js"),o=n("./node_modules/d3-time-format/src/defaultLocale.js");var i=+new Date("2000-01-01T00:00:00.000Z")?function(e){var t=new Date(e);return isNaN(t)?null:t}:Object(o.utcParse)(r.isoSpecifier);t.default=i},"./node_modules/d3-time-format/src/locale.js":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return s}));var r=n("./node_modules/d3-time/src/index.js");function o(e){if(0<=e.y&&e.y<100){var t=new Date(-1,e.m,e.d,e.H,e.M,e.S,e.L);return t.setFullYear(e.y),t}return new Date(e.y,e.m,e.d,e.H,e.M,e.S,e.L)}function i(e){if(0<=e.y&&e.y<100){var t=new Date(Date.UTC(-1,e.m,e.d,e.H,e.M,e.S,e.L));return t.setUTCFullYear(e.y),t}return new Date(Date.UTC(e.y,e.m,e.d,e.H,e.M,e.S,e.L))}function u(e,t,n){return{y:e,m:t,d:n,H:0,M:0,S:0,L:0}}function s(e){var t=e.dateTime,n=e.date,s=e.time,a=e.periods,d=e.days,l=e.shortDays,f=e.months,h=e.shortMonths,be=p(a),je=m(a),ye=p(d),xe=m(d),we=p(l),Oe=m(l),Me=p(f),Se=m(f),Ae=p(h),Pe=m(h),ke={a:function(e){return l[e.getDay()]},A:function(e){return d[e.getDay()]},b:function(e){return h[e.getMonth()]},B:function(e){return f[e.getMonth()]},c:null,d:B,e:B,f:F,H:I,I:D,j:L,L:z,m:U,M:Y,p:function(e){return a[+(e.getHours()>=12)]},q:function(e){return 1+~~(e.getMonth()/3)},Q:ve,s:ge,S:H,u:G,U:W,V:$,w:V,W:X,x:null,X:null,y:Z,Y:Q,Z:K,"%":_e},Ce={a:function(e){return l[e.getUTCDay()]},A:function(e){return d[e.getUTCDay()]},b:function(e){return h[e.getUTCMonth()]},B:function(e){return f[e.getUTCMonth()]},c:null,d:J,e:J,f:oe,H:ee,I:te,j:ne,L:re,m:ie,M:ue,p:function(e){return a[+(e.getUTCHours()>=12)]},q:function(e){return 1+~~(e.getUTCMonth()/3)},Q:ve,s:ge,S:se,u:ce,U:ae,V:de,w:le,W:fe,x:null,X:null,y:he,Y:pe,Z:me,"%":_e},Te={a:function(e,t,n){var r=we.exec(t.slice(n));return r?(e.w=Oe[r[0].toLowerCase()],n+r[0].length):-1},A:function(e,t,n){var r=ye.exec(t.slice(n));return r?(e.w=xe[r[0].toLowerCase()],n+r[0].length):-1},b:function(e,t,n){var r=Ae.exec(t.slice(n));return r?(e.m=Pe[r[0].toLowerCase()],n+r[0].length):-1},B:function(e,t,n){var r=Me.exec(t.slice(n));return r?(e.m=Se[r[0].toLowerCase()],n+r[0].length):-1},c:function(e,n,r){return Ne(e,t,n,r)},d:S,e:S,f:E,H:P,I:P,j:A,L:T,m:M,M:k,p:function(e,t,n){var r=be.exec(t.slice(n));return r?(e.p=je[r[0].toLowerCase()],n+r[0].length):-1},q:O,Q:N,s:q,S:C,u:v,U:g,V:b,w:_,W:j,x:function(e,t,r){return Ne(e,n,t,r)},X:function(e,t,n){return Ne(e,s,t,n)},y:x,Y:y,Z:w,"%":R};function Ee(e,t){return function(n){var r,o,i,u=[],s=-1,a=0,d=e.length;for(n instanceof Date||(n=new Date(+n));++s<d;)37===e.charCodeAt(s)&&(u.push(e.slice(a,s)),null!=(o=c[r=e.charAt(++s)])?r=e.charAt(++s):o="e"===r?" ":"0",(i=t[r])&&(r=i(n,o)),u.push(r),a=s+1);return u.push(e.slice(a,s)),u.join("")}}function Re(e,t){return function(n){var s,c,a=u(1900,void 0,1);if(Ne(a,e,n+="",0)!=n.length)return null;if("Q"in a)return new Date(a.Q);if("s"in a)return new Date(1e3*a.s+("L"in a?a.L:0));if(t&&!("Z"in a)&&(a.Z=0),"p"in a&&(a.H=a.H%12+12*a.p),void 0===a.m&&(a.m="q"in a?a.q:0),"V"in a){if(a.V<1||a.V>53)return null;"w"in a||(a.w=1),"Z"in a?(c=(s=i(u(a.y,0,1))).getUTCDay(),s=c>4||0===c?r.utcMonday.ceil(s):Object(r.utcMonday)(s),s=r.utcDay.offset(s,7*(a.V-1)),a.y=s.getUTCFullYear(),a.m=s.getUTCMonth(),a.d=s.getUTCDate()+(a.w+6)%7):(c=(s=o(u(a.y,0,1))).getDay(),s=c>4||0===c?r.timeMonday.ceil(s):Object(r.timeMonday)(s),s=r.timeDay.offset(s,7*(a.V-1)),a.y=s.getFullYear(),a.m=s.getMonth(),a.d=s.getDate()+(a.w+6)%7)}else("W"in a||"U"in a)&&("w"in a||(a.w="u"in a?a.u%7:"W"in a?1:0),c="Z"in a?i(u(a.y,0,1)).getUTCDay():o(u(a.y,0,1)).getDay(),a.m=0,a.d="W"in a?(a.w+6)%7+7*a.W-(c+5)%7:a.w+7*a.U-(c+6)%7);return"Z"in a?(a.H+=a.Z/100|0,a.M+=a.Z%100,i(a)):o(a)}}function Ne(e,t,n,r){for(var o,i,u=0,s=t.length,a=n.length;u<s;){if(r>=a)return-1;if(37===(o=t.charCodeAt(u++))){if(o=t.charAt(u++),!(i=Te[o in c?t.charAt(u++):o])||(r=i(e,n,r))<0)return-1}else if(o!=n.charCodeAt(r++))return-1}return r}return ke.x=Ee(n,ke),ke.X=Ee(s,ke),ke.c=Ee(t,ke),Ce.x=Ee(n,Ce),Ce.X=Ee(s,Ce),Ce.c=Ee(t,Ce),{format:function(e){var t=Ee(e+="",ke);return t.toString=function(){return e},t},parse:function(e){var t=Re(e+="",!1);return t.toString=function(){return e},t},utcFormat:function(e){var t=Ee(e+="",Ce);return t.toString=function(){return e},t},utcParse:function(e){var t=Re(e+="",!0);return t.toString=function(){return e},t}}}var c={"-":"",_:" ",0:"0"},a=/^\s*\d+/,d=/^%/,l=/[\\^$*+?|[\]().{}]/g;function f(e,t,n){var r=e<0?"-":"",o=(r?-e:e)+"",i=o.length;return r+(i<n?new Array(n-i+1).join(t)+o:o)}function h(e){return e.replace(l,"\\$&")}function p(e){return new RegExp("^(?:"+e.map(h).join("|")+")","i")}function m(e){for(var t={},n=-1,r=e.length;++n<r;)t[e[n].toLowerCase()]=n;return t}function _(e,t,n){var r=a.exec(t.slice(n,n+1));return r?(e.w=+r[0],n+r[0].length):-1}function v(e,t,n){var r=a.exec(t.slice(n,n+1));return r?(e.u=+r[0],n+r[0].length):-1}function g(e,t,n){var r=a.exec(t.slice(n,n+2));return r?(e.U=+r[0],n+r[0].length):-1}function b(e,t,n){var r=a.exec(t.slice(n,n+2));return r?(e.V=+r[0],n+r[0].length):-1}function j(e,t,n){var r=a.exec(t.slice(n,n+2));return r?(e.W=+r[0],n+r[0].length):-1}function y(e,t,n){var r=a.exec(t.slice(n,n+4));return r?(e.y=+r[0],n+r[0].length):-1}function x(e,t,n){var r=a.exec(t.slice(n,n+2));return r?(e.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function w(e,t,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(t.slice(n,n+6));return r?(e.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function O(e,t,n){var r=a.exec(t.slice(n,n+1));return r?(e.q=3*r[0]-3,n+r[0].length):-1}function M(e,t,n){var r=a.exec(t.slice(n,n+2));return r?(e.m=r[0]-1,n+r[0].length):-1}function S(e,t,n){var r=a.exec(t.slice(n,n+2));return r?(e.d=+r[0],n+r[0].length):-1}function A(e,t,n){var r=a.exec(t.slice(n,n+3));return r?(e.m=0,e.d=+r[0],n+r[0].length):-1}function P(e,t,n){var r=a.exec(t.slice(n,n+2));return r?(e.H=+r[0],n+r[0].length):-1}function k(e,t,n){var r=a.exec(t.slice(n,n+2));return r?(e.M=+r[0],n+r[0].length):-1}function C(e,t,n){var r=a.exec(t.slice(n,n+2));return r?(e.S=+r[0],n+r[0].length):-1}function T(e,t,n){var r=a.exec(t.slice(n,n+3));return r?(e.L=+r[0],n+r[0].length):-1}function E(e,t,n){var r=a.exec(t.slice(n,n+6));return r?(e.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function R(e,t,n){var r=d.exec(t.slice(n,n+1));return r?n+r[0].length:-1}function N(e,t,n){var r=a.exec(t.slice(n));return r?(e.Q=+r[0],n+r[0].length):-1}function q(e,t,n){var r=a.exec(t.slice(n));return r?(e.s=+r[0],n+r[0].length):-1}function B(e,t){return f(e.getDate(),t,2)}function I(e,t){return f(e.getHours(),t,2)}function D(e,t){return f(e.getHours()%12||12,t,2)}function L(e,t){return f(1+r.timeDay.count(Object(r.timeYear)(e),e),t,3)}function z(e,t){return f(e.getMilliseconds(),t,3)}function F(e,t){return z(e,t)+"000"}function U(e,t){return f(e.getMonth()+1,t,2)}function Y(e,t){return f(e.getMinutes(),t,2)}function H(e,t){return f(e.getSeconds(),t,2)}function G(e){var t=e.getDay();return 0===t?7:t}function W(e,t){return f(r.timeSunday.count(Object(r.timeYear)(e)-1,e),t,2)}function $(e,t){var n=e.getDay();return e=n>=4||0===n?Object(r.timeThursday)(e):r.timeThursday.ceil(e),f(r.timeThursday.count(Object(r.timeYear)(e),e)+(4===Object(r.timeYear)(e).getDay()),t,2)}function V(e){return e.getDay()}function X(e,t){return f(r.timeMonday.count(Object(r.timeYear)(e)-1,e),t,2)}function Z(e,t){return f(e.getFullYear()%100,t,2)}function Q(e,t){return f(e.getFullYear()%1e4,t,4)}function K(e){var t=e.getTimezoneOffset();return(t>0?"-":(t*=-1,"+"))+f(t/60|0,"0",2)+f(t%60,"0",2)}function J(e,t){return f(e.getUTCDate(),t,2)}function ee(e,t){return f(e.getUTCHours(),t,2)}function te(e,t){return f(e.getUTCHours()%12||12,t,2)}function ne(e,t){return f(1+r.utcDay.count(Object(r.utcYear)(e),e),t,3)}function re(e,t){return f(e.getUTCMilliseconds(),t,3)}function oe(e,t){return re(e,t)+"000"}function ie(e,t){return f(e.getUTCMonth()+1,t,2)}function ue(e,t){return f(e.getUTCMinutes(),t,2)}function se(e,t){return f(e.getUTCSeconds(),t,2)}function ce(e){var t=e.getUTCDay();return 0===t?7:t}function ae(e,t){return f(r.utcSunday.count(Object(r.utcYear)(e)-1,e),t,2)}function de(e,t){var n=e.getUTCDay();return e=n>=4||0===n?Object(r.utcThursday)(e):r.utcThursday.ceil(e),f(r.utcThursday.count(Object(r.utcYear)(e),e)+(4===Object(r.utcYear)(e).getUTCDay()),t,2)}function le(e){return e.getUTCDay()}function fe(e,t){return f(r.utcMonday.count(Object(r.utcYear)(e)-1,e),t,2)}function he(e,t){return f(e.getUTCFullYear()%100,t,2)}function pe(e,t){return f(e.getUTCFullYear()%1e4,t,4)}function me(){return"+0000"}function _e(){return"%"}function ve(e){return+e}function ge(e){return Math.floor(+e/1e3)}},"./node_modules/d3-time/src/day.js":function(e,t,n){"use strict";n.r(t),n.d(t,"days",(function(){return u}));var r=n("./node_modules/d3-time/src/interval.js"),o=n("./node_modules/d3-time/src/duration.js"),i=Object(r.default)((function(e){e.setHours(0,0,0,0)}),(function(e,t){e.setDate(e.getDate()+t)}),(function(e,t){return(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*o.durationMinute)/o.durationDay}),(function(e){return e.getDate()-1}));t.default=i;var u=i.range},"./node_modules/d3-time/src/duration.js":function(e,t,n){"use strict";n.r(t),n.d(t,"durationSecond",(function(){return r})),n.d(t,"durationMinute",(function(){return o})),n.d(t,"durationHour",(function(){return i})),n.d(t,"durationDay",(function(){return u})),n.d(t,"durationWeek",(function(){return s}));var r=1e3,o=6e4,i=36e5,u=864e5,s=6048e5},"./node_modules/d3-time/src/hour.js":function(e,t,n){"use strict";n.r(t),n.d(t,"hours",(function(){return u}));var r=n("./node_modules/d3-time/src/interval.js"),o=n("./node_modules/d3-time/src/duration.js"),i=Object(r.default)((function(e){e.setTime(e-e.getMilliseconds()-e.getSeconds()*o.durationSecond-e.getMinutes()*o.durationMinute)}),(function(e,t){e.setTime(+e+t*o.durationHour)}),(function(e,t){return(t-e)/o.durationHour}),(function(e){return e.getHours()}));t.default=i;var u=i.range},"./node_modules/d3-time/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-time/src/interval.js");n.d(t,"timeInterval",(function(){return r.default}));var o=n("./node_modules/d3-time/src/millisecond.js");n.d(t,"timeMillisecond",(function(){return o.default})),n.d(t,"timeMilliseconds",(function(){return o.milliseconds})),n.d(t,"utcMillisecond",(function(){return o.default})),n.d(t,"utcMilliseconds",(function(){return o.milliseconds}));var i=n("./node_modules/d3-time/src/second.js");n.d(t,"timeSecond",(function(){return i.default})),n.d(t,"timeSeconds",(function(){return i.seconds})),n.d(t,"utcSecond",(function(){return i.default})),n.d(t,"utcSeconds",(function(){return i.seconds}));var u=n("./node_modules/d3-time/src/minute.js");n.d(t,"timeMinute",(function(){return u.default})),n.d(t,"timeMinutes",(function(){return u.minutes}));var s=n("./node_modules/d3-time/src/hour.js");n.d(t,"timeHour",(function(){return s.default})),n.d(t,"timeHours",(function(){return s.hours}));var c=n("./node_modules/d3-time/src/day.js");n.d(t,"timeDay",(function(){return c.default})),n.d(t,"timeDays",(function(){return c.days}));var a=n("./node_modules/d3-time/src/week.js");n.d(t,"timeWeek",(function(){return a.sunday})),n.d(t,"timeWeeks",(function(){return a.sundays})),n.d(t,"timeSunday",(function(){return a.sunday})),n.d(t,"timeSundays",(function(){return a.sundays})),n.d(t,"timeMonday",(function(){return a.monday})),n.d(t,"timeMondays",(function(){return a.mondays})),n.d(t,"timeTuesday",(function(){return a.tuesday})),n.d(t,"timeTuesdays",(function(){return a.tuesdays})),n.d(t,"timeWednesday",(function(){return a.wednesday})),n.d(t,"timeWednesdays",(function(){return a.wednesdays})),n.d(t,"timeThursday",(function(){return a.thursday})),n.d(t,"timeThursdays",(function(){return a.thursdays})),n.d(t,"timeFriday",(function(){return a.friday})),n.d(t,"timeFridays",(function(){return a.fridays})),n.d(t,"timeSaturday",(function(){return a.saturday})),n.d(t,"timeSaturdays",(function(){return a.saturdays}));var d=n("./node_modules/d3-time/src/month.js");n.d(t,"timeMonth",(function(){return d.default})),n.d(t,"timeMonths",(function(){return d.months}));var l=n("./node_modules/d3-time/src/year.js");n.d(t,"timeYear",(function(){return l.default})),n.d(t,"timeYears",(function(){return l.years}));var f=n("./node_modules/d3-time/src/utcMinute.js");n.d(t,"utcMinute",(function(){return f.default})),n.d(t,"utcMinutes",(function(){return f.utcMinutes}));var h=n("./node_modules/d3-time/src/utcHour.js");n.d(t,"utcHour",(function(){return h.default})),n.d(t,"utcHours",(function(){return h.utcHours}));var p=n("./node_modules/d3-time/src/utcDay.js");n.d(t,"utcDay",(function(){return p.default})),n.d(t,"utcDays",(function(){return p.utcDays}));var m=n("./node_modules/d3-time/src/utcWeek.js");n.d(t,"utcWeek",(function(){return m.utcSunday})),n.d(t,"utcWeeks",(function(){return m.utcSundays})),n.d(t,"utcSunday",(function(){return m.utcSunday})),n.d(t,"utcSundays",(function(){return m.utcSundays})),n.d(t,"utcMonday",(function(){return m.utcMonday})),n.d(t,"utcMondays",(function(){return m.utcMondays})),n.d(t,"utcTuesday",(function(){return m.utcTuesday})),n.d(t,"utcTuesdays",(function(){return m.utcTuesdays})),n.d(t,"utcWednesday",(function(){return m.utcWednesday})),n.d(t,"utcWednesdays",(function(){return m.utcWednesdays})),n.d(t,"utcThursday",(function(){return m.utcThursday})),n.d(t,"utcThursdays",(function(){return m.utcThursdays})),n.d(t,"utcFriday",(function(){return m.utcFriday})),n.d(t,"utcFridays",(function(){return m.utcFridays})),n.d(t,"utcSaturday",(function(){return m.utcSaturday})),n.d(t,"utcSaturdays",(function(){return m.utcSaturdays}));var _=n("./node_modules/d3-time/src/utcMonth.js");n.d(t,"utcMonth",(function(){return _.default})),n.d(t,"utcMonths",(function(){return _.utcMonths}));var v=n("./node_modules/d3-time/src/utcYear.js");n.d(t,"utcYear",(function(){return v.default})),n.d(t,"utcYears",(function(){return v.utcYears}))},"./node_modules/d3-time/src/interval.js":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return i}));var r=new Date,o=new Date;function i(e,t,n,u){function s(t){return e(t=0===arguments.length?new Date:new Date(+t)),t}return s.floor=function(t){return e(t=new Date(+t)),t},s.ceil=function(n){return e(n=new Date(n-1)),t(n,1),e(n),n},s.round=function(e){var t=s(e),n=s.ceil(e);return e-t<n-e?t:n},s.offset=function(e,n){return t(e=new Date(+e),null==n?1:Math.floor(n)),e},s.range=function(n,r,o){var i,u=[];if(n=s.ceil(n),o=null==o?1:Math.floor(o),!(n<r&&o>0))return u;do{u.push(i=new Date(+n)),t(n,o),e(n)}while(i<n&&n<r);return u},s.filter=function(n){return i((function(t){if(t>=t)for(;e(t),!n(t);)t.setTime(t-1)}),(function(e,r){if(e>=e)if(r<0)for(;++r<=0;)for(;t(e,-1),!n(e););else for(;--r>=0;)for(;t(e,1),!n(e););}))},n&&(s.count=function(t,i){return r.setTime(+t),o.setTime(+i),e(r),e(o),Math.floor(n(r,o))},s.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?s.filter(u?function(t){return u(t)%e==0}:function(t){return s.count(0,t)%e==0}):s:null}),s}},"./node_modules/d3-time/src/millisecond.js":function(e,t,n){"use strict";n.r(t),n.d(t,"milliseconds",(function(){return i}));var r=n("./node_modules/d3-time/src/interval.js"),o=Object(r.default)((function(){}),(function(e,t){e.setTime(+e+t)}),(function(e,t){return t-e}));o.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?Object(r.default)((function(t){t.setTime(Math.floor(t/e)*e)}),(function(t,n){t.setTime(+t+n*e)}),(function(t,n){return(n-t)/e})):o:null},t.default=o;var i=o.range},"./node_modules/d3-time/src/minute.js":function(e,t,n){"use strict";n.r(t),n.d(t,"minutes",(function(){return u}));var r=n("./node_modules/d3-time/src/interval.js"),o=n("./node_modules/d3-time/src/duration.js"),i=Object(r.default)((function(e){e.setTime(e-e.getMilliseconds()-e.getSeconds()*o.durationSecond)}),(function(e,t){e.setTime(+e+t*o.durationMinute)}),(function(e,t){return(t-e)/o.durationMinute}),(function(e){return e.getMinutes()}));t.default=i;var u=i.range},"./node_modules/d3-time/src/month.js":function(e,t,n){"use strict";n.r(t),n.d(t,"months",(function(){return i}));var r=n("./node_modules/d3-time/src/interval.js"),o=Object(r.default)((function(e){e.setDate(1),e.setHours(0,0,0,0)}),(function(e,t){e.setMonth(e.getMonth()+t)}),(function(e,t){return t.getMonth()-e.getMonth()+12*(t.getFullYear()-e.getFullYear())}),(function(e){return e.getMonth()}));t.default=o;var i=o.range},"./node_modules/d3-time/src/second.js":function(e,t,n){"use strict";n.r(t),n.d(t,"seconds",(function(){return u}));var r=n("./node_modules/d3-time/src/interval.js"),o=n("./node_modules/d3-time/src/duration.js"),i=Object(r.default)((function(e){e.setTime(e-e.getMilliseconds())}),(function(e,t){e.setTime(+e+t*o.durationSecond)}),(function(e,t){return(t-e)/o.durationSecond}),(function(e){return e.getUTCSeconds()}));t.default=i;var u=i.range},"./node_modules/d3-time/src/utcDay.js":function(e,t,n){"use strict";n.r(t),n.d(t,"utcDays",(function(){return u}));var r=n("./node_modules/d3-time/src/interval.js"),o=n("./node_modules/d3-time/src/duration.js"),i=Object(r.default)((function(e){e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCDate(e.getUTCDate()+t)}),(function(e,t){return(t-e)/o.durationDay}),(function(e){return e.getUTCDate()-1}));t.default=i;var u=i.range},"./node_modules/d3-time/src/utcHour.js":function(e,t,n){"use strict";n.r(t),n.d(t,"utcHours",(function(){return u}));var r=n("./node_modules/d3-time/src/interval.js"),o=n("./node_modules/d3-time/src/duration.js"),i=Object(r.default)((function(e){e.setUTCMinutes(0,0,0)}),(function(e,t){e.setTime(+e+t*o.durationHour)}),(function(e,t){return(t-e)/o.durationHour}),(function(e){return e.getUTCHours()}));t.default=i;var u=i.range},"./node_modules/d3-time/src/utcMinute.js":function(e,t,n){"use strict";n.r(t),n.d(t,"utcMinutes",(function(){return u}));var r=n("./node_modules/d3-time/src/interval.js"),o=n("./node_modules/d3-time/src/duration.js"),i=Object(r.default)((function(e){e.setUTCSeconds(0,0)}),(function(e,t){e.setTime(+e+t*o.durationMinute)}),(function(e,t){return(t-e)/o.durationMinute}),(function(e){return e.getUTCMinutes()}));t.default=i;var u=i.range},"./node_modules/d3-time/src/utcMonth.js":function(e,t,n){"use strict";n.r(t),n.d(t,"utcMonths",(function(){return i}));var r=n("./node_modules/d3-time/src/interval.js"),o=Object(r.default)((function(e){e.setUTCDate(1),e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCMonth(e.getUTCMonth()+t)}),(function(e,t){return t.getUTCMonth()-e.getUTCMonth()+12*(t.getUTCFullYear()-e.getUTCFullYear())}),(function(e){return e.getUTCMonth()}));t.default=o;var i=o.range},"./node_modules/d3-time/src/utcWeek.js":function(e,t,n){"use strict";n.r(t),n.d(t,"utcSunday",(function(){return u})),n.d(t,"utcMonday",(function(){return s})),n.d(t,"utcTuesday",(function(){return c})),n.d(t,"utcWednesday",(function(){return a})),n.d(t,"utcThursday",(function(){return d})),n.d(t,"utcFriday",(function(){return l})),n.d(t,"utcSaturday",(function(){return f})),n.d(t,"utcSundays",(function(){return h})),n.d(t,"utcMondays",(function(){return p})),n.d(t,"utcTuesdays",(function(){return m})),n.d(t,"utcWednesdays",(function(){return _})),n.d(t,"utcThursdays",(function(){return v})),n.d(t,"utcFridays",(function(){return g})),n.d(t,"utcSaturdays",(function(){return b}));var r=n("./node_modules/d3-time/src/interval.js"),o=n("./node_modules/d3-time/src/duration.js");function i(e){return Object(r.default)((function(t){t.setUTCDate(t.getUTCDate()-(t.getUTCDay()+7-e)%7),t.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCDate(e.getUTCDate()+7*t)}),(function(e,t){return(t-e)/o.durationWeek}))}var u=i(0),s=i(1),c=i(2),a=i(3),d=i(4),l=i(5),f=i(6),h=u.range,p=s.range,m=c.range,_=a.range,v=d.range,g=l.range,b=f.range},"./node_modules/d3-time/src/utcYear.js":function(e,t,n){"use strict";n.r(t),n.d(t,"utcYears",(function(){return i}));var r=n("./node_modules/d3-time/src/interval.js"),o=Object(r.default)((function(e){e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCFullYear(e.getUTCFullYear()+t)}),(function(e,t){return t.getUTCFullYear()-e.getUTCFullYear()}),(function(e){return e.getUTCFullYear()}));o.every=function(e){return isFinite(e=Math.floor(e))&&e>0?Object(r.default)((function(t){t.setUTCFullYear(Math.floor(t.getUTCFullYear()/e)*e),t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n*e)})):null},t.default=o;var i=o.range},"./node_modules/d3-time/src/week.js":function(e,t,n){"use strict";n.r(t),n.d(t,"sunday",(function(){return u})),n.d(t,"monday",(function(){return s})),n.d(t,"tuesday",(function(){return c})),n.d(t,"wednesday",(function(){return a})),n.d(t,"thursday",(function(){return d})),n.d(t,"friday",(function(){return l})),n.d(t,"saturday",(function(){return f})),n.d(t,"sundays",(function(){return h})),n.d(t,"mondays",(function(){return p})),n.d(t,"tuesdays",(function(){return m})),n.d(t,"wednesdays",(function(){return _})),n.d(t,"thursdays",(function(){return v})),n.d(t,"fridays",(function(){return g})),n.d(t,"saturdays",(function(){return b}));var r=n("./node_modules/d3-time/src/interval.js"),o=n("./node_modules/d3-time/src/duration.js");function i(e){return Object(r.default)((function(t){t.setDate(t.getDate()-(t.getDay()+7-e)%7),t.setHours(0,0,0,0)}),(function(e,t){e.setDate(e.getDate()+7*t)}),(function(e,t){return(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*o.durationMinute)/o.durationWeek}))}var u=i(0),s=i(1),c=i(2),a=i(3),d=i(4),l=i(5),f=i(6),h=u.range,p=s.range,m=c.range,_=a.range,v=d.range,g=l.range,b=f.range},"./node_modules/d3-time/src/year.js":function(e,t,n){"use strict";n.r(t),n.d(t,"years",(function(){return i}));var r=n("./node_modules/d3-time/src/interval.js"),o=Object(r.default)((function(e){e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,t){e.setFullYear(e.getFullYear()+t)}),(function(e,t){return t.getFullYear()-e.getFullYear()}),(function(e){return e.getFullYear()}));o.every=function(e){return isFinite(e=Math.floor(e))&&e>0?Object(r.default)((function(t){t.setFullYear(Math.floor(t.getFullYear()/e)*e),t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n*e)})):null},t.default=o;var i=o.range},"./node_modules/d3-timer/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-timer/src/timer.js");n.d(t,"now",(function(){return r.now})),n.d(t,"timer",(function(){return r.timer})),n.d(t,"timerFlush",(function(){return r.timerFlush}));var o=n("./node_modules/d3-timer/src/timeout.js");n.d(t,"timeout",(function(){return o.default}));var i=n("./node_modules/d3-timer/src/interval.js");n.d(t,"interval",(function(){return i.default}))},"./node_modules/d3-timer/src/interval.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-timer/src/timer.js");t.default=function(e,t,n){var o=new r.Timer,i=t;return null==t?(o.restart(e,t,n),o):(t=+t,n=null==n?Object(r.now)():+n,o.restart((function r(u){u+=i,o.restart(r,i+=t,n),e(u)}),t,n),o)}},"./node_modules/d3-timer/src/timeout.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-timer/src/timer.js");t.default=function(e,t,n){var o=new r.Timer;return t=null==t?0:+t,o.restart((function(n){o.stop(),e(n+t)}),t,n),o}},"./node_modules/d3-timer/src/timer.js":function(e,t,n){"use strict";n.r(t),n.d(t,"now",(function(){return h})),n.d(t,"Timer",(function(){return m})),n.d(t,"timer",(function(){return _})),n.d(t,"timerFlush",(function(){return v}));var r,o,i=0,u=0,s=0,c=0,a=0,d=0,l="object"==typeof performance&&performance.now?performance:Date,f="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(e){setTimeout(e,17)};function h(){return a||(f(p),a=l.now()+d)}function p(){a=0}function m(){this._call=this._time=this._next=null}function _(e,t,n){var r=new m;return r.restart(e,t,n),r}function v(){h(),++i;for(var e,t=r;t;)(e=a-t._time)>=0&&t._call.call(null,e),t=t._next;--i}function g(){a=(c=l.now())+d,i=u=0;try{v()}finally{i=0,function(){var e,t,n=r,i=1/0;for(;n;)n._call?(i>n._time&&(i=n._time),e=n,n=n._next):(t=n._next,n._next=null,n=e?e._next=t:r=t);o=e,j(i)}(),a=0}}function b(){var e=l.now(),t=e-c;t>1e3&&(d-=t,c=e)}function j(e){i||(u&&(u=clearTimeout(u)),e-a>24?(e<1/0&&(u=setTimeout(g,e-l.now()-d)),s&&(s=clearInterval(s))):(s||(c=l.now(),s=setInterval(b,1e3)),i=1,f(g)))}m.prototype=_.prototype={constructor:m,restart:function(e,t,n){if("function"!=typeof e)throw new TypeError("callback is not a function");n=(null==n?h():+n)+(null==t?0:+t),this._next||o===this||(o?o._next=this:r=this,o=this),this._call=e,this._time=n,j()},stop:function(){this._call&&(this._call=null,this._time=1/0,j())}}},"./node_modules/d3-transition/src/active.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-transition/src/transition/index.js"),o=n("./node_modules/d3-transition/src/transition/schedule.js"),i=[null];t.default=function(e,t){var n,u,s=e.__transition;if(s)for(u in t=null==t?null:t+"",s)if((n=s[u]).state>o.SCHEDULED&&n.name===t)return new r.Transition([[e]],i,t,+u);return null}},"./node_modules/d3-transition/src/index.js":function(e,t,n){"use strict";n.r(t);n("./node_modules/d3-transition/src/selection/index.js");var r=n("./node_modules/d3-transition/src/transition/index.js");n.d(t,"transition",(function(){return r.default}));var o=n("./node_modules/d3-transition/src/active.js");n.d(t,"active",(function(){return o.default}));var i=n("./node_modules/d3-transition/src/interrupt.js");n.d(t,"interrupt",(function(){return i.default}))},"./node_modules/d3-transition/src/interrupt.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-transition/src/transition/schedule.js");t.default=function(e,t){var n,o,i,u=e.__transition,s=!0;if(u){for(i in t=null==t?null:t+"",u)(n=u[i]).name===t?(o=n.state>r.STARTING&&n.state<r.ENDING,n.state=r.ENDED,n.timer.stop(),n.on.call(o?"interrupt":"cancel",e,e.__data__,n.index,n.group),delete u[i]):s=!1;s&&delete e.__transition}}},"./node_modules/d3-transition/src/selection/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/index.js"),o=n("./node_modules/d3-transition/src/selection/interrupt.js"),i=n("./node_modules/d3-transition/src/selection/transition.js");r.selection.prototype.interrupt=o.default,r.selection.prototype.transition=i.default},"./node_modules/d3-transition/src/selection/interrupt.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-transition/src/interrupt.js");t.default=function(e){return this.each((function(){Object(r.default)(this,e)}))}},"./node_modules/d3-transition/src/selection/transition.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-transition/src/transition/index.js"),o=n("./node_modules/d3-transition/src/transition/schedule.js"),i=n("./node_modules/d3-ease/src/index.js"),u=n("./node_modules/d3-timer/src/index.js"),s={time:null,delay:0,duration:250,ease:i.easeCubicInOut};function c(e,t){for(var n;!(n=e.__transition)||!(n=n[t]);)if(!(e=e.parentNode))return s.time=Object(u.now)(),s;return n}t.default=function(e){var t,n;e instanceof r.Transition?(t=e._id,e=e._name):(t=Object(r.newId)(),(n=s).time=Object(u.now)(),e=null==e?null:e+"");for(var i=this._groups,a=i.length,d=0;d<a;++d)for(var l,f=i[d],h=f.length,p=0;p<h;++p)(l=f[p])&&Object(o.default)(l,e,t,p,f,n||c(l,t));return new r.Transition(i,this._parents,e,t)}},"./node_modules/d3-transition/src/transition/attr.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-interpolate/src/index.js"),o=n("./node_modules/d3-selection/src/index.js"),i=n("./node_modules/d3-transition/src/transition/tween.js"),u=n("./node_modules/d3-transition/src/transition/interpolate.js");function s(e){return function(){this.removeAttribute(e)}}function c(e){return function(){this.removeAttributeNS(e.space,e.local)}}function a(e,t,n){var r,o,i=n+"";return function(){var u=this.getAttribute(e);return u===i?null:u===r?o:o=t(r=u,n)}}function d(e,t,n){var r,o,i=n+"";return function(){var u=this.getAttributeNS(e.space,e.local);return u===i?null:u===r?o:o=t(r=u,n)}}function l(e,t,n){var r,o,i;return function(){var u,s,c=n(this);if(null!=c)return(u=this.getAttribute(e))===(s=c+"")?null:u===r&&s===o?i:(o=s,i=t(r=u,c));this.removeAttribute(e)}}function f(e,t,n){var r,o,i;return function(){var u,s,c=n(this);if(null!=c)return(u=this.getAttributeNS(e.space,e.local))===(s=c+"")?null:u===r&&s===o?i:(o=s,i=t(r=u,c));this.removeAttributeNS(e.space,e.local)}}t.default=function(e,t){var n=Object(o.namespace)(e),h="transform"===n?r.interpolateTransformSvg:u.default;return this.attrTween(e,"function"==typeof t?(n.local?f:l)(n,h,Object(i.tweenValue)(this,"attr."+e,t)):null==t?(n.local?c:s)(n):(n.local?d:a)(n,h,t))}},"./node_modules/d3-transition/src/transition/attrTween.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/index.js");function o(e,t){return function(n){this.setAttribute(e,t.call(this,n))}}function i(e,t){return function(n){this.setAttributeNS(e.space,e.local,t.call(this,n))}}function u(e,t){var n,r;function o(){var o=t.apply(this,arguments);return o!==r&&(n=(r=o)&&i(e,o)),n}return o._value=t,o}function s(e,t){var n,r;function i(){var i=t.apply(this,arguments);return i!==r&&(n=(r=i)&&o(e,i)),n}return i._value=t,i}t.default=function(e,t){var n="attr."+e;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;var o=Object(r.namespace)(e);return this.tween(n,(o.local?u:s)(o,t))}},"./node_modules/d3-transition/src/transition/delay.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-transition/src/transition/schedule.js");function o(e,t){return function(){Object(r.init)(this,e).delay=+t.apply(this,arguments)}}function i(e,t){return t=+t,function(){Object(r.init)(this,e).delay=t}}t.default=function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?o:i)(t,e)):Object(r.get)(this.node(),t).delay}},"./node_modules/d3-transition/src/transition/duration.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-transition/src/transition/schedule.js");function o(e,t){return function(){Object(r.set)(this,e).duration=+t.apply(this,arguments)}}function i(e,t){return t=+t,function(){Object(r.set)(this,e).duration=t}}t.default=function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?o:i)(t,e)):Object(r.get)(this.node(),t).duration}},"./node_modules/d3-transition/src/transition/ease.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-transition/src/transition/schedule.js");function o(e,t){if("function"!=typeof t)throw new Error;return function(){Object(r.set)(this,e).ease=t}}t.default=function(e){var t=this._id;return arguments.length?this.each(o(t,e)):Object(r.get)(this.node(),t).ease}},"./node_modules/d3-transition/src/transition/end.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-transition/src/transition/schedule.js");t.default=function(){var e,t,n=this,o=n._id,i=n.size();return new Promise((function(u,s){var c={value:s},a={value:function(){0==--i&&u()}};n.each((function(){var n=Object(r.set)(this,o),i=n.on;i!==e&&((t=(e=i).copy())._.cancel.push(c),t._.interrupt.push(c),t._.end.push(a)),n.on=t}))}))}},"./node_modules/d3-transition/src/transition/filter.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/index.js"),o=n("./node_modules/d3-transition/src/transition/index.js");t.default=function(e){"function"!=typeof e&&(e=Object(r.matcher)(e));for(var t=this._groups,n=t.length,i=new Array(n),u=0;u<n;++u)for(var s,c=t[u],a=c.length,d=i[u]=[],l=0;l<a;++l)(s=c[l])&&e.call(s,s.__data__,l,c)&&d.push(s);return new o.Transition(i,this._parents,this._name,this._id)}},"./node_modules/d3-transition/src/transition/index.js":function(e,t,n){"use strict";n.r(t),n.d(t,"Transition",(function(){return O})),n.d(t,"default",(function(){return M})),n.d(t,"newId",(function(){return S}));var r=n("./node_modules/d3-selection/src/index.js"),o=n("./node_modules/d3-transition/src/transition/attr.js"),i=n("./node_modules/d3-transition/src/transition/attrTween.js"),u=n("./node_modules/d3-transition/src/transition/delay.js"),s=n("./node_modules/d3-transition/src/transition/duration.js"),c=n("./node_modules/d3-transition/src/transition/ease.js"),a=n("./node_modules/d3-transition/src/transition/filter.js"),d=n("./node_modules/d3-transition/src/transition/merge.js"),l=n("./node_modules/d3-transition/src/transition/on.js"),f=n("./node_modules/d3-transition/src/transition/remove.js"),h=n("./node_modules/d3-transition/src/transition/select.js"),p=n("./node_modules/d3-transition/src/transition/selectAll.js"),m=n("./node_modules/d3-transition/src/transition/selection.js"),_=n("./node_modules/d3-transition/src/transition/style.js"),v=n("./node_modules/d3-transition/src/transition/styleTween.js"),g=n("./node_modules/d3-transition/src/transition/text.js"),b=n("./node_modules/d3-transition/src/transition/textTween.js"),j=n("./node_modules/d3-transition/src/transition/transition.js"),y=n("./node_modules/d3-transition/src/transition/tween.js"),x=n("./node_modules/d3-transition/src/transition/end.js"),w=0;function O(e,t,n,r){this._groups=e,this._parents=t,this._name=n,this._id=r}function M(e){return Object(r.selection)().transition(e)}function S(){return++w}var A=r.selection.prototype;O.prototype=M.prototype={constructor:O,select:h.default,selectAll:p.default,filter:a.default,merge:d.default,selection:m.default,transition:j.default,call:A.call,nodes:A.nodes,node:A.node,size:A.size,empty:A.empty,each:A.each,on:l.default,attr:o.default,attrTween:i.default,style:_.default,styleTween:v.default,text:g.default,textTween:b.default,remove:f.default,tween:y.default,delay:u.default,duration:s.default,ease:c.default,end:x.default}},"./node_modules/d3-transition/src/transition/interpolate.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-color/src/index.js"),o=n("./node_modules/d3-interpolate/src/index.js");t.default=function(e,t){var n;return("number"==typeof t?o.interpolateNumber:t instanceof r.color?o.interpolateRgb:(n=Object(r.color)(t))?(t=n,o.interpolateRgb):o.interpolateString)(e,t)}},"./node_modules/d3-transition/src/transition/merge.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-transition/src/transition/index.js");t.default=function(e){if(e._id!==this._id)throw new Error;for(var t=this._groups,n=e._groups,o=t.length,i=n.length,u=Math.min(o,i),s=new Array(o),c=0;c<u;++c)for(var a,d=t[c],l=n[c],f=d.length,h=s[c]=new Array(f),p=0;p<f;++p)(a=d[p]||l[p])&&(h[p]=a);for(;c<o;++c)s[c]=t[c];return new r.Transition(s,this._parents,this._name,this._id)}},"./node_modules/d3-transition/src/transition/on.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-transition/src/transition/schedule.js");function o(e,t,n){var o,i,u=function(e){return(e+"").trim().split(/^|\s+/).every((function(e){var t=e.indexOf(".");return t>=0&&(e=e.slice(0,t)),!e||"start"===e}))}(t)?r.init:r.set;return function(){var r=u(this,e),s=r.on;s!==o&&(i=(o=s).copy()).on(t,n),r.on=i}}t.default=function(e,t){var n=this._id;return arguments.length<2?Object(r.get)(this.node(),n).on.on(e):this.each(o(n,e,t))}},"./node_modules/d3-transition/src/transition/remove.js":function(e,t,n){"use strict";n.r(t),t.default=function(){return this.on("end.remove",(e=this._id,function(){var t=this.parentNode;for(var n in this.__transition)if(+n!==e)return;t&&t.removeChild(this)}));var e}},"./node_modules/d3-transition/src/transition/schedule.js":function(e,t,n){"use strict";n.r(t),n.d(t,"CREATED",(function(){return s})),n.d(t,"SCHEDULED",(function(){return c})),n.d(t,"STARTING",(function(){return a})),n.d(t,"STARTED",(function(){return d})),n.d(t,"RUNNING",(function(){return l})),n.d(t,"ENDING",(function(){return f})),n.d(t,"ENDED",(function(){return h})),n.d(t,"init",(function(){return p})),n.d(t,"set",(function(){return m})),n.d(t,"get",(function(){return _}));var r=n("./node_modules/d3-dispatch/src/index.js"),o=n("./node_modules/d3-timer/src/index.js"),i=Object(r.dispatch)("start","end","cancel","interrupt"),u=[],s=0,c=1,a=2,d=3,l=4,f=5,h=6;function p(e,t){var n=_(e,t);if(n.state>s)throw new Error("too late; already scheduled");return n}function m(e,t){var n=_(e,t);if(n.state>d)throw new Error("too late; already running");return n}function _(e,t){var n=e.__transition;if(!n||!(n=n[t]))throw new Error("transition not found");return n}t.default=function(e,t,n,r,p,m){var _=e.__transition;if(_){if(n in _)return}else e.__transition={};!function(e,t,n){var r,i=e.__transition;function u(f){var m,_,v,g;if(n.state!==c)return p();for(m in i)if((g=i[m]).name===n.name){if(g.state===d)return Object(o.timeout)(u);g.state===l?(g.state=h,g.timer.stop(),g.on.call("interrupt",e,e.__data__,g.index,g.group),delete i[m]):+m<t&&(g.state=h,g.timer.stop(),g.on.call("cancel",e,e.__data__,g.index,g.group),delete i[m])}if(Object(o.timeout)((function(){n.state===d&&(n.state=l,n.timer.restart(s,n.delay,n.time),s(f))})),n.state=a,n.on.call("start",e,e.__data__,n.index,n.group),n.state===a){for(n.state=d,r=new Array(v=n.tween.length),m=0,_=-1;m<v;++m)(g=n.tween[m].value.call(e,e.__data__,n.index,n.group))&&(r[++_]=g);r.length=_+1}}function s(t){for(var o=t<n.duration?n.ease.call(null,t/n.duration):(n.timer.restart(p),n.state=f,1),i=-1,u=r.length;++i<u;)r[i].call(e,o);n.state===f&&(n.on.call("end",e,e.__data__,n.index,n.group),p())}function p(){for(var r in n.state=h,n.timer.stop(),delete i[t],i)return;delete e.__transition}i[t]=n,n.timer=Object(o.timer)((function(e){n.state=c,n.timer.restart(u,n.delay,n.time),n.delay<=e&&u(e-n.delay)}),0,n.time)}(e,n,{name:t,index:r,group:p,on:i,tween:u,time:m.time,delay:m.delay,duration:m.duration,ease:m.ease,timer:null,state:s})}},"./node_modules/d3-transition/src/transition/select.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/index.js"),o=n("./node_modules/d3-transition/src/transition/index.js"),i=n("./node_modules/d3-transition/src/transition/schedule.js");t.default=function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=Object(r.selector)(e));for(var u=this._groups,s=u.length,c=new Array(s),a=0;a<s;++a)for(var d,l,f=u[a],h=f.length,p=c[a]=new Array(h),m=0;m<h;++m)(d=f[m])&&(l=e.call(d,d.__data__,m,f))&&("__data__"in d&&(l.__data__=d.__data__),p[m]=l,Object(i.default)(p[m],t,n,m,p,Object(i.get)(d,n)));return new o.Transition(c,this._parents,t,n)}},"./node_modules/d3-transition/src/transition/selectAll.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/index.js"),o=n("./node_modules/d3-transition/src/transition/index.js"),i=n("./node_modules/d3-transition/src/transition/schedule.js");t.default=function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=Object(r.selectorAll)(e));for(var u=this._groups,s=u.length,c=[],a=[],d=0;d<s;++d)for(var l,f=u[d],h=f.length,p=0;p<h;++p)if(l=f[p]){for(var m,_=e.call(l,l.__data__,p,f),v=Object(i.get)(l,n),g=0,b=_.length;g<b;++g)(m=_[g])&&Object(i.default)(m,t,n,g,_,v);c.push(_),a.push(l)}return new o.Transition(c,a,t,n)}},"./node_modules/d3-transition/src/transition/selection.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-selection/src/index.js").selection.prototype.constructor;t.default=function(){return new r(this._groups,this._parents)}},"./node_modules/d3-transition/src/transition/style.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-interpolate/src/index.js"),o=n("./node_modules/d3-selection/src/index.js"),i=n("./node_modules/d3-transition/src/transition/schedule.js"),u=n("./node_modules/d3-transition/src/transition/tween.js"),s=n("./node_modules/d3-transition/src/transition/interpolate.js");function c(e){return function(){this.style.removeProperty(e)}}t.default=function(e,t,n){var a="transform"==(e+="")?r.interpolateTransformCss:s.default;return null==t?this.styleTween(e,function(e,t){var n,r,i;return function(){var u=Object(o.style)(this,e),s=(this.style.removeProperty(e),Object(o.style)(this,e));return u===s?null:u===n&&s===r?i:i=t(n=u,r=s)}}(e,a)).on("end.style."+e,c(e)):"function"==typeof t?this.styleTween(e,function(e,t,n){var r,i,u;return function(){var s=Object(o.style)(this,e),c=n(this),a=c+"";return null==c&&(this.style.removeProperty(e),a=c=Object(o.style)(this,e)),s===a?null:s===r&&a===i?u:(i=a,u=t(r=s,c))}}(e,a,Object(u.tweenValue)(this,"style."+e,t))).each(function(e,t){var n,r,o,u,s="style."+t,a="end."+s;return function(){var d=Object(i.set)(this,e),l=d.on,f=null==d.value[s]?u||(u=c(t)):void 0;l===n&&o===f||(r=(n=l).copy()).on(a,o=f),d.on=r}}(this._id,e)):this.styleTween(e,function(e,t,n){var r,i,u=n+"";return function(){var s=Object(o.style)(this,e);return s===u?null:s===r?i:i=t(r=s,n)}}(e,a,t),n).on("end.style."+e,null)}},"./node_modules/d3-transition/src/transition/styleTween.js":function(e,t,n){"use strict";function r(e,t,n){return function(r){this.style.setProperty(e,t.call(this,r),n)}}function o(e,t,n){var o,i;function u(){var u=t.apply(this,arguments);return u!==i&&(o=(i=u)&&r(e,u,n)),o}return u._value=t,u}n.r(t),t.default=function(e,t,n){var r="style."+(e+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==t)return this.tween(r,null);if("function"!=typeof t)throw new Error;return this.tween(r,o(e,t,null==n?"":n))}},"./node_modules/d3-transition/src/transition/text.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-transition/src/transition/tween.js");t.default=function(e){return this.tween("text","function"==typeof e?function(e){return function(){var t=e(this);this.textContent=null==t?"":t}}(Object(r.tweenValue)(this,"text",e)):function(e){return function(){this.textContent=e}}(null==e?"":e+""))}},"./node_modules/d3-transition/src/transition/textTween.js":function(e,t,n){"use strict";function r(e){return function(t){this.textContent=e.call(this,t)}}function o(e){var t,n;function o(){var o=e.apply(this,arguments);return o!==n&&(t=(n=o)&&r(o)),t}return o._value=e,o}n.r(t),t.default=function(e){var t="text";if(arguments.length<1)return(t=this.tween(t))&&t._value;if(null==e)return this.tween(t,null);if("function"!=typeof e)throw new Error;return this.tween(t,o(e))}},"./node_modules/d3-transition/src/transition/transition.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-transition/src/transition/index.js"),o=n("./node_modules/d3-transition/src/transition/schedule.js");t.default=function(){for(var e=this._name,t=this._id,n=Object(r.newId)(),i=this._groups,u=i.length,s=0;s<u;++s)for(var c,a=i[s],d=a.length,l=0;l<d;++l)if(c=a[l]){var f=Object(o.get)(c,t);Object(o.default)(c,e,n,l,a,{time:f.time+f.delay+f.duration,delay:0,duration:f.duration,ease:f.ease})}return new r.Transition(i,this._parents,e,n)}},"./node_modules/d3-transition/src/transition/tween.js":function(e,t,n){"use strict";n.r(t),n.d(t,"tweenValue",(function(){return u}));var r=n("./node_modules/d3-transition/src/transition/schedule.js");function o(e,t){var n,o;return function(){var i=Object(r.set)(this,e),u=i.tween;if(u!==n)for(var s=0,c=(o=n=u).length;s<c;++s)if(o[s].name===t){(o=o.slice()).splice(s,1);break}i.tween=o}}function i(e,t,n){var o,i;if("function"!=typeof n)throw new Error;return function(){var u=Object(r.set)(this,e),s=u.tween;if(s!==o){i=(o=s).slice();for(var c={name:t,value:n},a=0,d=i.length;a<d;++a)if(i[a].name===t){i[a]=c;break}a===d&&i.push(c)}u.tween=i}}function u(e,t,n){var o=e._id;return e.each((function(){var e=Object(r.set)(this,o);(e.value||(e.value={}))[t]=n.apply(this,arguments)})),function(e){return Object(r.get)(e,o).value[t]}}t.default=function(e,t){var n=this._id;if(e+="",arguments.length<2){for(var u,s=Object(r.get)(this.node(),n).tween,c=0,a=s.length;c<a;++c)if((u=s[c]).name===e)return u.value;return null}return this.each((null==t?o:i)(n,e,t))}},"./node_modules/d3-voronoi/src/Beach.js":function(e,t,n){"use strict";n.r(t),n.d(t,"removeBeach",(function(){return f})),n.d(t,"addBeach",(function(){return h}));var r=n("./node_modules/d3-voronoi/src/RedBlackTree.js"),o=n("./node_modules/d3-voronoi/src/Cell.js"),i=n("./node_modules/d3-voronoi/src/Circle.js"),u=n("./node_modules/d3-voronoi/src/Edge.js"),s=n("./node_modules/d3-voronoi/src/Diagram.js"),c=[];function a(){Object(r.RedBlackNode)(this),this.edge=this.site=this.circle=null}function d(e){var t=c.pop()||new a;return t.site=e,t}function l(e){Object(i.detachCircle)(e),s.beaches.remove(e),c.push(e),Object(r.RedBlackNode)(e)}function f(e){var t=e.circle,n=t.x,r=t.cy,o=[n,r],c=e.P,a=e.N,d=[e];l(e);for(var f=c;f.circle&&Math.abs(n-f.circle.x)<s.epsilon&&Math.abs(r-f.circle.cy)<s.epsilon;)c=f.P,d.unshift(f),l(f),f=c;d.unshift(f),Object(i.detachCircle)(f);for(var h=a;h.circle&&Math.abs(n-h.circle.x)<s.epsilon&&Math.abs(r-h.circle.cy)<s.epsilon;)a=h.N,d.push(h),l(h),h=a;d.push(h),Object(i.detachCircle)(h);var p,m=d.length;for(p=1;p<m;++p)h=d[p],f=d[p-1],Object(u.setEdgeEnd)(h.edge,f.site,h.site,o);f=d[0],(h=d[m-1]).edge=Object(u.createEdge)(f.site,h.site,null,o),Object(i.attachCircle)(f),Object(i.attachCircle)(h)}function h(e){for(var t,n,r,c,a=e[0],l=e[1],f=s.beaches._;f;)if((r=p(f,l)-a)>s.epsilon)f=f.L;else{if(!((c=a-m(f,l))>s.epsilon)){r>-s.epsilon?(t=f.P,n=f):c>-s.epsilon?(t=f,n=f.N):t=n=f;break}if(!f.R){t=f;break}f=f.R}Object(o.createCell)(e);var h=d(e);if(s.beaches.insert(t,h),t||n){if(t===n)return Object(i.detachCircle)(t),n=d(t.site),s.beaches.insert(h,n),h.edge=n.edge=Object(u.createEdge)(t.site,h.site),Object(i.attachCircle)(t),void Object(i.attachCircle)(n);if(n){Object(i.detachCircle)(t),Object(i.detachCircle)(n);var _=t.site,v=_[0],g=_[1],b=e[0]-v,j=e[1]-g,y=n.site,x=y[0]-v,w=y[1]-g,O=2*(b*w-j*x),M=b*b+j*j,S=x*x+w*w,A=[(w*M-j*S)/O+v,(b*S-x*M)/O+g];Object(u.setEdgeEnd)(n.edge,_,y,A),h.edge=Object(u.createEdge)(_,e,null,A),n.edge=Object(u.createEdge)(e,y,null,A),Object(i.attachCircle)(t),Object(i.attachCircle)(n)}else h.edge=Object(u.createEdge)(t.site,h.site)}}function p(e,t){var n=e.site,r=n[0],o=n[1],i=o-t;if(!i)return r;var u=e.P;if(!u)return-1/0;var s=(n=u.site)[0],c=n[1],a=c-t;if(!a)return s;var d=s-r,l=1/i-1/a,f=d/a;return l?(-f+Math.sqrt(f*f-2*l*(d*d/(-2*a)-c+a/2+o-i/2)))/l+r:(r+s)/2}function m(e,t){var n=e.N;if(n)return p(n,t);var r=e.site;return r[1]===t?r[0]:1/0}},"./node_modules/d3-voronoi/src/Cell.js":function(e,t,n){"use strict";n.r(t),n.d(t,"createCell",(function(){return i})),n.d(t,"cellHalfedgeStart",(function(){return s})),n.d(t,"cellHalfedgeEnd",(function(){return c})),n.d(t,"sortCellHalfedges",(function(){return a})),n.d(t,"clipCells",(function(){return d}));var r=n("./node_modules/d3-voronoi/src/Edge.js"),o=n("./node_modules/d3-voronoi/src/Diagram.js");function i(e){return o.cells[e.index]={site:e,halfedges:[]}}function u(e,t){var n=e.site,r=t.left,o=t.right;return n===o&&(o=r,r=n),o?Math.atan2(o[1]-r[1],o[0]-r[0]):(n===r?(r=t[1],o=t[0]):(r=t[0],o=t[1]),Math.atan2(r[0]-o[0],o[1]-r[1]))}function s(e,t){return t[+(t.left!==e.site)]}function c(e,t){return t[+(t.left===e.site)]}function a(){for(var e,t,n,r,i=0,s=o.cells.length;i<s;++i)if((e=o.cells[i])&&(r=(t=e.halfedges).length)){var c=new Array(r),a=new Array(r);for(n=0;n<r;++n)c[n]=n,a[n]=u(e,o.edges[t[n]]);for(c.sort((function(e,t){return a[t]-a[e]})),n=0;n<r;++n)a[n]=t[c[n]];for(n=0;n<r;++n)t[n]=a[n]}}function d(e,t,n,i){var u,a,d,l,f,h,p,m,_,v,g,b,j=o.cells.length,y=!0;for(u=0;u<j;++u)if(a=o.cells[u]){for(d=a.site,l=(f=a.halfedges).length;l--;)o.edges[f[l]]||f.splice(l,1);for(l=0,h=f.length;l<h;)g=(v=c(a,o.edges[f[l]]))[0],b=v[1],m=(p=s(a,o.edges[f[++l%h]]))[0],_=p[1],(Math.abs(g-m)>o.epsilon||Math.abs(b-_)>o.epsilon)&&(f.splice(l,0,o.edges.push(Object(r.createBorderEdge)(d,v,Math.abs(g-e)<o.epsilon&&i-b>o.epsilon?[e,Math.abs(m-e)<o.epsilon?_:i]:Math.abs(b-i)<o.epsilon&&n-g>o.epsilon?[Math.abs(_-i)<o.epsilon?m:n,i]:Math.abs(g-n)<o.epsilon&&b-t>o.epsilon?[n,Math.abs(m-n)<o.epsilon?_:t]:Math.abs(b-t)<o.epsilon&&g-e>o.epsilon?[Math.abs(_-t)<o.epsilon?m:e,t]:null))-1),++h);h&&(y=!1)}if(y){var x,w,O,M=1/0;for(u=0,y=null;u<j;++u)(a=o.cells[u])&&(O=(x=(d=a.site)[0]-e)*x+(w=d[1]-t)*w)<M&&(M=O,y=a);if(y){var S=[e,t],A=[e,i],P=[n,i],k=[n,t];y.halfedges.push(o.edges.push(Object(r.createBorderEdge)(d=y.site,S,A))-1,o.edges.push(Object(r.createBorderEdge)(d,A,P))-1,o.edges.push(Object(r.createBorderEdge)(d,P,k))-1,o.edges.push(Object(r.createBorderEdge)(d,k,S))-1)}}for(u=0;u<j;++u)(a=o.cells[u])&&(a.halfedges.length||delete o.cells[u])}},"./node_modules/d3-voronoi/src/Circle.js":function(e,t,n){"use strict";n.r(t),n.d(t,"firstCircle",(function(){return r})),n.d(t,"attachCircle",(function(){return c})),n.d(t,"detachCircle",(function(){return a}));var r,o=n("./node_modules/d3-voronoi/src/RedBlackTree.js"),i=n("./node_modules/d3-voronoi/src/Diagram.js"),u=[];function s(){Object(o.RedBlackNode)(this),this.x=this.y=this.arc=this.site=this.cy=null}function c(e){var t=e.P,n=e.N;if(t&&n){var o=t.site,c=e.site,a=n.site;if(o!==a){var d=c[0],l=c[1],f=o[0]-d,h=o[1]-l,p=a[0]-d,m=a[1]-l,_=2*(f*m-h*p);if(!(_>=-i.epsilon2)){var v=f*f+h*h,g=p*p+m*m,b=(m*v-h*g)/_,j=(f*g-p*v)/_,y=u.pop()||new s;y.arc=e,y.site=c,y.x=b+d,y.y=(y.cy=j+l)+Math.sqrt(b*b+j*j),e.circle=y;for(var x=null,w=i.circles._;w;)if(y.y<w.y||y.y===w.y&&y.x<=w.x){if(!w.L){x=w.P;break}w=w.L}else{if(!w.R){x=w;break}w=w.R}i.circles.insert(x,y),x||(r=y)}}}}function a(e){var t=e.circle;t&&(t.P||(r=t.N),i.circles.remove(t),u.push(t),Object(o.RedBlackNode)(t),e.circle=null)}},"./node_modules/d3-voronoi/src/Diagram.js":function(e,t,n){"use strict";n.r(t),n.d(t,"epsilon",(function(){return f})),n.d(t,"epsilon2",(function(){return h})),n.d(t,"beaches",(function(){return r})),n.d(t,"cells",(function(){return o})),n.d(t,"circles",(function(){return i})),n.d(t,"edges",(function(){return u})),n.d(t,"default",(function(){return m}));var r,o,i,u,s=n("./node_modules/d3-voronoi/src/Beach.js"),c=n("./node_modules/d3-voronoi/src/Cell.js"),a=n("./node_modules/d3-voronoi/src/Circle.js"),d=n("./node_modules/d3-voronoi/src/Edge.js"),l=n("./node_modules/d3-voronoi/src/RedBlackTree.js"),f=1e-6,h=1e-12;function p(e,t){return t[1]-e[1]||t[0]-e[0]}function m(e,t){var n,f,h,m=e.sort(p).pop();for(u=[],o=new Array(e.length),r=new l.default,i=new l.default;;)if(h=a.firstCircle,m&&(!h||m[1]<h.y||m[1]===h.y&&m[0]<h.x))m[0]===n&&m[1]===f||(Object(s.addBeach)(m),n=m[0],f=m[1]),m=e.pop();else{if(!h)break;Object(s.removeBeach)(h.arc)}if(Object(c.sortCellHalfedges)(),t){var _=+t[0][0],v=+t[0][1],g=+t[1][0],b=+t[1][1];Object(d.clipEdges)(_,v,g,b),Object(c.clipCells)(_,v,g,b)}this.edges=u,this.cells=o,r=i=u=o=null}m.prototype={constructor:m,polygons:function(){var e=this.edges;return this.cells.map((function(t){var n=t.halfedges.map((function(n){return Object(c.cellHalfedgeStart)(t,e[n])}));return n.data=t.site.data,n}))},triangles:function(){var e=[],t=this.edges;return this.cells.forEach((function(n,r){if(i=(o=n.halfedges).length)for(var o,i,u,s,c,a,d=n.site,l=-1,f=t[o[i-1]],h=f.left===d?f.right:f.left;++l<i;)u=h,h=(f=t[o[l]]).left===d?f.right:f.left,u&&h&&r<u.index&&r<h.index&&(c=u,a=h,((s=d)[0]-a[0])*(c[1]-s[1])-(s[0]-c[0])*(a[1]-s[1])<0)&&e.push([d.data,u.data,h.data])})),e},links:function(){return this.edges.filter((function(e){return e.right})).map((function(e){return{source:e.left.data,target:e.right.data}}))},find:function(e,t,n){for(var r,o,i=this,u=i._found||0,s=i.cells.length;!(o=i.cells[u]);)if(++u>=s)return null;var c=e-o.site[0],a=t-o.site[1],d=c*c+a*a;do{o=i.cells[r=u],u=null,o.halfedges.forEach((function(n){var r=i.edges[n],s=r.left;if(s!==o.site&&s||(s=r.right)){var c=e-s[0],a=t-s[1],l=c*c+a*a;l<d&&(d=l,u=s.index)}}))}while(null!==u);return i._found=r,null==n||d<=n*n?o.site:null}}},"./node_modules/d3-voronoi/src/Edge.js":function(e,t,n){"use strict";n.r(t),n.d(t,"createEdge",(function(){return o})),n.d(t,"createBorderEdge",(function(){return i})),n.d(t,"setEdgeEnd",(function(){return u})),n.d(t,"clipEdges",(function(){return a}));var r=n("./node_modules/d3-voronoi/src/Diagram.js");function o(e,t,n,o){var i=[null,null],s=r.edges.push(i)-1;return i.left=e,i.right=t,n&&u(i,e,t,n),o&&u(i,t,e,o),r.cells[e.index].halfedges.push(s),r.cells[t.index].halfedges.push(s),i}function i(e,t,n){var r=[t,n];return r.left=e,r}function u(e,t,n,r){e[0]||e[1]?e.left===n?e[1]=r:e[0]=r:(e[0]=r,e.left=t,e.right=n)}function s(e,t,n,r,o){var i,u=e[0],s=e[1],c=u[0],a=u[1],d=0,l=1,f=s[0]-c,h=s[1]-a;if(i=t-c,f||!(i>0)){if(i/=f,f<0){if(i<d)return;i<l&&(l=i)}else if(f>0){if(i>l)return;i>d&&(d=i)}if(i=r-c,f||!(i<0)){if(i/=f,f<0){if(i>l)return;i>d&&(d=i)}else if(f>0){if(i<d)return;i<l&&(l=i)}if(i=n-a,h||!(i>0)){if(i/=h,h<0){if(i<d)return;i<l&&(l=i)}else if(h>0){if(i>l)return;i>d&&(d=i)}if(i=o-a,h||!(i<0)){if(i/=h,h<0){if(i>l)return;i>d&&(d=i)}else if(h>0){if(i<d)return;i<l&&(l=i)}return!(d>0||l<1)||(d>0&&(e[0]=[c+d*f,a+d*h]),l<1&&(e[1]=[c+l*f,a+l*h]),!0)}}}}}function c(e,t,n,r,o){var i=e[1];if(i)return!0;var u,s,c=e[0],a=e.left,d=e.right,l=a[0],f=a[1],h=d[0],p=d[1],m=(l+h)/2,_=(f+p)/2;if(p===f){if(m<t||m>=r)return;if(l>h){if(c){if(c[1]>=o)return}else c=[m,n];i=[m,o]}else{if(c){if(c[1]<n)return}else c=[m,o];i=[m,n]}}else if(s=_-(u=(l-h)/(p-f))*m,u<-1||u>1)if(l>h){if(c){if(c[1]>=o)return}else c=[(n-s)/u,n];i=[(o-s)/u,o]}else{if(c){if(c[1]<n)return}else c=[(o-s)/u,o];i=[(n-s)/u,n]}else if(f<p){if(c){if(c[0]>=r)return}else c=[t,u*t+s];i=[r,u*r+s]}else{if(c){if(c[0]<t)return}else c=[r,u*r+s];i=[t,u*t+s]}return e[0]=c,e[1]=i,!0}function a(e,t,n,o){for(var i,u=r.edges.length;u--;)c(i=r.edges[u],e,t,n,o)&&s(i,e,t,n,o)&&(Math.abs(i[0][0]-i[1][0])>r.epsilon||Math.abs(i[0][1]-i[1][1])>r.epsilon)||delete r.edges[u]}},"./node_modules/d3-voronoi/src/RedBlackTree.js":function(e,t,n){"use strict";function r(){this._=null}function o(e){e.U=e.C=e.L=e.R=e.P=e.N=null}function i(e,t){var n=t,r=t.R,o=n.U;o?o.L===n?o.L=r:o.R=r:e._=r,r.U=o,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function u(e,t){var n=t,r=t.L,o=n.U;o?o.L===n?o.L=r:o.R=r:e._=r,r.U=o,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function s(e){for(;e.L;)e=e.L;return e}n.r(t),n.d(t,"RedBlackNode",(function(){return o})),r.prototype={constructor:r,insert:function(e,t){var n,r,o;if(e){if(t.P=e,t.N=e.N,e.N&&(e.N.P=t),e.N=t,e.R){for(e=e.R;e.L;)e=e.L;e.L=t}else e.R=t;n=e}else this._?(e=s(this._),t.P=null,t.N=e,e.P=e.L=t,n=e):(t.P=t.N=null,this._=t,n=null);for(t.L=t.R=null,t.U=n,t.C=!0,e=t;n&&n.C;)n===(r=n.U).L?(o=r.R)&&o.C?(n.C=o.C=!1,r.C=!0,e=r):(e===n.R&&(i(this,n),n=(e=n).U),n.C=!1,r.C=!0,u(this,r)):(o=r.L)&&o.C?(n.C=o.C=!1,r.C=!0,e=r):(e===n.L&&(u(this,n),n=(e=n).U),n.C=!1,r.C=!0,i(this,r)),n=e.U;this._.C=!1},remove:function(e){e.N&&(e.N.P=e.P),e.P&&(e.P.N=e.N),e.N=e.P=null;var t,n,r,o=e.U,c=e.L,a=e.R;if(n=c?a?s(a):c:a,o?o.L===e?o.L=n:o.R=n:this._=n,c&&a?(r=n.C,n.C=e.C,n.L=c,c.U=n,n!==a?(o=n.U,n.U=e.U,e=n.R,o.L=e,n.R=a,a.U=n):(n.U=o,o=n,e=n.R)):(r=e.C,e=n),e&&(e.U=o),!r)if(e&&e.C)e.C=!1;else{do{if(e===this._)break;if(e===o.L){if((t=o.R).C&&(t.C=!1,o.C=!0,i(this,o),t=o.R),t.L&&t.L.C||t.R&&t.R.C){t.R&&t.R.C||(t.L.C=!1,t.C=!0,u(this,t),t=o.R),t.C=o.C,o.C=t.R.C=!1,i(this,o),e=this._;break}}else if((t=o.L).C&&(t.C=!1,o.C=!0,u(this,o),t=o.L),t.L&&t.L.C||t.R&&t.R.C){t.L&&t.L.C||(t.R.C=!1,t.C=!0,i(this,t),t=o.L),t.C=o.C,o.C=t.L.C=!1,u(this,o),e=this._;break}t.C=!0,e=o,o=o.U}while(!e.C);e&&(e.C=!1)}}},t.default=r},"./node_modules/d3-voronoi/src/constant.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return e}}},"./node_modules/d3-voronoi/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-voronoi/src/voronoi.js");n.d(t,"voronoi",(function(){return r.default}))},"./node_modules/d3-voronoi/src/point.js":function(e,t,n){"use strict";function r(e){return e[0]}function o(e){return e[1]}n.r(t),n.d(t,"x",(function(){return r})),n.d(t,"y",(function(){return o}))},"./node_modules/d3-voronoi/src/voronoi.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-voronoi/src/constant.js"),o=n("./node_modules/d3-voronoi/src/point.js"),i=n("./node_modules/d3-voronoi/src/Diagram.js");t.default=function(){var e=o.x,t=o.y,n=null;function u(r){return new i.default(r.map((function(n,o){var u=[Math.round(e(n,o,r)/i.epsilon)*i.epsilon,Math.round(t(n,o,r)/i.epsilon)*i.epsilon];return u.index=o,u.data=n,u})),n)}return u.polygons=function(e){return u(e).polygons()},u.links=function(e){return u(e).links()},u.triangles=function(e){return u(e).triangles()},u.x=function(t){return arguments.length?(e="function"==typeof t?t:Object(r.default)(+t),u):e},u.y=function(e){return arguments.length?(t="function"==typeof e?e:Object(r.default)(+e),u):t},u.extent=function(e){return arguments.length?(n=null==e?null:[[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]],u):n&&[[n[0][0],n[0][1]],[n[1][0],n[1][1]]]},u.size=function(e){return arguments.length?(n=null==e?null:[[0,0],[+e[0],+e[1]]],u):n&&[n[1][0]-n[0][0],n[1][1]-n[0][1]]},u}},"./node_modules/d3-zoom/src/constant.js":function(e,t,n){"use strict";n.r(t),t.default=function(e){return function(){return e}}},"./node_modules/d3-zoom/src/event.js":function(e,t,n){"use strict";function r(e,t,n){this.target=e,this.type=t,this.transform=n}n.r(t),n.d(t,"default",(function(){return r}))},"./node_modules/d3-zoom/src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-zoom/src/zoom.js");n.d(t,"zoom",(function(){return r.default}));var o=n("./node_modules/d3-zoom/src/transform.js");n.d(t,"zoomTransform",(function(){return o.default})),n.d(t,"zoomIdentity",(function(){return o.identity}))},"./node_modules/d3-zoom/src/noevent.js":function(e,t,n){"use strict";n.r(t),n.d(t,"nopropagation",(function(){return o}));var r=n("./node_modules/d3-selection/src/index.js");function o(){r.event.stopImmediatePropagation()}t.default=function(){r.event.preventDefault(),r.event.stopImmediatePropagation()}},"./node_modules/d3-zoom/src/transform.js":function(e,t,n){"use strict";function r(e,t,n){this.k=e,this.x=t,this.y=n}n.r(t),n.d(t,"Transform",(function(){return r})),n.d(t,"identity",(function(){return o})),n.d(t,"default",(function(){return i})),r.prototype={constructor:r,scale:function(e){return 1===e?this:new r(this.k*e,this.x,this.y)},translate:function(e,t){return 0===e&0===t?this:new r(this.k,this.x+this.k*e,this.y+this.k*t)},apply:function(e){return[e[0]*this.k+this.x,e[1]*this.k+this.y]},applyX:function(e){return e*this.k+this.x},applyY:function(e){return e*this.k+this.y},invert:function(e){return[(e[0]-this.x)/this.k,(e[1]-this.y)/this.k]},invertX:function(e){return(e-this.x)/this.k},invertY:function(e){return(e-this.y)/this.k},rescaleX:function(e){return e.copy().domain(e.range().map(this.invertX,this).map(e.invert,e))},rescaleY:function(e){return e.copy().domain(e.range().map(this.invertY,this).map(e.invert,e))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var o=new r(1,0,0);function i(e){for(;!e.__zoom;)if(!(e=e.parentNode))return o;return e.__zoom}i.prototype=r.prototype},"./node_modules/d3-zoom/src/zoom.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3-dispatch/src/index.js"),o=n("./node_modules/d3-drag/src/index.js"),i=n("./node_modules/d3-interpolate/src/index.js"),u=n("./node_modules/d3-selection/src/index.js"),s=n("./node_modules/d3-transition/src/index.js"),c=n("./node_modules/d3-zoom/src/constant.js"),a=n("./node_modules/d3-zoom/src/event.js"),d=n("./node_modules/d3-zoom/src/transform.js"),l=n("./node_modules/d3-zoom/src/noevent.js");function f(){return!u.event.ctrlKey&&!u.event.button}function h(){var e=this;return e instanceof SVGElement?(e=e.ownerSVGElement||e).hasAttribute("viewBox")?[[(e=e.viewBox.baseVal).x,e.y],[e.x+e.width,e.y+e.height]]:[[0,0],[e.width.baseVal.value,e.height.baseVal.value]]:[[0,0],[e.clientWidth,e.clientHeight]]}function p(){return this.__zoom||d.identity}function m(){return-u.event.deltaY*(1===u.event.deltaMode?.05:u.event.deltaMode?1:.002)}function _(){return navigator.maxTouchPoints||"ontouchstart"in this}function v(e,t,n){var r=e.invertX(t[0][0])-n[0][0],o=e.invertX(t[1][0])-n[1][0],i=e.invertY(t[0][1])-n[0][1],u=e.invertY(t[1][1])-n[1][1];return e.translate(o>r?(r+o)/2:Math.min(0,r)||Math.max(0,o),u>i?(i+u)/2:Math.min(0,i)||Math.max(0,u))}t.default=function(){var e,t,n=f,g=h,b=v,j=m,y=_,x=[0,1/0],w=[[-1/0,-1/0],[1/0,1/0]],O=250,M=i.interpolateZoom,S=Object(r.dispatch)("start","zoom","end"),A=0;function P(e){e.property("__zoom",p).on("wheel.zoom",q).on("mousedown.zoom",B).on("dblclick.zoom",I).filter(y).on("touchstart.zoom",D).on("touchmove.zoom",L).on("touchend.zoom touchcancel.zoom",z).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function k(e,t){return(t=Math.max(x[0],Math.min(x[1],t)))===e.k?e:new d.Transform(t,e.x,e.y)}function C(e,t,n){var r=t[0]-n[0]*e.k,o=t[1]-n[1]*e.k;return r===e.x&&o===e.y?e:new d.Transform(e.k,r,o)}function T(e){return[(+e[0][0]+ +e[1][0])/2,(+e[0][1]+ +e[1][1])/2]}function E(e,t,n){e.on("start.zoom",(function(){R(this,arguments).start()})).on("interrupt.zoom end.zoom",(function(){R(this,arguments).end()})).tween("zoom",(function(){var e=this,r=arguments,o=R(e,r),i=g.apply(e,r),u=null==n?T(i):"function"==typeof n?n.apply(e,r):n,s=Math.max(i[1][0]-i[0][0],i[1][1]-i[0][1]),c=e.__zoom,a="function"==typeof t?t.apply(e,r):t,l=M(c.invert(u).concat(s/c.k),a.invert(u).concat(s/a.k));return function(e){if(1===e)e=a;else{var t=l(e),n=s/t[2];e=new d.Transform(n,u[0]-t[0]*n,u[1]-t[1]*n)}o.zoom(null,e)}}))}function R(e,t,n){return!n&&e.__zooming||new N(e,t)}function N(e,t){this.that=e,this.args=t,this.active=0,this.extent=g.apply(e,t),this.taps=0}function q(){if(n.apply(this,arguments)){var e=R(this,arguments),t=this.__zoom,r=Math.max(x[0],Math.min(x[1],t.k*Math.pow(2,j.apply(this,arguments)))),o=Object(u.mouse)(this);if(e.wheel)e.mouse[0][0]===o[0]&&e.mouse[0][1]===o[1]||(e.mouse[1]=t.invert(e.mouse[0]=o)),clearTimeout(e.wheel);else{if(t.k===r)return;e.mouse=[o,t.invert(o)],Object(s.interrupt)(this),e.start()}Object(l.default)(),e.wheel=setTimeout(i,150),e.zoom("mouse",b(C(k(t,r),e.mouse[0],e.mouse[1]),e.extent,w))}function i(){e.wheel=null,e.end()}}function B(){if(!t&&n.apply(this,arguments)){var e=R(this,arguments,!0),r=Object(u.select)(u.event.view).on("mousemove.zoom",d,!0).on("mouseup.zoom",f,!0),i=Object(u.mouse)(this),c=u.event.clientX,a=u.event.clientY;Object(o.dragDisable)(u.event.view),Object(l.nopropagation)(),e.mouse=[i,this.__zoom.invert(i)],Object(s.interrupt)(this),e.start()}function d(){if(Object(l.default)(),!e.moved){var t=u.event.clientX-c,n=u.event.clientY-a;e.moved=t*t+n*n>A}e.zoom("mouse",b(C(e.that.__zoom,e.mouse[0]=Object(u.mouse)(e.that),e.mouse[1]),e.extent,w))}function f(){r.on("mousemove.zoom mouseup.zoom",null),Object(o.dragEnable)(u.event.view,e.moved),Object(l.default)(),e.end()}}function I(){if(n.apply(this,arguments)){var e=this.__zoom,t=Object(u.mouse)(this),r=e.invert(t),o=e.k*(u.event.shiftKey?.5:2),i=b(C(k(e,o),t,r),g.apply(this,arguments),w);Object(l.default)(),O>0?Object(u.select)(this).transition().duration(O).call(E,i,t):Object(u.select)(this).call(P.transform,i)}}function D(){if(n.apply(this,arguments)){var t,r,o,i,c=u.event.touches,a=c.length,d=R(this,arguments,u.event.changedTouches.length===a);for(Object(l.nopropagation)(),r=0;r<a;++r)o=c[r],i=[i=Object(u.touch)(this,c,o.identifier),this.__zoom.invert(i),o.identifier],d.touch0?d.touch1||d.touch0[2]===i[2]||(d.touch1=i,d.taps=0):(d.touch0=i,t=!0,d.taps=1+!!e);e&&(e=clearTimeout(e)),t&&(d.taps<2&&(e=setTimeout((function(){e=null}),500)),Object(s.interrupt)(this),d.start())}}function L(){if(this.__zooming){var t,n,r,o,i=R(this,arguments),s=u.event.changedTouches,c=s.length;for(Object(l.default)(),e&&(e=clearTimeout(e)),i.taps=0,t=0;t<c;++t)n=s[t],r=Object(u.touch)(this,s,n.identifier),i.touch0&&i.touch0[2]===n.identifier?i.touch0[0]=r:i.touch1&&i.touch1[2]===n.identifier&&(i.touch1[0]=r);if(n=i.that.__zoom,i.touch1){var a=i.touch0[0],d=i.touch0[1],f=i.touch1[0],h=i.touch1[1],p=(p=f[0]-a[0])*p+(p=f[1]-a[1])*p,m=(m=h[0]-d[0])*m+(m=h[1]-d[1])*m;n=k(n,Math.sqrt(p/m)),r=[(a[0]+f[0])/2,(a[1]+f[1])/2],o=[(d[0]+h[0])/2,(d[1]+h[1])/2]}else{if(!i.touch0)return;r=i.touch0[0],o=i.touch0[1]}i.zoom("touch",b(C(n,r,o),i.extent,w))}}function z(){if(this.__zooming){var e,n,r=R(this,arguments),o=u.event.changedTouches,i=o.length;for(Object(l.nopropagation)(),t&&clearTimeout(t),t=setTimeout((function(){t=null}),500),e=0;e<i;++e)n=o[e],r.touch0&&r.touch0[2]===n.identifier?delete r.touch0:r.touch1&&r.touch1[2]===n.identifier&&delete r.touch1;if(r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0)r.touch0[1]=this.__zoom.invert(r.touch0[0]);else if(r.end(),2===r.taps){var s=Object(u.select)(this).on("dblclick.zoom");s&&s.apply(this,arguments)}}}return P.transform=function(e,t,n){var r=e.selection?e.selection():e;r.property("__zoom",p),e!==r?E(e,t,n):r.interrupt().each((function(){R(this,arguments).start().zoom(null,"function"==typeof t?t.apply(this,arguments):t).end()}))},P.scaleBy=function(e,t,n){P.scaleTo(e,(function(){var e=this.__zoom.k,n="function"==typeof t?t.apply(this,arguments):t;return e*n}),n)},P.scaleTo=function(e,t,n){P.transform(e,(function(){var e=g.apply(this,arguments),r=this.__zoom,o=null==n?T(e):"function"==typeof n?n.apply(this,arguments):n,i=r.invert(o),u="function"==typeof t?t.apply(this,arguments):t;return b(C(k(r,u),o,i),e,w)}),n)},P.translateBy=function(e,t,n){P.transform(e,(function(){return b(this.__zoom.translate("function"==typeof t?t.apply(this,arguments):t,"function"==typeof n?n.apply(this,arguments):n),g.apply(this,arguments),w)}))},P.translateTo=function(e,t,n,r){P.transform(e,(function(){var e=g.apply(this,arguments),o=this.__zoom,i=null==r?T(e):"function"==typeof r?r.apply(this,arguments):r;return b(d.identity.translate(i[0],i[1]).scale(o.k).translate("function"==typeof t?-t.apply(this,arguments):-t,"function"==typeof n?-n.apply(this,arguments):-n),e,w)}),r)},N.prototype={start:function(){return 1==++this.active&&(this.that.__zooming=this,this.emit("start")),this},zoom:function(e,t){return this.mouse&&"mouse"!==e&&(this.mouse[1]=t.invert(this.mouse[0])),this.touch0&&"touch"!==e&&(this.touch0[1]=t.invert(this.touch0[0])),this.touch1&&"touch"!==e&&(this.touch1[1]=t.invert(this.touch1[0])),this.that.__zoom=t,this.emit("zoom"),this},end:function(){return 0==--this.active&&(delete this.that.__zooming,this.emit("end")),this},emit:function(e){Object(u.customEvent)(new a.default(P,e,this.that.__zoom),S.apply,S,[e,this.that,this.args])}},P.wheelDelta=function(e){return arguments.length?(j="function"==typeof e?e:Object(c.default)(+e),P):j},P.filter=function(e){return arguments.length?(n="function"==typeof e?e:Object(c.default)(!!e),P):n},P.touchable=function(e){return arguments.length?(y="function"==typeof e?e:Object(c.default)(!!e),P):y},P.extent=function(e){return arguments.length?(g="function"==typeof e?e:Object(c.default)([[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]]),P):g},P.scaleExtent=function(e){return arguments.length?(x[0]=+e[0],x[1]=+e[1],P):[x[0],x[1]]},P.translateExtent=function(e){return arguments.length?(w[0][0]=+e[0][0],w[1][0]=+e[1][0],w[0][1]=+e[0][1],w[1][1]=+e[1][1],P):[[w[0][0],w[0][1]],[w[1][0],w[1][1]]]},P.constrain=function(e){return arguments.length?(b=e,P):b},P.duration=function(e){return arguments.length?(O=+e,P):O},P.interpolate=function(e){return arguments.length?(M=e,P):M},P.on=function(){var e=S.on.apply(S,arguments);return e===S?P:e},P.clickDistance=function(e){return arguments.length?(A=(e=+e)*e,P):Math.sqrt(A)},P}},"./node_modules/d3/dist/package.js":function(e,t,n){"use strict";n.r(t),n.d(t,"name",(function(){return r})),n.d(t,"version",(function(){return o})),n.d(t,"description",(function(){return i})),n.d(t,"keywords",(function(){return u})),n.d(t,"homepage",(function(){return s})),n.d(t,"license",(function(){return c})),n.d(t,"author",(function(){return a})),n.d(t,"main",(function(){return d})),n.d(t,"unpkg",(function(){return l})),n.d(t,"jsdelivr",(function(){return f})),n.d(t,"module",(function(){return e})),n.d(t,"repository",(function(){return h})),n.d(t,"files",(function(){return p})),n.d(t,"scripts",(function(){return m})),n.d(t,"devDependencies",(function(){return _})),n.d(t,"dependencies",(function(){return v}));var r="d3",o="5.16.0",i="Data-Driven Documents",u=["dom","visualization","svg","animation","canvas"],s="https://d3js.org",c="BSD-3-Clause",a={name:"Mike Bostock",url:"https://bost.ocks.org/mike"},d="dist/d3.node.js",l="dist/d3.min.js",f="dist/d3.min.js",h=(e="index.js",{type:"git",url:"https://github.com/d3/d3.git"}),p=["dist/**/*.js","index.js"],m={pretest:"rimraf dist && mkdir dist && json2module package.json > dist/package.js && rollup -c",test:"tape 'test/**/*-test.js'",prepublishOnly:"yarn test",postpublish:'git push && git push --tags && cd ../d3.github.com && git pull && cp ../d3/dist/d3.js d3.v5.js && cp ../d3/dist/d3.min.js d3.v5.min.js && git add d3.v5.js d3.v5.min.js && git commit -m "d3 ${npm_package_version}" && git push && cd - && cd ../d3-bower && git pull && cp ../d3/LICENSE ../d3/README.md ../d3/dist/d3.js ../d3/dist/d3.min.js . && git add -- LICENSE README.md d3.js d3.min.js && git commit -m "${npm_package_version}" && git tag -am "${npm_package_version}" v${npm_package_version} && git push && git push --tags && cd - && zip -j dist/d3.zip -- LICENSE README.md API.md CHANGES.md dist/d3.js dist/d3.min.js'},_={json2module:"0.0",rimraf:"2",rollup:"1","rollup-plugin-ascii":"0.0","rollup-plugin-node-resolve":"3","rollup-plugin-terser":"5",tape:"4"},v={"d3-array":"1","d3-axis":"1","d3-brush":"1","d3-chord":"1","d3-collection":"1","d3-color":"1","d3-contour":"1","d3-dispatch":"1","d3-drag":"1","d3-dsv":"1","d3-ease":"1","d3-fetch":"1","d3-force":"1","d3-format":"1","d3-geo":"1","d3-hierarchy":"1","d3-interpolate":"1","d3-path":"1","d3-polygon":"1","d3-quadtree":"1","d3-random":"1","d3-scale":"2","d3-scale-chromatic":"1","d3-selection":"1","d3-shape":"1","d3-time":"1","d3-time-format":"2","d3-timer":"1","d3-transition":"1","d3-voronoi":"1","d3-zoom":"1"}},"./node_modules/d3/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3/dist/package.js");n.d(t,"version",(function(){return r.version}));var o=n("./node_modules/d3-array/src/index.js");n.d(t,"bisect",(function(){return o.bisect})),n.d(t,"bisectRight",(function(){return o.bisectRight})),n.d(t,"bisectLeft",(function(){return o.bisectLeft})),n.d(t,"ascending",(function(){return o.ascending})),n.d(t,"bisector",(function(){return o.bisector})),n.d(t,"cross",(function(){return o.cross})),n.d(t,"descending",(function(){return o.descending})),n.d(t,"deviation",(function(){return o.deviation})),n.d(t,"extent",(function(){return o.extent})),n.d(t,"histogram",(function(){return o.histogram})),n.d(t,"thresholdFreedmanDiaconis",(function(){return o.thresholdFreedmanDiaconis})),n.d(t,"thresholdScott",(function(){return o.thresholdScott})),n.d(t,"thresholdSturges",(function(){return o.thresholdSturges})),n.d(t,"max",(function(){return o.max})),n.d(t,"mean",(function(){return o.mean})),n.d(t,"median",(function(){return o.median})),n.d(t,"merge",(function(){return o.merge})),n.d(t,"min",(function(){return o.min})),n.d(t,"pairs",(function(){return o.pairs})),n.d(t,"permute",(function(){return o.permute})),n.d(t,"quantile",(function(){return o.quantile})),n.d(t,"range",(function(){return o.range})),n.d(t,"scan",(function(){return o.scan})),n.d(t,"shuffle",(function(){return o.shuffle})),n.d(t,"sum",(function(){return o.sum})),n.d(t,"ticks",(function(){return o.ticks})),n.d(t,"tickIncrement",(function(){return o.tickIncrement})),n.d(t,"tickStep",(function(){return o.tickStep})),n.d(t,"transpose",(function(){return o.transpose})),n.d(t,"variance",(function(){return o.variance})),n.d(t,"zip",(function(){return o.zip}));var i=n("./node_modules/d3-axis/src/index.js");n.d(t,"axisTop",(function(){return i.axisTop})),n.d(t,"axisRight",(function(){return i.axisRight})),n.d(t,"axisBottom",(function(){return i.axisBottom})),n.d(t,"axisLeft",(function(){return i.axisLeft}));var u=n("./node_modules/d3-brush/src/index.js");n.d(t,"brush",(function(){return u.brush})),n.d(t,"brushX",(function(){return u.brushX})),n.d(t,"brushY",(function(){return u.brushY})),n.d(t,"brushSelection",(function(){return u.brushSelection}));var s=n("./node_modules/d3-chord/src/index.js");n.d(t,"chord",(function(){return s.chord})),n.d(t,"ribbon",(function(){return s.ribbon}));var c=n("./node_modules/d3-collection/src/index.js");n.d(t,"nest",(function(){return c.nest})),n.d(t,"set",(function(){return c.set})),n.d(t,"map",(function(){return c.map})),n.d(t,"keys",(function(){return c.keys})),n.d(t,"values",(function(){return c.values})),n.d(t,"entries",(function(){return c.entries}));var a=n("./node_modules/d3-color/src/index.js");n.d(t,"color",(function(){return a.color})),n.d(t,"rgb",(function(){return a.rgb})),n.d(t,"hsl",(function(){return a.hsl})),n.d(t,"lab",(function(){return a.lab})),n.d(t,"hcl",(function(){return a.hcl})),n.d(t,"lch",(function(){return a.lch})),n.d(t,"gray",(function(){return a.gray})),n.d(t,"cubehelix",(function(){return a.cubehelix}));var d=n("./node_modules/d3-contour/src/index.js");n.d(t,"contours",(function(){return d.contours})),n.d(t,"contourDensity",(function(){return d.contourDensity}));var l=n("./node_modules/d3-dispatch/src/index.js");n.d(t,"dispatch",(function(){return l.dispatch}));var f=n("./node_modules/d3-drag/src/index.js");n.d(t,"drag",(function(){return f.drag})),n.d(t,"dragDisable",(function(){return f.dragDisable})),n.d(t,"dragEnable",(function(){return f.dragEnable}));var h=n("./node_modules/d3-dsv/src/index.js");n.d(t,"dsvFormat",(function(){return h.dsvFormat})),n.d(t,"csvParse",(function(){return h.csvParse})),n.d(t,"csvParseRows",(function(){return h.csvParseRows})),n.d(t,"csvFormat",(function(){return h.csvFormat})),n.d(t,"csvFormatBody",(function(){return h.csvFormatBody})),n.d(t,"csvFormatRows",(function(){return h.csvFormatRows})),n.d(t,"csvFormatRow",(function(){return h.csvFormatRow})),n.d(t,"csvFormatValue",(function(){return h.csvFormatValue})),n.d(t,"tsvParse",(function(){return h.tsvParse})),n.d(t,"tsvParseRows",(function(){return h.tsvParseRows})),n.d(t,"tsvFormat",(function(){return h.tsvFormat})),n.d(t,"tsvFormatBody",(function(){return h.tsvFormatBody})),n.d(t,"tsvFormatRows",(function(){return h.tsvFormatRows})),n.d(t,"tsvFormatRow",(function(){return h.tsvFormatRow})),n.d(t,"tsvFormatValue",(function(){return h.tsvFormatValue})),n.d(t,"autoType",(function(){return h.autoType}));var p=n("./node_modules/d3-ease/src/index.js");n.d(t,"easeLinear",(function(){return p.easeLinear})),n.d(t,"easeQuad",(function(){return p.easeQuad})),n.d(t,"easeQuadIn",(function(){return p.easeQuadIn})),n.d(t,"easeQuadOut",(function(){return p.easeQuadOut})),n.d(t,"easeQuadInOut",(function(){return p.easeQuadInOut})),n.d(t,"easeCubic",(function(){return p.easeCubic})),n.d(t,"easeCubicIn",(function(){return p.easeCubicIn})),n.d(t,"easeCubicOut",(function(){return p.easeCubicOut})),n.d(t,"easeCubicInOut",(function(){return p.easeCubicInOut})),n.d(t,"easePoly",(function(){return p.easePoly})),n.d(t,"easePolyIn",(function(){return p.easePolyIn})),n.d(t,"easePolyOut",(function(){return p.easePolyOut})),n.d(t,"easePolyInOut",(function(){return p.easePolyInOut})),n.d(t,"easeSin",(function(){return p.easeSin})),n.d(t,"easeSinIn",(function(){return p.easeSinIn})),n.d(t,"easeSinOut",(function(){return p.easeSinOut})),n.d(t,"easeSinInOut",(function(){return p.easeSinInOut})),n.d(t,"easeExp",(function(){return p.easeExp})),n.d(t,"easeExpIn",(function(){return p.easeExpIn})),n.d(t,"easeExpOut",(function(){return p.easeExpOut})),n.d(t,"easeExpInOut",(function(){return p.easeExpInOut})),n.d(t,"easeCircle",(function(){return p.easeCircle})),n.d(t,"easeCircleIn",(function(){return p.easeCircleIn})),n.d(t,"easeCircleOut",(function(){return p.easeCircleOut})),n.d(t,"easeCircleInOut",(function(){return p.easeCircleInOut})),n.d(t,"easeBounce",(function(){return p.easeBounce})),n.d(t,"easeBounceIn",(function(){return p.easeBounceIn})),n.d(t,"easeBounceOut",(function(){return p.easeBounceOut})),n.d(t,"easeBounceInOut",(function(){return p.easeBounceInOut})),n.d(t,"easeBack",(function(){return p.easeBack})),n.d(t,"easeBackIn",(function(){return p.easeBackIn})),n.d(t,"easeBackOut",(function(){return p.easeBackOut})),n.d(t,"easeBackInOut",(function(){return p.easeBackInOut})),n.d(t,"easeElastic",(function(){return p.easeElastic})),n.d(t,"easeElasticIn",(function(){return p.easeElasticIn})),n.d(t,"easeElasticOut",(function(){return p.easeElasticOut})),n.d(t,"easeElasticInOut",(function(){return p.easeElasticInOut}));var m=n("./node_modules/d3-fetch/src/index.js");n.d(t,"blob",(function(){return m.blob})),n.d(t,"buffer",(function(){return m.buffer})),n.d(t,"dsv",(function(){return m.dsv})),n.d(t,"csv",(function(){return m.csv})),n.d(t,"tsv",(function(){return m.tsv})),n.d(t,"image",(function(){return m.image})),n.d(t,"json",(function(){return m.json})),n.d(t,"text",(function(){return m.text})),n.d(t,"xml",(function(){return m.xml})),n.d(t,"html",(function(){return m.html})),n.d(t,"svg",(function(){return m.svg}));var _=n("./node_modules/d3-force/src/index.js");n.d(t,"forceCenter",(function(){return _.forceCenter})),n.d(t,"forceCollide",(function(){return _.forceCollide})),n.d(t,"forceLink",(function(){return _.forceLink})),n.d(t,"forceManyBody",(function(){return _.forceManyBody})),n.d(t,"forceRadial",(function(){return _.forceRadial})),n.d(t,"forceSimulation",(function(){return _.forceSimulation})),n.d(t,"forceX",(function(){return _.forceX})),n.d(t,"forceY",(function(){return _.forceY}));var v=n("./node_modules/d3-format/src/index.js");n.d(t,"formatDefaultLocale",(function(){return v.formatDefaultLocale})),n.d(t,"format",(function(){return v.format})),n.d(t,"formatPrefix",(function(){return v.formatPrefix})),n.d(t,"formatLocale",(function(){return v.formatLocale})),n.d(t,"formatSpecifier",(function(){return v.formatSpecifier})),n.d(t,"FormatSpecifier",(function(){return v.FormatSpecifier})),n.d(t,"precisionFixed",(function(){return v.precisionFixed})),n.d(t,"precisionPrefix",(function(){return v.precisionPrefix})),n.d(t,"precisionRound",(function(){return v.precisionRound}));var g=n("./node_modules/d3-geo/src/index.js");n.d(t,"geoArea",(function(){return g.geoArea})),n.d(t,"geoBounds",(function(){return g.geoBounds})),n.d(t,"geoCentroid",(function(){return g.geoCentroid})),n.d(t,"geoCircle",(function(){return g.geoCircle})),n.d(t,"geoClipAntimeridian",(function(){return g.geoClipAntimeridian})),n.d(t,"geoClipCircle",(function(){return g.geoClipCircle})),n.d(t,"geoClipExtent",(function(){return g.geoClipExtent})),n.d(t,"geoClipRectangle",(function(){return g.geoClipRectangle})),n.d(t,"geoContains",(function(){return g.geoContains})),n.d(t,"geoDistance",(function(){return g.geoDistance})),n.d(t,"geoGraticule",(function(){return g.geoGraticule})),n.d(t,"geoGraticule10",(function(){return g.geoGraticule10})),n.d(t,"geoInterpolate",(function(){return g.geoInterpolate})),n.d(t,"geoLength",(function(){return g.geoLength})),n.d(t,"geoPath",(function(){return g.geoPath})),n.d(t,"geoAlbers",(function(){return g.geoAlbers})),n.d(t,"geoAlbersUsa",(function(){return g.geoAlbersUsa})),n.d(t,"geoAzimuthalEqualArea",(function(){return g.geoAzimuthalEqualArea})),n.d(t,"geoAzimuthalEqualAreaRaw",(function(){return g.geoAzimuthalEqualAreaRaw})),n.d(t,"geoAzimuthalEquidistant",(function(){return g.geoAzimuthalEquidistant})),n.d(t,"geoAzimuthalEquidistantRaw",(function(){return g.geoAzimuthalEquidistantRaw})),n.d(t,"geoConicConformal",(function(){return g.geoConicConformal})),n.d(t,"geoConicConformalRaw",(function(){return g.geoConicConformalRaw})),n.d(t,"geoConicEqualArea",(function(){return g.geoConicEqualArea})),n.d(t,"geoConicEqualAreaRaw",(function(){return g.geoConicEqualAreaRaw})),n.d(t,"geoConicEquidistant",(function(){return g.geoConicEquidistant})),n.d(t,"geoConicEquidistantRaw",(function(){return g.geoConicEquidistantRaw})),n.d(t,"geoEqualEarth",(function(){return g.geoEqualEarth})),n.d(t,"geoEqualEarthRaw",(function(){return g.geoEqualEarthRaw})),n.d(t,"geoEquirectangular",(function(){return g.geoEquirectangular})),n.d(t,"geoEquirectangularRaw",(function(){return g.geoEquirectangularRaw})),n.d(t,"geoGnomonic",(function(){return g.geoGnomonic})),n.d(t,"geoGnomonicRaw",(function(){return g.geoGnomonicRaw})),n.d(t,"geoIdentity",(function(){return g.geoIdentity})),n.d(t,"geoProjection",(function(){return g.geoProjection})),n.d(t,"geoProjectionMutator",(function(){return g.geoProjectionMutator})),n.d(t,"geoMercator",(function(){return g.geoMercator})),n.d(t,"geoMercatorRaw",(function(){return g.geoMercatorRaw})),n.d(t,"geoNaturalEarth1",(function(){return g.geoNaturalEarth1})),n.d(t,"geoNaturalEarth1Raw",(function(){return g.geoNaturalEarth1Raw})),n.d(t,"geoOrthographic",(function(){return g.geoOrthographic})),n.d(t,"geoOrthographicRaw",(function(){return g.geoOrthographicRaw})),n.d(t,"geoStereographic",(function(){return g.geoStereographic})),n.d(t,"geoStereographicRaw",(function(){return g.geoStereographicRaw})),n.d(t,"geoTransverseMercator",(function(){return g.geoTransverseMercator})),n.d(t,"geoTransverseMercatorRaw",(function(){return g.geoTransverseMercatorRaw})),n.d(t,"geoRotation",(function(){return g.geoRotation})),n.d(t,"geoStream",(function(){return g.geoStream})),n.d(t,"geoTransform",(function(){return g.geoTransform}));var b=n("./node_modules/d3-hierarchy/src/index.js");n.d(t,"cluster",(function(){return b.cluster})),n.d(t,"hierarchy",(function(){return b.hierarchy})),n.d(t,"pack",(function(){return b.pack})),n.d(t,"packSiblings",(function(){return b.packSiblings})),n.d(t,"packEnclose",(function(){return b.packEnclose})),n.d(t,"partition",(function(){return b.partition})),n.d(t,"stratify",(function(){return b.stratify})),n.d(t,"tree",(function(){return b.tree})),n.d(t,"treemap",(function(){return b.treemap})),n.d(t,"treemapBinary",(function(){return b.treemapBinary})),n.d(t,"treemapDice",(function(){return b.treemapDice})),n.d(t,"treemapSlice",(function(){return b.treemapSlice})),n.d(t,"treemapSliceDice",(function(){return b.treemapSliceDice})),n.d(t,"treemapSquarify",(function(){return b.treemapSquarify})),n.d(t,"treemapResquarify",(function(){return b.treemapResquarify}));var j=n("./node_modules/d3-interpolate/src/index.js");n.d(t,"interpolate",(function(){return j.interpolate})),n.d(t,"interpolateArray",(function(){return j.interpolateArray})),n.d(t,"interpolateBasis",(function(){return j.interpolateBasis})),n.d(t,"interpolateBasisClosed",(function(){return j.interpolateBasisClosed})),n.d(t,"interpolateDate",(function(){return j.interpolateDate})),n.d(t,"interpolateDiscrete",(function(){return j.interpolateDiscrete})),n.d(t,"interpolateHue",(function(){return j.interpolateHue})),n.d(t,"interpolateNumber",(function(){return j.interpolateNumber})),n.d(t,"interpolateNumberArray",(function(){return j.interpolateNumberArray})),n.d(t,"interpolateObject",(function(){return j.interpolateObject})),n.d(t,"interpolateRound",(function(){return j.interpolateRound})),n.d(t,"interpolateString",(function(){return j.interpolateString})),n.d(t,"interpolateTransformCss",(function(){return j.interpolateTransformCss})),n.d(t,"interpolateTransformSvg",(function(){return j.interpolateTransformSvg})),n.d(t,"interpolateZoom",(function(){return j.interpolateZoom})),n.d(t,"interpolateRgb",(function(){return j.interpolateRgb})),n.d(t,"interpolateRgbBasis",(function(){return j.interpolateRgbBasis})),n.d(t,"interpolateRgbBasisClosed",(function(){return j.interpolateRgbBasisClosed})),n.d(t,"interpolateHsl",(function(){return j.interpolateHsl})),n.d(t,"interpolateHslLong",(function(){return j.interpolateHslLong})),n.d(t,"interpolateLab",(function(){return j.interpolateLab})),n.d(t,"interpolateHcl",(function(){return j.interpolateHcl})),n.d(t,"interpolateHclLong",(function(){return j.interpolateHclLong})),n.d(t,"interpolateCubehelix",(function(){return j.interpolateCubehelix})),n.d(t,"interpolateCubehelixLong",(function(){return j.interpolateCubehelixLong})),n.d(t,"piecewise",(function(){return j.piecewise})),n.d(t,"quantize",(function(){return j.quantize}));var y=n("./node_modules/d3-path/src/index.js");n.d(t,"path",(function(){return y.path}));var x=n("./node_modules/d3-polygon/src/index.js");n.d(t,"polygonArea",(function(){return x.polygonArea})),n.d(t,"polygonCentroid",(function(){return x.polygonCentroid})),n.d(t,"polygonHull",(function(){return x.polygonHull})),n.d(t,"polygonContains",(function(){return x.polygonContains})),n.d(t,"polygonLength",(function(){return x.polygonLength}));var w=n("./node_modules/d3-quadtree/src/index.js");n.d(t,"quadtree",(function(){return w.quadtree}));var O=n("./node_modules/d3-random/src/index.js");n.d(t,"randomUniform",(function(){return O.randomUniform})),n.d(t,"randomNormal",(function(){return O.randomNormal})),n.d(t,"randomLogNormal",(function(){return O.randomLogNormal})),n.d(t,"randomBates",(function(){return O.randomBates})),n.d(t,"randomIrwinHall",(function(){return O.randomIrwinHall})),n.d(t,"randomExponential",(function(){return O.randomExponential}));var M=n("./node_modules/d3-scale/src/index.js");n.d(t,"scaleBand",(function(){return M.scaleBand})),n.d(t,"scalePoint",(function(){return M.scalePoint})),n.d(t,"scaleIdentity",(function(){return M.scaleIdentity})),n.d(t,"scaleLinear",(function(){return M.scaleLinear})),n.d(t,"scaleLog",(function(){return M.scaleLog})),n.d(t,"scaleSymlog",(function(){return M.scaleSymlog})),n.d(t,"scaleOrdinal",(function(){return M.scaleOrdinal})),n.d(t,"scaleImplicit",(function(){return M.scaleImplicit})),n.d(t,"scalePow",(function(){return M.scalePow})),n.d(t,"scaleSqrt",(function(){return M.scaleSqrt})),n.d(t,"scaleQuantile",(function(){return M.scaleQuantile})),n.d(t,"scaleQuantize",(function(){return M.scaleQuantize})),n.d(t,"scaleThreshold",(function(){return M.scaleThreshold})),n.d(t,"scaleTime",(function(){return M.scaleTime})),n.d(t,"scaleUtc",(function(){return M.scaleUtc})),n.d(t,"scaleSequential",(function(){return M.scaleSequential})),n.d(t,"scaleSequentialLog",(function(){return M.scaleSequentialLog})),n.d(t,"scaleSequentialPow",(function(){return M.scaleSequentialPow})),n.d(t,"scaleSequentialSqrt",(function(){return M.scaleSequentialSqrt})),n.d(t,"scaleSequentialSymlog",(function(){return M.scaleSequentialSymlog})),n.d(t,"scaleSequentialQuantile",(function(){return M.scaleSequentialQuantile})),n.d(t,"scaleDiverging",(function(){return M.scaleDiverging})),n.d(t,"scaleDivergingLog",(function(){return M.scaleDivergingLog})),n.d(t,"scaleDivergingPow",(function(){return M.scaleDivergingPow})),n.d(t,"scaleDivergingSqrt",(function(){return M.scaleDivergingSqrt})),n.d(t,"scaleDivergingSymlog",(function(){return M.scaleDivergingSymlog})),n.d(t,"tickFormat",(function(){return M.tickFormat}));var S=n("./node_modules/d3-scale-chromatic/src/index.js");n.d(t,"schemeCategory10",(function(){return S.schemeCategory10})),n.d(t,"schemeAccent",(function(){return S.schemeAccent})),n.d(t,"schemeDark2",(function(){return S.schemeDark2})),n.d(t,"schemePaired",(function(){return S.schemePaired})),n.d(t,"schemePastel1",(function(){return S.schemePastel1})),n.d(t,"schemePastel2",(function(){return S.schemePastel2})),n.d(t,"schemeSet1",(function(){return S.schemeSet1})),n.d(t,"schemeSet2",(function(){return S.schemeSet2})),n.d(t,"schemeSet3",(function(){return S.schemeSet3})),n.d(t,"schemeTableau10",(function(){return S.schemeTableau10})),n.d(t,"interpolateBrBG",(function(){return S.interpolateBrBG})),n.d(t,"schemeBrBG",(function(){return S.schemeBrBG})),n.d(t,"interpolatePRGn",(function(){return S.interpolatePRGn})),n.d(t,"schemePRGn",(function(){return S.schemePRGn})),n.d(t,"interpolatePiYG",(function(){return S.interpolatePiYG})),n.d(t,"schemePiYG",(function(){return S.schemePiYG})),n.d(t,"interpolatePuOr",(function(){return S.interpolatePuOr})),n.d(t,"schemePuOr",(function(){return S.schemePuOr})),n.d(t,"interpolateRdBu",(function(){return S.interpolateRdBu})),n.d(t,"schemeRdBu",(function(){return S.schemeRdBu})),n.d(t,"interpolateRdGy",(function(){return S.interpolateRdGy})),n.d(t,"schemeRdGy",(function(){return S.schemeRdGy})),n.d(t,"interpolateRdYlBu",(function(){return S.interpolateRdYlBu})),n.d(t,"schemeRdYlBu",(function(){return S.schemeRdYlBu})),n.d(t,"interpolateRdYlGn",(function(){return S.interpolateRdYlGn})),n.d(t,"schemeRdYlGn",(function(){return S.schemeRdYlGn})),n.d(t,"interpolateSpectral",(function(){return S.interpolateSpectral})),n.d(t,"schemeSpectral",(function(){return S.schemeSpectral})),n.d(t,"interpolateBuGn",(function(){return S.interpolateBuGn})),n.d(t,"schemeBuGn",(function(){return S.schemeBuGn})),n.d(t,"interpolateBuPu",(function(){return S.interpolateBuPu})),n.d(t,"schemeBuPu",(function(){return S.schemeBuPu})),n.d(t,"interpolateGnBu",(function(){return S.interpolateGnBu})),n.d(t,"schemeGnBu",(function(){return S.schemeGnBu})),n.d(t,"interpolateOrRd",(function(){return S.interpolateOrRd})),n.d(t,"schemeOrRd",(function(){return S.schemeOrRd})),n.d(t,"interpolatePuBuGn",(function(){return S.interpolatePuBuGn})),n.d(t,"schemePuBuGn",(function(){return S.schemePuBuGn})),n.d(t,"interpolatePuBu",(function(){return S.interpolatePuBu})),n.d(t,"schemePuBu",(function(){return S.schemePuBu})),n.d(t,"interpolatePuRd",(function(){return S.interpolatePuRd})),n.d(t,"schemePuRd",(function(){return S.schemePuRd})),n.d(t,"interpolateRdPu",(function(){return S.interpolateRdPu})),n.d(t,"schemeRdPu",(function(){return S.schemeRdPu})),n.d(t,"interpolateYlGnBu",(function(){return S.interpolateYlGnBu})),n.d(t,"schemeYlGnBu",(function(){return S.schemeYlGnBu})),n.d(t,"interpolateYlGn",(function(){return S.interpolateYlGn})),n.d(t,"schemeYlGn",(function(){return S.schemeYlGn})),n.d(t,"interpolateYlOrBr",(function(){return S.interpolateYlOrBr})),n.d(t,"schemeYlOrBr",(function(){return S.schemeYlOrBr})),n.d(t,"interpolateYlOrRd",(function(){return S.interpolateYlOrRd})),n.d(t,"schemeYlOrRd",(function(){return S.schemeYlOrRd})),n.d(t,"interpolateBlues",(function(){return S.interpolateBlues})),n.d(t,"schemeBlues",(function(){return S.schemeBlues})),n.d(t,"interpolateGreens",(function(){return S.interpolateGreens})),n.d(t,"schemeGreens",(function(){return S.schemeGreens})),n.d(t,"interpolateGreys",(function(){return S.interpolateGreys})),n.d(t,"schemeGreys",(function(){return S.schemeGreys})),n.d(t,"interpolatePurples",(function(){return S.interpolatePurples})),n.d(t,"schemePurples",(function(){return S.schemePurples})),n.d(t,"interpolateReds",(function(){return S.interpolateReds})),n.d(t,"schemeReds",(function(){return S.schemeReds})),n.d(t,"interpolateOranges",(function(){return S.interpolateOranges})),n.d(t,"schemeOranges",(function(){return S.schemeOranges})),n.d(t,"interpolateCividis",(function(){return S.interpolateCividis})),n.d(t,"interpolateCubehelixDefault",(function(){return S.interpolateCubehelixDefault})),n.d(t,"interpolateRainbow",(function(){return S.interpolateRainbow})),n.d(t,"interpolateWarm",(function(){return S.interpolateWarm})),n.d(t,"interpolateCool",(function(){return S.interpolateCool})),n.d(t,"interpolateSinebow",(function(){return S.interpolateSinebow})),n.d(t,"interpolateTurbo",(function(){return S.interpolateTurbo})),n.d(t,"interpolateViridis",(function(){return S.interpolateViridis})),n.d(t,"interpolateMagma",(function(){return S.interpolateMagma})),n.d(t,"interpolateInferno",(function(){return S.interpolateInferno})),n.d(t,"interpolatePlasma",(function(){return S.interpolatePlasma}));var A=n("./node_modules/d3-selection/src/index.js");n.d(t,"create",(function(){return A.create})),n.d(t,"creator",(function(){return A.creator})),n.d(t,"local",(function(){return A.local})),n.d(t,"matcher",(function(){return A.matcher})),n.d(t,"mouse",(function(){return A.mouse})),n.d(t,"namespace",(function(){return A.namespace})),n.d(t,"namespaces",(function(){return A.namespaces})),n.d(t,"clientPoint",(function(){return A.clientPoint})),n.d(t,"select",(function(){return A.select})),n.d(t,"selectAll",(function(){return A.selectAll})),n.d(t,"selection",(function(){return A.selection})),n.d(t,"selector",(function(){return A.selector})),n.d(t,"selectorAll",(function(){return A.selectorAll})),n.d(t,"style",(function(){return A.style})),n.d(t,"touch",(function(){return A.touch})),n.d(t,"touches",(function(){return A.touches})),n.d(t,"window",(function(){return A.window})),n.d(t,"event",(function(){return A.event})),n.d(t,"customEvent",(function(){return A.customEvent}));var P=n("./node_modules/d3-shape/src/index.js");n.d(t,"arc",(function(){return P.arc})),n.d(t,"area",(function(){return P.area})),n.d(t,"line",(function(){return P.line})),n.d(t,"pie",(function(){return P.pie})),n.d(t,"areaRadial",(function(){return P.areaRadial})),n.d(t,"radialArea",(function(){return P.radialArea})),n.d(t,"lineRadial",(function(){return P.lineRadial})),n.d(t,"radialLine",(function(){return P.radialLine})),n.d(t,"pointRadial",(function(){return P.pointRadial})),n.d(t,"linkHorizontal",(function(){return P.linkHorizontal})),n.d(t,"linkVertical",(function(){return P.linkVertical})),n.d(t,"linkRadial",(function(){return P.linkRadial})),n.d(t,"symbol",(function(){return P.symbol})),n.d(t,"symbols",(function(){return P.symbols})),n.d(t,"symbolCircle",(function(){return P.symbolCircle})),n.d(t,"symbolCross",(function(){return P.symbolCross})),n.d(t,"symbolDiamond",(function(){return P.symbolDiamond})),n.d(t,"symbolSquare",(function(){return P.symbolSquare})),n.d(t,"symbolStar",(function(){return P.symbolStar})),n.d(t,"symbolTriangle",(function(){return P.symbolTriangle})),n.d(t,"symbolWye",(function(){return P.symbolWye})),n.d(t,"curveBasisClosed",(function(){return P.curveBasisClosed})),n.d(t,"curveBasisOpen",(function(){return P.curveBasisOpen})),n.d(t,"curveBasis",(function(){return P.curveBasis})),n.d(t,"curveBundle",(function(){return P.curveBundle})),n.d(t,"curveCardinalClosed",(function(){return P.curveCardinalClosed})),n.d(t,"curveCardinalOpen",(function(){return P.curveCardinalOpen})),n.d(t,"curveCardinal",(function(){return P.curveCardinal})),n.d(t,"curveCatmullRomClosed",(function(){return P.curveCatmullRomClosed})),n.d(t,"curveCatmullRomOpen",(function(){return P.curveCatmullRomOpen})),n.d(t,"curveCatmullRom",(function(){return P.curveCatmullRom})),n.d(t,"curveLinearClosed",(function(){return P.curveLinearClosed})),n.d(t,"curveLinear",(function(){return P.curveLinear})),n.d(t,"curveMonotoneX",(function(){return P.curveMonotoneX})),n.d(t,"curveMonotoneY",(function(){return P.curveMonotoneY})),n.d(t,"curveNatural",(function(){return P.curveNatural})),n.d(t,"curveStep",(function(){return P.curveStep})),n.d(t,"curveStepAfter",(function(){return P.curveStepAfter})),n.d(t,"curveStepBefore",(function(){return P.curveStepBefore})),n.d(t,"stack",(function(){return P.stack})),n.d(t,"stackOffsetExpand",(function(){return P.stackOffsetExpand})),n.d(t,"stackOffsetDiverging",(function(){return P.stackOffsetDiverging})),n.d(t,"stackOffsetNone",(function(){return P.stackOffsetNone})),n.d(t,"stackOffsetSilhouette",(function(){return P.stackOffsetSilhouette})),n.d(t,"stackOffsetWiggle",(function(){return P.stackOffsetWiggle})),n.d(t,"stackOrderAppearance",(function(){return P.stackOrderAppearance})),n.d(t,"stackOrderAscending",(function(){return P.stackOrderAscending})),n.d(t,"stackOrderDescending",(function(){return P.stackOrderDescending})),n.d(t,"stackOrderInsideOut",(function(){return P.stackOrderInsideOut})),n.d(t,"stackOrderNone",(function(){return P.stackOrderNone})),n.d(t,"stackOrderReverse",(function(){return P.stackOrderReverse}));var k=n("./node_modules/d3-time/src/index.js");n.d(t,"timeInterval",(function(){return k.timeInterval})),n.d(t,"timeMillisecond",(function(){return k.timeMillisecond})),n.d(t,"timeMilliseconds",(function(){return k.timeMilliseconds})),n.d(t,"utcMillisecond",(function(){return k.utcMillisecond})),n.d(t,"utcMilliseconds",(function(){return k.utcMilliseconds})),n.d(t,"timeSecond",(function(){return k.timeSecond})),n.d(t,"timeSeconds",(function(){return k.timeSeconds})),n.d(t,"utcSecond",(function(){return k.utcSecond})),n.d(t,"utcSeconds",(function(){return k.utcSeconds})),n.d(t,"timeMinute",(function(){return k.timeMinute})),n.d(t,"timeMinutes",(function(){return k.timeMinutes})),n.d(t,"timeHour",(function(){return k.timeHour})),n.d(t,"timeHours",(function(){return k.timeHours})),n.d(t,"timeDay",(function(){return k.timeDay})),n.d(t,"timeDays",(function(){return k.timeDays})),n.d(t,"timeWeek",(function(){return k.timeWeek})),n.d(t,"timeWeeks",(function(){return k.timeWeeks})),n.d(t,"timeSunday",(function(){return k.timeSunday})),n.d(t,"timeSundays",(function(){return k.timeSundays})),n.d(t,"timeMonday",(function(){return k.timeMonday})),n.d(t,"timeMondays",(function(){return k.timeMondays})),n.d(t,"timeTuesday",(function(){return k.timeTuesday})),n.d(t,"timeTuesdays",(function(){return k.timeTuesdays})),n.d(t,"timeWednesday",(function(){return k.timeWednesday})),n.d(t,"timeWednesdays",(function(){return k.timeWednesdays})),n.d(t,"timeThursday",(function(){return k.timeThursday})),n.d(t,"timeThursdays",(function(){return k.timeThursdays})),n.d(t,"timeFriday",(function(){return k.timeFriday})),n.d(t,"timeFridays",(function(){return k.timeFridays})),n.d(t,"timeSaturday",(function(){return k.timeSaturday})),n.d(t,"timeSaturdays",(function(){return k.timeSaturdays})),n.d(t,"timeMonth",(function(){return k.timeMonth})),n.d(t,"timeMonths",(function(){return k.timeMonths})),n.d(t,"timeYear",(function(){return k.timeYear})),n.d(t,"timeYears",(function(){return k.timeYears})),n.d(t,"utcMinute",(function(){return k.utcMinute})),n.d(t,"utcMinutes",(function(){return k.utcMinutes})),n.d(t,"utcHour",(function(){return k.utcHour})),n.d(t,"utcHours",(function(){return k.utcHours})),n.d(t,"utcDay",(function(){return k.utcDay})),n.d(t,"utcDays",(function(){return k.utcDays})),n.d(t,"utcWeek",(function(){return k.utcWeek})),n.d(t,"utcWeeks",(function(){return k.utcWeeks})),n.d(t,"utcSunday",(function(){return k.utcSunday})),n.d(t,"utcSundays",(function(){return k.utcSundays})),n.d(t,"utcMonday",(function(){return k.utcMonday})),n.d(t,"utcMondays",(function(){return k.utcMondays})),n.d(t,"utcTuesday",(function(){return k.utcTuesday})),n.d(t,"utcTuesdays",(function(){return k.utcTuesdays})),n.d(t,"utcWednesday",(function(){return k.utcWednesday})),n.d(t,"utcWednesdays",(function(){return k.utcWednesdays})),n.d(t,"utcThursday",(function(){return k.utcThursday})),n.d(t,"utcThursdays",(function(){return k.utcThursdays})),n.d(t,"utcFriday",(function(){return k.utcFriday})),n.d(t,"utcFridays",(function(){return k.utcFridays})),n.d(t,"utcSaturday",(function(){return k.utcSaturday})),n.d(t,"utcSaturdays",(function(){return k.utcSaturdays})),n.d(t,"utcMonth",(function(){return k.utcMonth})),n.d(t,"utcMonths",(function(){return k.utcMonths})),n.d(t,"utcYear",(function(){return k.utcYear})),n.d(t,"utcYears",(function(){return k.utcYears}));var C=n("./node_modules/d3-time-format/src/index.js");n.d(t,"timeFormatDefaultLocale",(function(){return C.timeFormatDefaultLocale})),n.d(t,"timeFormat",(function(){return C.timeFormat})),n.d(t,"timeParse",(function(){return C.timeParse})),n.d(t,"utcFormat",(function(){return C.utcFormat})),n.d(t,"utcParse",(function(){return C.utcParse})),n.d(t,"timeFormatLocale",(function(){return C.timeFormatLocale})),n.d(t,"isoFormat",(function(){return C.isoFormat})),n.d(t,"isoParse",(function(){return C.isoParse}));var T=n("./node_modules/d3-timer/src/index.js");n.d(t,"now",(function(){return T.now})),n.d(t,"timer",(function(){return T.timer})),n.d(t,"timerFlush",(function(){return T.timerFlush})),n.d(t,"timeout",(function(){return T.timeout})),n.d(t,"interval",(function(){return T.interval}));var E=n("./node_modules/d3-transition/src/index.js");n.d(t,"transition",(function(){return E.transition})),n.d(t,"active",(function(){return E.active})),n.d(t,"interrupt",(function(){return E.interrupt}));var R=n("./node_modules/d3-voronoi/src/index.js");n.d(t,"voronoi",(function(){return R.voronoi}));var N=n("./node_modules/d3-zoom/src/index.js");n.d(t,"zoom",(function(){return N.zoom})),n.d(t,"zoomTransform",(function(){return N.zoomTransform})),n.d(t,"zoomIdentity",(function(){return N.zoomIdentity}))},"./node_modules/lodash/lodash.js":function(e,t,n){(function(e,r){var o;(function(){var i="Expected a function",u="__lodash_placeholder__",s=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],c="[object Arguments]",a="[object Array]",d="[object Boolean]",l="[object Date]",f="[object Error]",h="[object Function]",p="[object GeneratorFunction]",m="[object Map]",_="[object Number]",v="[object Object]",g="[object RegExp]",b="[object Set]",j="[object String]",y="[object Symbol]",x="[object WeakMap]",w="[object ArrayBuffer]",O="[object DataView]",M="[object Float32Array]",S="[object Float64Array]",A="[object Int8Array]",P="[object Int16Array]",k="[object Int32Array]",C="[object Uint8Array]",T="[object Uint16Array]",E="[object Uint32Array]",R=/\b__p \+= '';/g,N=/\b(__p \+=) '' \+/g,q=/(__e\(.*?\)|\b__t\)) \+\n'';/g,B=/&(?:amp|lt|gt|quot|#39);/g,I=/[&<>"']/g,D=RegExp(B.source),L=RegExp(I.source),z=/<%-([\s\S]+?)%>/g,F=/<%([\s\S]+?)%>/g,U=/<%=([\s\S]+?)%>/g,Y=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,H=/^\w*$/,G=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,W=/[\\^$.*+?()[\]{}|]/g,$=RegExp(W.source),V=/^\s+|\s+$/g,X=/^\s+/,Z=/\s+$/,Q=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,K=/\{\n\/\* \[wrapped with (.+)\] \*/,J=/,? & /,ee=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,te=/\\(\\)?/g,ne=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,re=/\w*$/,oe=/^[-+]0x[0-9a-f]+$/i,ie=/^0b[01]+$/i,ue=/^\[object .+?Constructor\]$/,se=/^0o[0-7]+$/i,ce=/^(?:0|[1-9]\d*)$/,ae=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,de=/($^)/,le=/['\n\r\u2028\u2029\\]/g,fe="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",he="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",pe="[\\ud800-\\udfff]",me="["+he+"]",_e="["+fe+"]",ve="\\d+",ge="[\\u2700-\\u27bf]",be="[a-z\\xdf-\\xf6\\xf8-\\xff]",je="[^\\ud800-\\udfff"+he+ve+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",ye="\\ud83c[\\udffb-\\udfff]",xe="[^\\ud800-\\udfff]",we="(?:\\ud83c[\\udde6-\\uddff]){2}",Oe="[\\ud800-\\udbff][\\udc00-\\udfff]",Me="[A-Z\\xc0-\\xd6\\xd8-\\xde]",Se="(?:"+be+"|"+je+")",Ae="(?:"+Me+"|"+je+")",Pe="(?:"+_e+"|"+ye+")"+"?",ke="[\\ufe0e\\ufe0f]?"+Pe+("(?:\\u200d(?:"+[xe,we,Oe].join("|")+")[\\ufe0e\\ufe0f]?"+Pe+")*"),Ce="(?:"+[ge,we,Oe].join("|")+")"+ke,Te="(?:"+[xe+_e+"?",_e,we,Oe,pe].join("|")+")",Ee=RegExp("['’]","g"),Re=RegExp(_e,"g"),Ne=RegExp(ye+"(?="+ye+")|"+Te+ke,"g"),qe=RegExp([Me+"?"+be+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[me,Me,"$"].join("|")+")",Ae+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[me,Me+Se,"$"].join("|")+")",Me+"?"+Se+"+(?:['’](?:d|ll|m|re|s|t|ve))?",Me+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",ve,Ce].join("|"),"g"),Be=RegExp("[\\u200d\\ud800-\\udfff"+fe+"\\ufe0e\\ufe0f]"),Ie=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,De=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Le=-1,ze={};ze[M]=ze[S]=ze[A]=ze[P]=ze[k]=ze[C]=ze["[object Uint8ClampedArray]"]=ze[T]=ze[E]=!0,ze[c]=ze[a]=ze[w]=ze[d]=ze[O]=ze[l]=ze[f]=ze[h]=ze[m]=ze[_]=ze[v]=ze[g]=ze[b]=ze[j]=ze[x]=!1;var Fe={};Fe[c]=Fe[a]=Fe[w]=Fe[O]=Fe[d]=Fe[l]=Fe[M]=Fe[S]=Fe[A]=Fe[P]=Fe[k]=Fe[m]=Fe[_]=Fe[v]=Fe[g]=Fe[b]=Fe[j]=Fe[y]=Fe[C]=Fe["[object Uint8ClampedArray]"]=Fe[T]=Fe[E]=!0,Fe[f]=Fe[h]=Fe[x]=!1;var Ue={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Ye=parseFloat,He=parseInt,Ge="object"==typeof e&&e&&e.Object===Object&&e,We="object"==typeof self&&self&&self.Object===Object&&self,$e=Ge||We||Function("return this")(),Ve=t&&!t.nodeType&&t,Xe=Ve&&"object"==typeof r&&r&&!r.nodeType&&r,Ze=Xe&&Xe.exports===Ve,Qe=Ze&&Ge.process,Ke=function(){try{var e=Xe&&Xe.require&&Xe.require("util").types;return e||Qe&&Qe.binding&&Qe.binding("util")}catch(e){}}(),Je=Ke&&Ke.isArrayBuffer,et=Ke&&Ke.isDate,tt=Ke&&Ke.isMap,nt=Ke&&Ke.isRegExp,rt=Ke&&Ke.isSet,ot=Ke&&Ke.isTypedArray;function it(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function ut(e,t,n,r){for(var o=-1,i=null==e?0:e.length;++o<i;){var u=e[o];t(r,u,n(u),e)}return r}function st(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}function ct(e,t){for(var n=null==e?0:e.length;n--&&!1!==t(e[n],n,e););return e}function at(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function dt(e,t){for(var n=-1,r=null==e?0:e.length,o=0,i=[];++n<r;){var u=e[n];t(u,n,e)&&(i[o++]=u)}return i}function lt(e,t){return!!(null==e?0:e.length)&&yt(e,t,0)>-1}function ft(e,t,n){for(var r=-1,o=null==e?0:e.length;++r<o;)if(n(t,e[r]))return!0;return!1}function ht(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}function pt(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}function mt(e,t,n,r){var o=-1,i=null==e?0:e.length;for(r&&i&&(n=e[++o]);++o<i;)n=t(n,e[o],o,e);return n}function _t(e,t,n,r){var o=null==e?0:e.length;for(r&&o&&(n=e[--o]);o--;)n=t(n,e[o],o,e);return n}function vt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}var gt=Mt("length");function bt(e,t,n){var r;return n(e,(function(e,n,o){if(t(e,n,o))return r=n,!1})),r}function jt(e,t,n,r){for(var o=e.length,i=n+(r?1:-1);r?i--:++i<o;)if(t(e[i],i,e))return i;return-1}function yt(e,t,n){return t==t?function(e,t,n){var r=n-1,o=e.length;for(;++r<o;)if(e[r]===t)return r;return-1}(e,t,n):jt(e,wt,n)}function xt(e,t,n,r){for(var o=n-1,i=e.length;++o<i;)if(r(e[o],t))return o;return-1}function wt(e){return e!=e}function Ot(e,t){var n=null==e?0:e.length;return n?Pt(e,t)/n:NaN}function Mt(e){return function(t){return null==t?void 0:t[e]}}function St(e){return function(t){return null==e?void 0:e[t]}}function At(e,t,n,r,o){return o(e,(function(e,o,i){n=r?(r=!1,e):t(n,e,o,i)})),n}function Pt(e,t){for(var n,r=-1,o=e.length;++r<o;){var i=t(e[r]);void 0!==i&&(n=void 0===n?i:n+i)}return n}function kt(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}function Ct(e){return function(t){return e(t)}}function Tt(e,t){return ht(t,(function(t){return e[t]}))}function Et(e,t){return e.has(t)}function Rt(e,t){for(var n=-1,r=e.length;++n<r&&yt(t,e[n],0)>-1;);return n}function Nt(e,t){for(var n=e.length;n--&&yt(t,e[n],0)>-1;);return n}function qt(e,t){for(var n=e.length,r=0;n--;)e[n]===t&&++r;return r}var Bt=St({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),It=St({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Dt(e){return"\\"+Ue[e]}function Lt(e){return Be.test(e)}function zt(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function Ft(e,t){return function(n){return e(t(n))}}function Ut(e,t){for(var n=-1,r=e.length,o=0,i=[];++n<r;){var s=e[n];s!==t&&s!==u||(e[n]=u,i[o++]=n)}return i}function Yt(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}function Ht(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=[e,e]})),n}function Gt(e){return Lt(e)?function(e){var t=Ne.lastIndex=0;for(;Ne.test(e);)++t;return t}(e):gt(e)}function Wt(e){return Lt(e)?function(e){return e.match(Ne)||[]}(e):function(e){return e.split("")}(e)}var $t=St({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Vt=function e(t){var n,r=(t=null==t?$e:Vt.defaults($e.Object(),t,Vt.pick($e,De))).Array,o=t.Date,fe=t.Error,he=t.Function,pe=t.Math,me=t.Object,_e=t.RegExp,ve=t.String,ge=t.TypeError,be=r.prototype,je=he.prototype,ye=me.prototype,xe=t["__core-js_shared__"],we=je.toString,Oe=ye.hasOwnProperty,Me=0,Se=(n=/[^.]+$/.exec(xe&&xe.keys&&xe.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",Ae=ye.toString,Pe=we.call(me),ke=$e._,Ce=_e("^"+we.call(Oe).replace(W,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Te=Ze?t.Buffer:void 0,Ne=t.Symbol,Be=t.Uint8Array,Ue=Te?Te.allocUnsafe:void 0,Ge=Ft(me.getPrototypeOf,me),We=me.create,Ve=ye.propertyIsEnumerable,Xe=be.splice,Qe=Ne?Ne.isConcatSpreadable:void 0,Ke=Ne?Ne.iterator:void 0,gt=Ne?Ne.toStringTag:void 0,St=function(){try{var e=ei(me,"defineProperty");return e({},"",{}),e}catch(e){}}(),Xt=t.clearTimeout!==$e.clearTimeout&&t.clearTimeout,Zt=o&&o.now!==$e.Date.now&&o.now,Qt=t.setTimeout!==$e.setTimeout&&t.setTimeout,Kt=pe.ceil,Jt=pe.floor,en=me.getOwnPropertySymbols,tn=Te?Te.isBuffer:void 0,nn=t.isFinite,rn=be.join,on=Ft(me.keys,me),un=pe.max,sn=pe.min,cn=o.now,an=t.parseInt,dn=pe.random,ln=be.reverse,fn=ei(t,"DataView"),hn=ei(t,"Map"),pn=ei(t,"Promise"),mn=ei(t,"Set"),_n=ei(t,"WeakMap"),vn=ei(me,"create"),gn=_n&&new _n,bn={},jn=Ai(fn),yn=Ai(hn),xn=Ai(pn),wn=Ai(mn),On=Ai(_n),Mn=Ne?Ne.prototype:void 0,Sn=Mn?Mn.valueOf:void 0,An=Mn?Mn.toString:void 0;function Pn(e){if(Hu(e)&&!Ru(e)&&!(e instanceof En)){if(e instanceof Tn)return e;if(Oe.call(e,"__wrapped__"))return Pi(e)}return new Tn(e)}var kn=function(){function e(){}return function(t){if(!Yu(t))return{};if(We)return We(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();function Cn(){}function Tn(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=void 0}function En(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function Rn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Nn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function qn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Bn(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new qn;++t<n;)this.add(e[t])}function In(e){var t=this.__data__=new Nn(e);this.size=t.size}function Dn(e,t){var n=Ru(e),r=!n&&Eu(e),o=!n&&!r&&Iu(e),i=!n&&!r&&!o&&Ku(e),u=n||r||o||i,s=u?kt(e.length,ve):[],c=s.length;for(var a in e)!t&&!Oe.call(e,a)||u&&("length"==a||o&&("offset"==a||"parent"==a)||i&&("buffer"==a||"byteLength"==a||"byteOffset"==a)||si(a,c))||s.push(a);return s}function Ln(e){var t=e.length;return t?e[Br(0,t-1)]:void 0}function zn(e,t){return Oi(go(e),Xn(t,0,e.length))}function Fn(e){return Oi(go(e))}function Un(e,t,n){(void 0!==n&&!ku(e[t],n)||void 0===n&&!(t in e))&&$n(e,t,n)}function Yn(e,t,n){var r=e[t];Oe.call(e,t)&&ku(r,n)&&(void 0!==n||t in e)||$n(e,t,n)}function Hn(e,t){for(var n=e.length;n--;)if(ku(e[n][0],t))return n;return-1}function Gn(e,t,n,r){return er(e,(function(e,o,i){t(r,e,n(e),i)})),r}function Wn(e,t){return e&&bo(t,js(t),e)}function $n(e,t,n){"__proto__"==t&&St?St(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function Vn(e,t){for(var n=-1,o=t.length,i=r(o),u=null==e;++n<o;)i[n]=u?void 0:ms(e,t[n]);return i}function Xn(e,t,n){return e==e&&(void 0!==n&&(e=e<=n?e:n),void 0!==t&&(e=e>=t?e:t)),e}function Zn(e,t,n,r,o,i){var u,s=1&t,a=2&t,f=4&t;if(n&&(u=o?n(e,r,o,i):n(e)),void 0!==u)return u;if(!Yu(e))return e;var x=Ru(e);if(x){if(u=function(e){var t=e.length,n=new e.constructor(t);t&&"string"==typeof e[0]&&Oe.call(e,"index")&&(n.index=e.index,n.input=e.input);return n}(e),!s)return go(e,u)}else{var R=ri(e),N=R==h||R==p;if(Iu(e))return fo(e,s);if(R==v||R==c||N&&!o){if(u=a||N?{}:ii(e),!s)return a?function(e,t){return bo(e,ni(e),t)}(e,function(e,t){return e&&bo(t,ys(t),e)}(u,e)):function(e,t){return bo(e,ti(e),t)}(e,Wn(u,e))}else{if(!Fe[R])return o?e:{};u=function(e,t,n){var r=e.constructor;switch(t){case w:return ho(e);case d:case l:return new r(+e);case O:return function(e,t){var n=t?ho(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case M:case S:case A:case P:case k:case C:case"[object Uint8ClampedArray]":case T:case E:return po(e,n);case m:return new r;case _:case j:return new r(e);case g:return function(e){var t=new e.constructor(e.source,re.exec(e));return t.lastIndex=e.lastIndex,t}(e);case b:return new r;case y:return o=e,Sn?me(Sn.call(o)):{}}var o}(e,R,s)}}i||(i=new In);var q=i.get(e);if(q)return q;i.set(e,u),Xu(e)?e.forEach((function(r){u.add(Zn(r,t,n,r,e,i))})):Gu(e)&&e.forEach((function(r,o){u.set(o,Zn(r,t,n,o,e,i))}));var B=x?void 0:(f?a?$o:Wo:a?ys:js)(e);return st(B||e,(function(r,o){B&&(r=e[o=r]),Yn(u,o,Zn(r,t,n,o,e,i))})),u}function Qn(e,t,n){var r=n.length;if(null==e)return!r;for(e=me(e);r--;){var o=n[r],i=t[o],u=e[o];if(void 0===u&&!(o in e)||!i(u))return!1}return!0}function Kn(e,t,n){if("function"!=typeof e)throw new ge(i);return ji((function(){e.apply(void 0,n)}),t)}function Jn(e,t,n,r){var o=-1,i=lt,u=!0,s=e.length,c=[],a=t.length;if(!s)return c;n&&(t=ht(t,Ct(n))),r?(i=ft,u=!1):t.length>=200&&(i=Et,u=!1,t=new Bn(t));e:for(;++o<s;){var d=e[o],l=null==n?d:n(d);if(d=r||0!==d?d:0,u&&l==l){for(var f=a;f--;)if(t[f]===l)continue e;c.push(d)}else i(t,l,r)||c.push(d)}return c}Pn.templateSettings={escape:z,evaluate:F,interpolate:U,variable:"",imports:{_:Pn}},Pn.prototype=Cn.prototype,Pn.prototype.constructor=Pn,Tn.prototype=kn(Cn.prototype),Tn.prototype.constructor=Tn,En.prototype=kn(Cn.prototype),En.prototype.constructor=En,Rn.prototype.clear=function(){this.__data__=vn?vn(null):{},this.size=0},Rn.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},Rn.prototype.get=function(e){var t=this.__data__;if(vn){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return Oe.call(t,e)?t[e]:void 0},Rn.prototype.has=function(e){var t=this.__data__;return vn?void 0!==t[e]:Oe.call(t,e)},Rn.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=vn&&void 0===t?"__lodash_hash_undefined__":t,this},Nn.prototype.clear=function(){this.__data__=[],this.size=0},Nn.prototype.delete=function(e){var t=this.__data__,n=Hn(t,e);return!(n<0)&&(n==t.length-1?t.pop():Xe.call(t,n,1),--this.size,!0)},Nn.prototype.get=function(e){var t=this.__data__,n=Hn(t,e);return n<0?void 0:t[n][1]},Nn.prototype.has=function(e){return Hn(this.__data__,e)>-1},Nn.prototype.set=function(e,t){var n=this.__data__,r=Hn(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},qn.prototype.clear=function(){this.size=0,this.__data__={hash:new Rn,map:new(hn||Nn),string:new Rn}},qn.prototype.delete=function(e){var t=Ko(this,e).delete(e);return this.size-=t?1:0,t},qn.prototype.get=function(e){return Ko(this,e).get(e)},qn.prototype.has=function(e){return Ko(this,e).has(e)},qn.prototype.set=function(e,t){var n=Ko(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},Bn.prototype.add=Bn.prototype.push=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this},Bn.prototype.has=function(e){return this.__data__.has(e)},In.prototype.clear=function(){this.__data__=new Nn,this.size=0},In.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},In.prototype.get=function(e){return this.__data__.get(e)},In.prototype.has=function(e){return this.__data__.has(e)},In.prototype.set=function(e,t){var n=this.__data__;if(n instanceof Nn){var r=n.__data__;if(!hn||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new qn(r)}return n.set(e,t),this.size=n.size,this};var er=xo(cr),tr=xo(ar,!0);function nr(e,t){var n=!0;return er(e,(function(e,r,o){return n=!!t(e,r,o)})),n}function rr(e,t,n){for(var r=-1,o=e.length;++r<o;){var i=e[r],u=t(i);if(null!=u&&(void 0===s?u==u&&!Qu(u):n(u,s)))var s=u,c=i}return c}function or(e,t){var n=[];return er(e,(function(e,r,o){t(e,r,o)&&n.push(e)})),n}function ir(e,t,n,r,o){var i=-1,u=e.length;for(n||(n=ui),o||(o=[]);++i<u;){var s=e[i];t>0&&n(s)?t>1?ir(s,t-1,n,r,o):pt(o,s):r||(o[o.length]=s)}return o}var ur=wo(),sr=wo(!0);function cr(e,t){return e&&ur(e,t,js)}function ar(e,t){return e&&sr(e,t,js)}function dr(e,t){return dt(t,(function(t){return zu(e[t])}))}function lr(e,t){for(var n=0,r=(t=so(t,e)).length;null!=e&&n<r;)e=e[Si(t[n++])];return n&&n==r?e:void 0}function fr(e,t,n){var r=t(e);return Ru(e)?r:pt(r,n(e))}function hr(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":gt&&gt in me(e)?function(e){var t=Oe.call(e,gt),n=e[gt];try{e[gt]=void 0;var r=!0}catch(e){}var o=Ae.call(e);r&&(t?e[gt]=n:delete e[gt]);return o}(e):function(e){return Ae.call(e)}(e)}function pr(e,t){return e>t}function mr(e,t){return null!=e&&Oe.call(e,t)}function _r(e,t){return null!=e&&t in me(e)}function vr(e,t,n){for(var o=n?ft:lt,i=e[0].length,u=e.length,s=u,c=r(u),a=1/0,d=[];s--;){var l=e[s];s&&t&&(l=ht(l,Ct(t))),a=sn(l.length,a),c[s]=!n&&(t||i>=120&&l.length>=120)?new Bn(s&&l):void 0}l=e[0];var f=-1,h=c[0];e:for(;++f<i&&d.length<a;){var p=l[f],m=t?t(p):p;if(p=n||0!==p?p:0,!(h?Et(h,m):o(d,m,n))){for(s=u;--s;){var _=c[s];if(!(_?Et(_,m):o(e[s],m,n)))continue e}h&&h.push(m),d.push(p)}}return d}function gr(e,t,n){var r=null==(e=_i(e,t=so(t,e)))?e:e[Si(Li(t))];return null==r?void 0:it(r,e,n)}function br(e){return Hu(e)&&hr(e)==c}function jr(e,t,n,r,o){return e===t||(null==e||null==t||!Hu(e)&&!Hu(t)?e!=e&&t!=t:function(e,t,n,r,o,i){var u=Ru(e),s=Ru(t),h=u?a:ri(e),p=s?a:ri(t),x=(h=h==c?v:h)==v,M=(p=p==c?v:p)==v,S=h==p;if(S&&Iu(e)){if(!Iu(t))return!1;u=!0,x=!1}if(S&&!x)return i||(i=new In),u||Ku(e)?Ho(e,t,n,r,o,i):function(e,t,n,r,o,i,u){switch(n){case O:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case w:return!(e.byteLength!=t.byteLength||!i(new Be(e),new Be(t)));case d:case l:case _:return ku(+e,+t);case f:return e.name==t.name&&e.message==t.message;case g:case j:return e==t+"";case m:var s=zt;case b:var c=1&r;if(s||(s=Yt),e.size!=t.size&&!c)return!1;var a=u.get(e);if(a)return a==t;r|=2,u.set(e,t);var h=Ho(s(e),s(t),r,o,i,u);return u.delete(e),h;case y:if(Sn)return Sn.call(e)==Sn.call(t)}return!1}(e,t,h,n,r,o,i);if(!(1&n)){var A=x&&Oe.call(e,"__wrapped__"),P=M&&Oe.call(t,"__wrapped__");if(A||P){var k=A?e.value():e,C=P?t.value():t;return i||(i=new In),o(k,C,n,r,i)}}if(!S)return!1;return i||(i=new In),function(e,t,n,r,o,i){var u=1&n,s=Wo(e),c=s.length,a=Wo(t).length;if(c!=a&&!u)return!1;var d=c;for(;d--;){var l=s[d];if(!(u?l in t:Oe.call(t,l)))return!1}var f=i.get(e);if(f&&i.get(t))return f==t;var h=!0;i.set(e,t),i.set(t,e);var p=u;for(;++d<c;){l=s[d];var m=e[l],_=t[l];if(r)var v=u?r(_,m,l,t,e,i):r(m,_,l,e,t,i);if(!(void 0===v?m===_||o(m,_,n,r,i):v)){h=!1;break}p||(p="constructor"==l)}if(h&&!p){var g=e.constructor,b=t.constructor;g==b||!("constructor"in e)||!("constructor"in t)||"function"==typeof g&&g instanceof g&&"function"==typeof b&&b instanceof b||(h=!1)}return i.delete(e),i.delete(t),h}(e,t,n,r,o,i)}(e,t,n,r,jr,o))}function yr(e,t,n,r){var o=n.length,i=o,u=!r;if(null==e)return!i;for(e=me(e);o--;){var s=n[o];if(u&&s[2]?s[1]!==e[s[0]]:!(s[0]in e))return!1}for(;++o<i;){var c=(s=n[o])[0],a=e[c],d=s[1];if(u&&s[2]){if(void 0===a&&!(c in e))return!1}else{var l=new In;if(r)var f=r(a,d,c,e,t,l);if(!(void 0===f?jr(d,a,3,r,l):f))return!1}}return!0}function xr(e){return!(!Yu(e)||(t=e,Se&&Se in t))&&(zu(e)?Ce:ue).test(Ai(e));var t}function wr(e){return"function"==typeof e?e:null==e?Ws:"object"==typeof e?Ru(e)?kr(e[0],e[1]):Pr(e):tc(e)}function Or(e){if(!fi(e))return on(e);var t=[];for(var n in me(e))Oe.call(e,n)&&"constructor"!=n&&t.push(n);return t}function Mr(e){if(!Yu(e))return function(e){var t=[];if(null!=e)for(var n in me(e))t.push(n);return t}(e);var t=fi(e),n=[];for(var r in e)("constructor"!=r||!t&&Oe.call(e,r))&&n.push(r);return n}function Sr(e,t){return e<t}function Ar(e,t){var n=-1,o=qu(e)?r(e.length):[];return er(e,(function(e,r,i){o[++n]=t(e,r,i)})),o}function Pr(e){var t=Jo(e);return 1==t.length&&t[0][2]?pi(t[0][0],t[0][1]):function(n){return n===e||yr(n,e,t)}}function kr(e,t){return ai(e)&&hi(t)?pi(Si(e),t):function(n){var r=ms(n,e);return void 0===r&&r===t?_s(n,e):jr(t,r,3)}}function Cr(e,t,n,r,o){e!==t&&ur(t,(function(i,u){if(o||(o=new In),Yu(i))!function(e,t,n,r,o,i,u){var s=gi(e,n),c=gi(t,n),a=u.get(c);if(a)return void Un(e,n,a);var d=i?i(s,c,n+"",e,t,u):void 0,l=void 0===d;if(l){var f=Ru(c),h=!f&&Iu(c),p=!f&&!h&&Ku(c);d=c,f||h||p?Ru(s)?d=s:Bu(s)?d=go(s):h?(l=!1,d=fo(c,!0)):p?(l=!1,d=po(c,!0)):d=[]:$u(c)||Eu(c)?(d=s,Eu(s)?d=us(s):Yu(s)&&!zu(s)||(d=ii(c))):l=!1}l&&(u.set(c,d),o(d,c,r,i,u),u.delete(c));Un(e,n,d)}(e,t,u,n,Cr,r,o);else{var s=r?r(gi(e,u),i,u+"",e,t,o):void 0;void 0===s&&(s=i),Un(e,u,s)}}),ys)}function Tr(e,t){var n=e.length;if(n)return si(t+=t<0?n:0,n)?e[t]:void 0}function Er(e,t,n){var r=-1;return t=ht(t.length?t:[Ws],Ct(Qo())),function(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}(Ar(e,(function(e,n,o){return{criteria:ht(t,(function(t){return t(e)})),index:++r,value:e}})),(function(e,t){return function(e,t,n){var r=-1,o=e.criteria,i=t.criteria,u=o.length,s=n.length;for(;++r<u;){var c=mo(o[r],i[r]);if(c){if(r>=s)return c;var a=n[r];return c*("desc"==a?-1:1)}}return e.index-t.index}(e,t,n)}))}function Rr(e,t,n){for(var r=-1,o=t.length,i={};++r<o;){var u=t[r],s=lr(e,u);n(s,u)&&Fr(i,so(u,e),s)}return i}function Nr(e,t,n,r){var o=r?xt:yt,i=-1,u=t.length,s=e;for(e===t&&(t=go(t)),n&&(s=ht(e,Ct(n)));++i<u;)for(var c=0,a=t[i],d=n?n(a):a;(c=o(s,d,c,r))>-1;)s!==e&&Xe.call(s,c,1),Xe.call(e,c,1);return e}function qr(e,t){for(var n=e?t.length:0,r=n-1;n--;){var o=t[n];if(n==r||o!==i){var i=o;si(o)?Xe.call(e,o,1):Jr(e,o)}}return e}function Br(e,t){return e+Jt(dn()*(t-e+1))}function Ir(e,t){var n="";if(!e||t<1||t>9007199254740991)return n;do{t%2&&(n+=e),(t=Jt(t/2))&&(e+=e)}while(t);return n}function Dr(e,t){return yi(mi(e,t,Ws),e+"")}function Lr(e){return Ln(ks(e))}function zr(e,t){var n=ks(e);return Oi(n,Xn(t,0,n.length))}function Fr(e,t,n,r){if(!Yu(e))return e;for(var o=-1,i=(t=so(t,e)).length,u=i-1,s=e;null!=s&&++o<i;){var c=Si(t[o]),a=n;if(o!=u){var d=s[c];void 0===(a=r?r(d,c,s):void 0)&&(a=Yu(d)?d:si(t[o+1])?[]:{})}Yn(s,c,a),s=s[c]}return e}var Ur=gn?function(e,t){return gn.set(e,t),e}:Ws,Yr=St?function(e,t){return St(e,"toString",{configurable:!0,enumerable:!1,value:Ys(t),writable:!0})}:Ws;function Hr(e){return Oi(ks(e))}function Gr(e,t,n){var o=-1,i=e.length;t<0&&(t=-t>i?0:i+t),(n=n>i?i:n)<0&&(n+=i),i=t>n?0:n-t>>>0,t>>>=0;for(var u=r(i);++o<i;)u[o]=e[o+t];return u}function Wr(e,t){var n;return er(e,(function(e,r,o){return!(n=t(e,r,o))})),!!n}function $r(e,t,n){var r=0,o=null==e?r:e.length;if("number"==typeof t&&t==t&&o<=2147483647){for(;r<o;){var i=r+o>>>1,u=e[i];null!==u&&!Qu(u)&&(n?u<=t:u<t)?r=i+1:o=i}return o}return Vr(e,t,Ws,n)}function Vr(e,t,n,r){t=n(t);for(var o=0,i=null==e?0:e.length,u=t!=t,s=null===t,c=Qu(t),a=void 0===t;o<i;){var d=Jt((o+i)/2),l=n(e[d]),f=void 0!==l,h=null===l,p=l==l,m=Qu(l);if(u)var _=r||p;else _=a?p&&(r||f):s?p&&f&&(r||!h):c?p&&f&&!h&&(r||!m):!h&&!m&&(r?l<=t:l<t);_?o=d+1:i=d}return sn(i,4294967294)}function Xr(e,t){for(var n=-1,r=e.length,o=0,i=[];++n<r;){var u=e[n],s=t?t(u):u;if(!n||!ku(s,c)){var c=s;i[o++]=0===u?0:u}}return i}function Zr(e){return"number"==typeof e?e:Qu(e)?NaN:+e}function Qr(e){if("string"==typeof e)return e;if(Ru(e))return ht(e,Qr)+"";if(Qu(e))return An?An.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function Kr(e,t,n){var r=-1,o=lt,i=e.length,u=!0,s=[],c=s;if(n)u=!1,o=ft;else if(i>=200){var a=t?null:Do(e);if(a)return Yt(a);u=!1,o=Et,c=new Bn}else c=t?[]:s;e:for(;++r<i;){var d=e[r],l=t?t(d):d;if(d=n||0!==d?d:0,u&&l==l){for(var f=c.length;f--;)if(c[f]===l)continue e;t&&c.push(l),s.push(d)}else o(c,l,n)||(c!==s&&c.push(l),s.push(d))}return s}function Jr(e,t){return null==(e=_i(e,t=so(t,e)))||delete e[Si(Li(t))]}function eo(e,t,n,r){return Fr(e,t,n(lr(e,t)),r)}function to(e,t,n,r){for(var o=e.length,i=r?o:-1;(r?i--:++i<o)&&t(e[i],i,e););return n?Gr(e,r?0:i,r?i+1:o):Gr(e,r?i+1:0,r?o:i)}function no(e,t){var n=e;return n instanceof En&&(n=n.value()),mt(t,(function(e,t){return t.func.apply(t.thisArg,pt([e],t.args))}),n)}function ro(e,t,n){var o=e.length;if(o<2)return o?Kr(e[0]):[];for(var i=-1,u=r(o);++i<o;)for(var s=e[i],c=-1;++c<o;)c!=i&&(u[i]=Jn(u[i]||s,e[c],t,n));return Kr(ir(u,1),t,n)}function oo(e,t,n){for(var r=-1,o=e.length,i=t.length,u={};++r<o;){var s=r<i?t[r]:void 0;n(u,e[r],s)}return u}function io(e){return Bu(e)?e:[]}function uo(e){return"function"==typeof e?e:Ws}function so(e,t){return Ru(e)?e:ai(e,t)?[e]:Mi(ss(e))}var co=Dr;function ao(e,t,n){var r=e.length;return n=void 0===n?r:n,!t&&n>=r?e:Gr(e,t,n)}var lo=Xt||function(e){return $e.clearTimeout(e)};function fo(e,t){if(t)return e.slice();var n=e.length,r=Ue?Ue(n):new e.constructor(n);return e.copy(r),r}function ho(e){var t=new e.constructor(e.byteLength);return new Be(t).set(new Be(e)),t}function po(e,t){var n=t?ho(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function mo(e,t){if(e!==t){var n=void 0!==e,r=null===e,o=e==e,i=Qu(e),u=void 0!==t,s=null===t,c=t==t,a=Qu(t);if(!s&&!a&&!i&&e>t||i&&u&&c&&!s&&!a||r&&u&&c||!n&&c||!o)return 1;if(!r&&!i&&!a&&e<t||a&&n&&o&&!r&&!i||s&&n&&o||!u&&o||!c)return-1}return 0}function _o(e,t,n,o){for(var i=-1,u=e.length,s=n.length,c=-1,a=t.length,d=un(u-s,0),l=r(a+d),f=!o;++c<a;)l[c]=t[c];for(;++i<s;)(f||i<u)&&(l[n[i]]=e[i]);for(;d--;)l[c++]=e[i++];return l}function vo(e,t,n,o){for(var i=-1,u=e.length,s=-1,c=n.length,a=-1,d=t.length,l=un(u-c,0),f=r(l+d),h=!o;++i<l;)f[i]=e[i];for(var p=i;++a<d;)f[p+a]=t[a];for(;++s<c;)(h||i<u)&&(f[p+n[s]]=e[i++]);return f}function go(e,t){var n=-1,o=e.length;for(t||(t=r(o));++n<o;)t[n]=e[n];return t}function bo(e,t,n,r){var o=!n;n||(n={});for(var i=-1,u=t.length;++i<u;){var s=t[i],c=r?r(n[s],e[s],s,n,e):void 0;void 0===c&&(c=e[s]),o?$n(n,s,c):Yn(n,s,c)}return n}function jo(e,t){return function(n,r){var o=Ru(n)?ut:Gn,i=t?t():{};return o(n,e,Qo(r,2),i)}}function yo(e){return Dr((function(t,n){var r=-1,o=n.length,i=o>1?n[o-1]:void 0,u=o>2?n[2]:void 0;for(i=e.length>3&&"function"==typeof i?(o--,i):void 0,u&&ci(n[0],n[1],u)&&(i=o<3?void 0:i,o=1),t=me(t);++r<o;){var s=n[r];s&&e(t,s,r,i)}return t}))}function xo(e,t){return function(n,r){if(null==n)return n;if(!qu(n))return e(n,r);for(var o=n.length,i=t?o:-1,u=me(n);(t?i--:++i<o)&&!1!==r(u[i],i,u););return n}}function wo(e){return function(t,n,r){for(var o=-1,i=me(t),u=r(t),s=u.length;s--;){var c=u[e?s:++o];if(!1===n(i[c],c,i))break}return t}}function Oo(e){return function(t){var n=Lt(t=ss(t))?Wt(t):void 0,r=n?n[0]:t.charAt(0),o=n?ao(n,1).join(""):t.slice(1);return r[e]()+o}}function Mo(e){return function(t){return mt(zs(Es(t).replace(Ee,"")),e,"")}}function So(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=kn(e.prototype),r=e.apply(n,t);return Yu(r)?r:n}}function Ao(e){return function(t,n,r){var o=me(t);if(!qu(t)){var i=Qo(n,3);t=js(t),n=function(e){return i(o[e],e,o)}}var u=e(t,n,r);return u>-1?o[i?t[u]:u]:void 0}}function Po(e){return Go((function(t){var n=t.length,r=n,o=Tn.prototype.thru;for(e&&t.reverse();r--;){var u=t[r];if("function"!=typeof u)throw new ge(i);if(o&&!s&&"wrapper"==Xo(u))var s=new Tn([],!0)}for(r=s?r:n;++r<n;){var c=Xo(u=t[r]),a="wrapper"==c?Vo(u):void 0;s=a&&di(a[0])&&424==a[1]&&!a[4].length&&1==a[9]?s[Xo(a[0])].apply(s,a[3]):1==u.length&&di(u)?s[c]():s.thru(u)}return function(){var e=arguments,r=e[0];if(s&&1==e.length&&Ru(r))return s.plant(r).value();for(var o=0,i=n?t[o].apply(this,e):r;++o<n;)i=t[o].call(this,i);return i}}))}function ko(e,t,n,o,i,u,s,c,a,d){var l=128&t,f=1&t,h=2&t,p=24&t,m=512&t,_=h?void 0:So(e);return function v(){for(var g=arguments.length,b=r(g),j=g;j--;)b[j]=arguments[j];if(p)var y=Zo(v),x=qt(b,y);if(o&&(b=_o(b,o,i,p)),u&&(b=vo(b,u,s,p)),g-=x,p&&g<d){var w=Ut(b,y);return Bo(e,t,ko,v.placeholder,n,b,w,c,a,d-g)}var O=f?n:this,M=h?O[e]:e;return g=b.length,c?b=vi(b,c):m&&g>1&&b.reverse(),l&&a<g&&(b.length=a),this&&this!==$e&&this instanceof v&&(M=_||So(M)),M.apply(O,b)}}function Co(e,t){return function(n,r){return function(e,t,n,r){return cr(e,(function(e,o,i){t(r,n(e),o,i)})),r}(n,e,t(r),{})}}function To(e,t){return function(n,r){var o;if(void 0===n&&void 0===r)return t;if(void 0!==n&&(o=n),void 0!==r){if(void 0===o)return r;"string"==typeof n||"string"==typeof r?(n=Qr(n),r=Qr(r)):(n=Zr(n),r=Zr(r)),o=e(n,r)}return o}}function Eo(e){return Go((function(t){return t=ht(t,Ct(Qo())),Dr((function(n){var r=this;return e(t,(function(e){return it(e,r,n)}))}))}))}function Ro(e,t){var n=(t=void 0===t?" ":Qr(t)).length;if(n<2)return n?Ir(t,e):t;var r=Ir(t,Kt(e/Gt(t)));return Lt(t)?ao(Wt(r),0,e).join(""):r.slice(0,e)}function No(e){return function(t,n,o){return o&&"number"!=typeof o&&ci(t,n,o)&&(n=o=void 0),t=ns(t),void 0===n?(n=t,t=0):n=ns(n),function(e,t,n,o){for(var i=-1,u=un(Kt((t-e)/(n||1)),0),s=r(u);u--;)s[o?u:++i]=e,e+=n;return s}(t,n,o=void 0===o?t<n?1:-1:ns(o),e)}}function qo(e){return function(t,n){return"string"==typeof t&&"string"==typeof n||(t=is(t),n=is(n)),e(t,n)}}function Bo(e,t,n,r,o,i,u,s,c,a){var d=8&t;t|=d?32:64,4&(t&=~(d?64:32))||(t&=-4);var l=[e,t,o,d?i:void 0,d?u:void 0,d?void 0:i,d?void 0:u,s,c,a],f=n.apply(void 0,l);return di(e)&&bi(f,l),f.placeholder=r,xi(f,e,t)}function Io(e){var t=pe[e];return function(e,n){if(e=is(e),(n=null==n?0:sn(rs(n),292))&&nn(e)){var r=(ss(e)+"e").split("e");return+((r=(ss(t(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return t(e)}}var Do=mn&&1/Yt(new mn([,-0]))[1]==1/0?function(e){return new mn(e)}:Qs;function Lo(e){return function(t){var n=ri(t);return n==m?zt(t):n==b?Ht(t):function(e,t){return ht(t,(function(t){return[t,e[t]]}))}(t,e(t))}}function zo(e,t,n,o,s,c,a,d){var l=2&t;if(!l&&"function"!=typeof e)throw new ge(i);var f=o?o.length:0;if(f||(t&=-97,o=s=void 0),a=void 0===a?a:un(rs(a),0),d=void 0===d?d:rs(d),f-=s?s.length:0,64&t){var h=o,p=s;o=s=void 0}var m=l?void 0:Vo(e),_=[e,t,n,o,s,h,p,c,a,d];if(m&&function(e,t){var n=e[1],r=t[1],o=n|r,i=o<131,s=128==r&&8==n||128==r&&256==n&&e[7].length<=t[8]||384==r&&t[7].length<=t[8]&&8==n;if(!i&&!s)return e;1&r&&(e[2]=t[2],o|=1&n?0:4);var c=t[3];if(c){var a=e[3];e[3]=a?_o(a,c,t[4]):c,e[4]=a?Ut(e[3],u):t[4]}(c=t[5])&&(a=e[5],e[5]=a?vo(a,c,t[6]):c,e[6]=a?Ut(e[5],u):t[6]);(c=t[7])&&(e[7]=c);128&r&&(e[8]=null==e[8]?t[8]:sn(e[8],t[8]));null==e[9]&&(e[9]=t[9]);e[0]=t[0],e[1]=o}(_,m),e=_[0],t=_[1],n=_[2],o=_[3],s=_[4],!(d=_[9]=void 0===_[9]?l?0:e.length:un(_[9]-f,0))&&24&t&&(t&=-25),t&&1!=t)v=8==t||16==t?function(e,t,n){var o=So(e);return function i(){for(var u=arguments.length,s=r(u),c=u,a=Zo(i);c--;)s[c]=arguments[c];var d=u<3&&s[0]!==a&&s[u-1]!==a?[]:Ut(s,a);if((u-=d.length)<n)return Bo(e,t,ko,i.placeholder,void 0,s,d,void 0,void 0,n-u);var l=this&&this!==$e&&this instanceof i?o:e;return it(l,this,s)}}(e,t,d):32!=t&&33!=t||s.length?ko.apply(void 0,_):function(e,t,n,o){var i=1&t,u=So(e);return function t(){for(var s=-1,c=arguments.length,a=-1,d=o.length,l=r(d+c),f=this&&this!==$e&&this instanceof t?u:e;++a<d;)l[a]=o[a];for(;c--;)l[a++]=arguments[++s];return it(f,i?n:this,l)}}(e,t,n,o);else var v=function(e,t,n){var r=1&t,o=So(e);return function t(){var i=this&&this!==$e&&this instanceof t?o:e;return i.apply(r?n:this,arguments)}}(e,t,n);return xi((m?Ur:bi)(v,_),e,t)}function Fo(e,t,n,r){return void 0===e||ku(e,ye[n])&&!Oe.call(r,n)?t:e}function Uo(e,t,n,r,o,i){return Yu(e)&&Yu(t)&&(i.set(t,e),Cr(e,t,void 0,Uo,i),i.delete(t)),e}function Yo(e){return $u(e)?void 0:e}function Ho(e,t,n,r,o,i){var u=1&n,s=e.length,c=t.length;if(s!=c&&!(u&&c>s))return!1;var a=i.get(e);if(a&&i.get(t))return a==t;var d=-1,l=!0,f=2&n?new Bn:void 0;for(i.set(e,t),i.set(t,e);++d<s;){var h=e[d],p=t[d];if(r)var m=u?r(p,h,d,t,e,i):r(h,p,d,e,t,i);if(void 0!==m){if(m)continue;l=!1;break}if(f){if(!vt(t,(function(e,t){if(!Et(f,t)&&(h===e||o(h,e,n,r,i)))return f.push(t)}))){l=!1;break}}else if(h!==p&&!o(h,p,n,r,i)){l=!1;break}}return i.delete(e),i.delete(t),l}function Go(e){return yi(mi(e,void 0,Ni),e+"")}function Wo(e){return fr(e,js,ti)}function $o(e){return fr(e,ys,ni)}var Vo=gn?function(e){return gn.get(e)}:Qs;function Xo(e){for(var t=e.name+"",n=bn[t],r=Oe.call(bn,t)?n.length:0;r--;){var o=n[r],i=o.func;if(null==i||i==e)return o.name}return t}function Zo(e){return(Oe.call(Pn,"placeholder")?Pn:e).placeholder}function Qo(){var e=Pn.iteratee||$s;return e=e===$s?wr:e,arguments.length?e(arguments[0],arguments[1]):e}function Ko(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function Jo(e){for(var t=js(e),n=t.length;n--;){var r=t[n],o=e[r];t[n]=[r,o,hi(o)]}return t}function ei(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return xr(n)?n:void 0}var ti=en?function(e){return null==e?[]:(e=me(e),dt(en(e),(function(t){return Ve.call(e,t)})))}:oc,ni=en?function(e){for(var t=[];e;)pt(t,ti(e)),e=Ge(e);return t}:oc,ri=hr;function oi(e,t,n){for(var r=-1,o=(t=so(t,e)).length,i=!1;++r<o;){var u=Si(t[r]);if(!(i=null!=e&&n(e,u)))break;e=e[u]}return i||++r!=o?i:!!(o=null==e?0:e.length)&&Uu(o)&&si(u,o)&&(Ru(e)||Eu(e))}function ii(e){return"function"!=typeof e.constructor||fi(e)?{}:kn(Ge(e))}function ui(e){return Ru(e)||Eu(e)||!!(Qe&&e&&e[Qe])}function si(e,t){var n=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==n||"symbol"!=n&&ce.test(e))&&e>-1&&e%1==0&&e<t}function ci(e,t,n){if(!Yu(n))return!1;var r=typeof t;return!!("number"==r?qu(n)&&si(t,n.length):"string"==r&&t in n)&&ku(n[t],e)}function ai(e,t){if(Ru(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!Qu(e))||(H.test(e)||!Y.test(e)||null!=t&&e in me(t))}function di(e){var t=Xo(e),n=Pn[t];if("function"!=typeof n||!(t in En.prototype))return!1;if(e===n)return!0;var r=Vo(n);return!!r&&e===r[0]}(fn&&ri(new fn(new ArrayBuffer(1)))!=O||hn&&ri(new hn)!=m||pn&&"[object Promise]"!=ri(pn.resolve())||mn&&ri(new mn)!=b||_n&&ri(new _n)!=x)&&(ri=function(e){var t=hr(e),n=t==v?e.constructor:void 0,r=n?Ai(n):"";if(r)switch(r){case jn:return O;case yn:return m;case xn:return"[object Promise]";case wn:return b;case On:return x}return t});var li=xe?zu:ic;function fi(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||ye)}function hi(e){return e==e&&!Yu(e)}function pi(e,t){return function(n){return null!=n&&(n[e]===t&&(void 0!==t||e in me(n)))}}function mi(e,t,n){return t=un(void 0===t?e.length-1:t,0),function(){for(var o=arguments,i=-1,u=un(o.length-t,0),s=r(u);++i<u;)s[i]=o[t+i];i=-1;for(var c=r(t+1);++i<t;)c[i]=o[i];return c[t]=n(s),it(e,this,c)}}function _i(e,t){return t.length<2?e:lr(e,Gr(t,0,-1))}function vi(e,t){for(var n=e.length,r=sn(t.length,n),o=go(e);r--;){var i=t[r];e[r]=si(i,n)?o[i]:void 0}return e}function gi(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}var bi=wi(Ur),ji=Qt||function(e,t){return $e.setTimeout(e,t)},yi=wi(Yr);function xi(e,t,n){var r=t+"";return yi(e,function(e,t){var n=t.length;if(!n)return e;var r=n-1;return t[r]=(n>1?"& ":"")+t[r],t=t.join(n>2?", ":" "),e.replace(Q,"{\n/* [wrapped with "+t+"] */\n")}(r,function(e,t){return st(s,(function(n){var r="_."+n[0];t&n[1]&&!lt(e,r)&&e.push(r)})),e.sort()}(function(e){var t=e.match(K);return t?t[1].split(J):[]}(r),n)))}function wi(e){var t=0,n=0;return function(){var r=cn(),o=16-(r-n);if(n=r,o>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}function Oi(e,t){var n=-1,r=e.length,o=r-1;for(t=void 0===t?r:t;++n<t;){var i=Br(n,o),u=e[i];e[i]=e[n],e[n]=u}return e.length=t,e}var Mi=function(e){var t=wu(e,(function(e){return 500===n.size&&n.clear(),e})),n=t.cache;return t}((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(G,(function(e,n,r,o){t.push(r?o.replace(te,"$1"):n||e)})),t}));function Si(e){if("string"==typeof e||Qu(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function Ai(e){if(null!=e){try{return we.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function Pi(e){if(e instanceof En)return e.clone();var t=new Tn(e.__wrapped__,e.__chain__);return t.__actions__=go(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}var ki=Dr((function(e,t){return Bu(e)?Jn(e,ir(t,1,Bu,!0)):[]})),Ci=Dr((function(e,t){var n=Li(t);return Bu(n)&&(n=void 0),Bu(e)?Jn(e,ir(t,1,Bu,!0),Qo(n,2)):[]})),Ti=Dr((function(e,t){var n=Li(t);return Bu(n)&&(n=void 0),Bu(e)?Jn(e,ir(t,1,Bu,!0),void 0,n):[]}));function Ei(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=null==n?0:rs(n);return o<0&&(o=un(r+o,0)),jt(e,Qo(t,3),o)}function Ri(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=r-1;return void 0!==n&&(o=rs(n),o=n<0?un(r+o,0):sn(o,r-1)),jt(e,Qo(t,3),o,!0)}function Ni(e){return(null==e?0:e.length)?ir(e,1):[]}function qi(e){return e&&e.length?e[0]:void 0}var Bi=Dr((function(e){var t=ht(e,io);return t.length&&t[0]===e[0]?vr(t):[]})),Ii=Dr((function(e){var t=Li(e),n=ht(e,io);return t===Li(n)?t=void 0:n.pop(),n.length&&n[0]===e[0]?vr(n,Qo(t,2)):[]})),Di=Dr((function(e){var t=Li(e),n=ht(e,io);return(t="function"==typeof t?t:void 0)&&n.pop(),n.length&&n[0]===e[0]?vr(n,void 0,t):[]}));function Li(e){var t=null==e?0:e.length;return t?e[t-1]:void 0}var zi=Dr(Fi);function Fi(e,t){return e&&e.length&&t&&t.length?Nr(e,t):e}var Ui=Go((function(e,t){var n=null==e?0:e.length,r=Vn(e,t);return qr(e,ht(t,(function(e){return si(e,n)?+e:e})).sort(mo)),r}));function Yi(e){return null==e?e:ln.call(e)}var Hi=Dr((function(e){return Kr(ir(e,1,Bu,!0))})),Gi=Dr((function(e){var t=Li(e);return Bu(t)&&(t=void 0),Kr(ir(e,1,Bu,!0),Qo(t,2))})),Wi=Dr((function(e){var t=Li(e);return t="function"==typeof t?t:void 0,Kr(ir(e,1,Bu,!0),void 0,t)}));function $i(e){if(!e||!e.length)return[];var t=0;return e=dt(e,(function(e){if(Bu(e))return t=un(e.length,t),!0})),kt(t,(function(t){return ht(e,Mt(t))}))}function Vi(e,t){if(!e||!e.length)return[];var n=$i(e);return null==t?n:ht(n,(function(e){return it(t,void 0,e)}))}var Xi=Dr((function(e,t){return Bu(e)?Jn(e,t):[]})),Zi=Dr((function(e){return ro(dt(e,Bu))})),Qi=Dr((function(e){var t=Li(e);return Bu(t)&&(t=void 0),ro(dt(e,Bu),Qo(t,2))})),Ki=Dr((function(e){var t=Li(e);return t="function"==typeof t?t:void 0,ro(dt(e,Bu),void 0,t)})),Ji=Dr($i);var eu=Dr((function(e){var t=e.length,n=t>1?e[t-1]:void 0;return n="function"==typeof n?(e.pop(),n):void 0,Vi(e,n)}));function tu(e){var t=Pn(e);return t.__chain__=!0,t}function nu(e,t){return t(e)}var ru=Go((function(e){var t=e.length,n=t?e[0]:0,r=this.__wrapped__,o=function(t){return Vn(t,e)};return!(t>1||this.__actions__.length)&&r instanceof En&&si(n)?((r=r.slice(n,+n+(t?1:0))).__actions__.push({func:nu,args:[o],thisArg:void 0}),new Tn(r,this.__chain__).thru((function(e){return t&&!e.length&&e.push(void 0),e}))):this.thru(o)}));var ou=jo((function(e,t,n){Oe.call(e,n)?++e[n]:$n(e,n,1)}));var iu=Ao(Ei),uu=Ao(Ri);function su(e,t){return(Ru(e)?st:er)(e,Qo(t,3))}function cu(e,t){return(Ru(e)?ct:tr)(e,Qo(t,3))}var au=jo((function(e,t,n){Oe.call(e,n)?e[n].push(t):$n(e,n,[t])}));var du=Dr((function(e,t,n){var o=-1,i="function"==typeof t,u=qu(e)?r(e.length):[];return er(e,(function(e){u[++o]=i?it(t,e,n):gr(e,t,n)})),u})),lu=jo((function(e,t,n){$n(e,n,t)}));function fu(e,t){return(Ru(e)?ht:Ar)(e,Qo(t,3))}var hu=jo((function(e,t,n){e[n?0:1].push(t)}),(function(){return[[],[]]}));var pu=Dr((function(e,t){if(null==e)return[];var n=t.length;return n>1&&ci(e,t[0],t[1])?t=[]:n>2&&ci(t[0],t[1],t[2])&&(t=[t[0]]),Er(e,ir(t,1),[])})),mu=Zt||function(){return $e.Date.now()};function _u(e,t,n){return t=n?void 0:t,zo(e,128,void 0,void 0,void 0,void 0,t=e&&null==t?e.length:t)}function vu(e,t){var n;if("function"!=typeof t)throw new ge(i);return e=rs(e),function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=void 0),n}}var gu=Dr((function(e,t,n){var r=1;if(n.length){var o=Ut(n,Zo(gu));r|=32}return zo(e,r,t,n,o)})),bu=Dr((function(e,t,n){var r=3;if(n.length){var o=Ut(n,Zo(bu));r|=32}return zo(t,r,e,n,o)}));function ju(e,t,n){var r,o,u,s,c,a,d=0,l=!1,f=!1,h=!0;if("function"!=typeof e)throw new ge(i);function p(t){var n=r,i=o;return r=o=void 0,d=t,s=e.apply(i,n)}function m(e){return d=e,c=ji(v,t),l?p(e):s}function _(e){var n=e-a;return void 0===a||n>=t||n<0||f&&e-d>=u}function v(){var e=mu();if(_(e))return g(e);c=ji(v,function(e){var n=t-(e-a);return f?sn(n,u-(e-d)):n}(e))}function g(e){return c=void 0,h&&r?p(e):(r=o=void 0,s)}function b(){var e=mu(),n=_(e);if(r=arguments,o=this,a=e,n){if(void 0===c)return m(a);if(f)return lo(c),c=ji(v,t),p(a)}return void 0===c&&(c=ji(v,t)),s}return t=is(t)||0,Yu(n)&&(l=!!n.leading,u=(f="maxWait"in n)?un(is(n.maxWait)||0,t):u,h="trailing"in n?!!n.trailing:h),b.cancel=function(){void 0!==c&&lo(c),d=0,r=a=o=c=void 0},b.flush=function(){return void 0===c?s:g(mu())},b}var yu=Dr((function(e,t){return Kn(e,1,t)})),xu=Dr((function(e,t,n){return Kn(e,is(t)||0,n)}));function wu(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new ge(i);var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var u=e.apply(this,r);return n.cache=i.set(o,u)||i,u};return n.cache=new(wu.Cache||qn),n}function Ou(e){if("function"!=typeof e)throw new ge(i);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}wu.Cache=qn;var Mu=co((function(e,t){var n=(t=1==t.length&&Ru(t[0])?ht(t[0],Ct(Qo())):ht(ir(t,1),Ct(Qo()))).length;return Dr((function(r){for(var o=-1,i=sn(r.length,n);++o<i;)r[o]=t[o].call(this,r[o]);return it(e,this,r)}))})),Su=Dr((function(e,t){return zo(e,32,void 0,t,Ut(t,Zo(Su)))})),Au=Dr((function(e,t){return zo(e,64,void 0,t,Ut(t,Zo(Au)))})),Pu=Go((function(e,t){return zo(e,256,void 0,void 0,void 0,t)}));function ku(e,t){return e===t||e!=e&&t!=t}var Cu=qo(pr),Tu=qo((function(e,t){return e>=t})),Eu=br(function(){return arguments}())?br:function(e){return Hu(e)&&Oe.call(e,"callee")&&!Ve.call(e,"callee")},Ru=r.isArray,Nu=Je?Ct(Je):function(e){return Hu(e)&&hr(e)==w};function qu(e){return null!=e&&Uu(e.length)&&!zu(e)}function Bu(e){return Hu(e)&&qu(e)}var Iu=tn||ic,Du=et?Ct(et):function(e){return Hu(e)&&hr(e)==l};function Lu(e){if(!Hu(e))return!1;var t=hr(e);return t==f||"[object DOMException]"==t||"string"==typeof e.message&&"string"==typeof e.name&&!$u(e)}function zu(e){if(!Yu(e))return!1;var t=hr(e);return t==h||t==p||"[object AsyncFunction]"==t||"[object Proxy]"==t}function Fu(e){return"number"==typeof e&&e==rs(e)}function Uu(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}function Yu(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Hu(e){return null!=e&&"object"==typeof e}var Gu=tt?Ct(tt):function(e){return Hu(e)&&ri(e)==m};function Wu(e){return"number"==typeof e||Hu(e)&&hr(e)==_}function $u(e){if(!Hu(e)||hr(e)!=v)return!1;var t=Ge(e);if(null===t)return!0;var n=Oe.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&we.call(n)==Pe}var Vu=nt?Ct(nt):function(e){return Hu(e)&&hr(e)==g};var Xu=rt?Ct(rt):function(e){return Hu(e)&&ri(e)==b};function Zu(e){return"string"==typeof e||!Ru(e)&&Hu(e)&&hr(e)==j}function Qu(e){return"symbol"==typeof e||Hu(e)&&hr(e)==y}var Ku=ot?Ct(ot):function(e){return Hu(e)&&Uu(e.length)&&!!ze[hr(e)]};var Ju=qo(Sr),es=qo((function(e,t){return e<=t}));function ts(e){if(!e)return[];if(qu(e))return Zu(e)?Wt(e):go(e);if(Ke&&e[Ke])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[Ke]());var t=ri(e);return(t==m?zt:t==b?Yt:ks)(e)}function ns(e){return e?(e=is(e))===1/0||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}function rs(e){var t=ns(e),n=t%1;return t==t?n?t-n:t:0}function os(e){return e?Xn(rs(e),0,4294967295):0}function is(e){if("number"==typeof e)return e;if(Qu(e))return NaN;if(Yu(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=Yu(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(V,"");var n=ie.test(e);return n||se.test(e)?He(e.slice(2),n?2:8):oe.test(e)?NaN:+e}function us(e){return bo(e,ys(e))}function ss(e){return null==e?"":Qr(e)}var cs=yo((function(e,t){if(fi(t)||qu(t))bo(t,js(t),e);else for(var n in t)Oe.call(t,n)&&Yn(e,n,t[n])})),as=yo((function(e,t){bo(t,ys(t),e)})),ds=yo((function(e,t,n,r){bo(t,ys(t),e,r)})),ls=yo((function(e,t,n,r){bo(t,js(t),e,r)})),fs=Go(Vn);var hs=Dr((function(e,t){e=me(e);var n=-1,r=t.length,o=r>2?t[2]:void 0;for(o&&ci(t[0],t[1],o)&&(r=1);++n<r;)for(var i=t[n],u=ys(i),s=-1,c=u.length;++s<c;){var a=u[s],d=e[a];(void 0===d||ku(d,ye[a])&&!Oe.call(e,a))&&(e[a]=i[a])}return e})),ps=Dr((function(e){return e.push(void 0,Uo),it(ws,void 0,e)}));function ms(e,t,n){var r=null==e?void 0:lr(e,t);return void 0===r?n:r}function _s(e,t){return null!=e&&oi(e,t,_r)}var vs=Co((function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=Ae.call(t)),e[t]=n}),Ys(Ws)),gs=Co((function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=Ae.call(t)),Oe.call(e,t)?e[t].push(n):e[t]=[n]}),Qo),bs=Dr(gr);function js(e){return qu(e)?Dn(e):Or(e)}function ys(e){return qu(e)?Dn(e,!0):Mr(e)}var xs=yo((function(e,t,n){Cr(e,t,n)})),ws=yo((function(e,t,n,r){Cr(e,t,n,r)})),Os=Go((function(e,t){var n={};if(null==e)return n;var r=!1;t=ht(t,(function(t){return t=so(t,e),r||(r=t.length>1),t})),bo(e,$o(e),n),r&&(n=Zn(n,7,Yo));for(var o=t.length;o--;)Jr(n,t[o]);return n}));var Ms=Go((function(e,t){return null==e?{}:function(e,t){return Rr(e,t,(function(t,n){return _s(e,n)}))}(e,t)}));function Ss(e,t){if(null==e)return{};var n=ht($o(e),(function(e){return[e]}));return t=Qo(t),Rr(e,n,(function(e,n){return t(e,n[0])}))}var As=Lo(js),Ps=Lo(ys);function ks(e){return null==e?[]:Tt(e,js(e))}var Cs=Mo((function(e,t,n){return t=t.toLowerCase(),e+(n?Ts(t):t)}));function Ts(e){return Ls(ss(e).toLowerCase())}function Es(e){return(e=ss(e))&&e.replace(ae,Bt).replace(Re,"")}var Rs=Mo((function(e,t,n){return e+(n?"-":"")+t.toLowerCase()})),Ns=Mo((function(e,t,n){return e+(n?" ":"")+t.toLowerCase()})),qs=Oo("toLowerCase");var Bs=Mo((function(e,t,n){return e+(n?"_":"")+t.toLowerCase()}));var Is=Mo((function(e,t,n){return e+(n?" ":"")+Ls(t)}));var Ds=Mo((function(e,t,n){return e+(n?" ":"")+t.toUpperCase()})),Ls=Oo("toUpperCase");function zs(e,t,n){return e=ss(e),void 0===(t=n?void 0:t)?function(e){return Ie.test(e)}(e)?function(e){return e.match(qe)||[]}(e):function(e){return e.match(ee)||[]}(e):e.match(t)||[]}var Fs=Dr((function(e,t){try{return it(e,void 0,t)}catch(e){return Lu(e)?e:new fe(e)}})),Us=Go((function(e,t){return st(t,(function(t){t=Si(t),$n(e,t,gu(e[t],e))})),e}));function Ys(e){return function(){return e}}var Hs=Po(),Gs=Po(!0);function Ws(e){return e}function $s(e){return wr("function"==typeof e?e:Zn(e,1))}var Vs=Dr((function(e,t){return function(n){return gr(n,e,t)}})),Xs=Dr((function(e,t){return function(n){return gr(e,n,t)}}));function Zs(e,t,n){var r=js(t),o=dr(t,r);null!=n||Yu(t)&&(o.length||!r.length)||(n=t,t=e,e=this,o=dr(t,js(t)));var i=!(Yu(n)&&"chain"in n&&!n.chain),u=zu(e);return st(o,(function(n){var r=t[n];e[n]=r,u&&(e.prototype[n]=function(){var t=this.__chain__;if(i||t){var n=e(this.__wrapped__),o=n.__actions__=go(this.__actions__);return o.push({func:r,args:arguments,thisArg:e}),n.__chain__=t,n}return r.apply(e,pt([this.value()],arguments))})})),e}function Qs(){}var Ks=Eo(ht),Js=Eo(at),ec=Eo(vt);function tc(e){return ai(e)?Mt(Si(e)):function(e){return function(t){return lr(t,e)}}(e)}var nc=No(),rc=No(!0);function oc(){return[]}function ic(){return!1}var uc=To((function(e,t){return e+t}),0),sc=Io("ceil"),cc=To((function(e,t){return e/t}),1),ac=Io("floor");var dc,lc=To((function(e,t){return e*t}),1),fc=Io("round"),hc=To((function(e,t){return e-t}),0);return Pn.after=function(e,t){if("function"!=typeof t)throw new ge(i);return e=rs(e),function(){if(--e<1)return t.apply(this,arguments)}},Pn.ary=_u,Pn.assign=cs,Pn.assignIn=as,Pn.assignInWith=ds,Pn.assignWith=ls,Pn.at=fs,Pn.before=vu,Pn.bind=gu,Pn.bindAll=Us,Pn.bindKey=bu,Pn.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return Ru(e)?e:[e]},Pn.chain=tu,Pn.chunk=function(e,t,n){t=(n?ci(e,t,n):void 0===t)?1:un(rs(t),0);var o=null==e?0:e.length;if(!o||t<1)return[];for(var i=0,u=0,s=r(Kt(o/t));i<o;)s[u++]=Gr(e,i,i+=t);return s},Pn.compact=function(e){for(var t=-1,n=null==e?0:e.length,r=0,o=[];++t<n;){var i=e[t];i&&(o[r++]=i)}return o},Pn.concat=function(){var e=arguments.length;if(!e)return[];for(var t=r(e-1),n=arguments[0],o=e;o--;)t[o-1]=arguments[o];return pt(Ru(n)?go(n):[n],ir(t,1))},Pn.cond=function(e){var t=null==e?0:e.length,n=Qo();return e=t?ht(e,(function(e){if("function"!=typeof e[1])throw new ge(i);return[n(e[0]),e[1]]})):[],Dr((function(n){for(var r=-1;++r<t;){var o=e[r];if(it(o[0],this,n))return it(o[1],this,n)}}))},Pn.conforms=function(e){return function(e){var t=js(e);return function(n){return Qn(n,e,t)}}(Zn(e,1))},Pn.constant=Ys,Pn.countBy=ou,Pn.create=function(e,t){var n=kn(e);return null==t?n:Wn(n,t)},Pn.curry=function e(t,n,r){var o=zo(t,8,void 0,void 0,void 0,void 0,void 0,n=r?void 0:n);return o.placeholder=e.placeholder,o},Pn.curryRight=function e(t,n,r){var o=zo(t,16,void 0,void 0,void 0,void 0,void 0,n=r?void 0:n);return o.placeholder=e.placeholder,o},Pn.debounce=ju,Pn.defaults=hs,Pn.defaultsDeep=ps,Pn.defer=yu,Pn.delay=xu,Pn.difference=ki,Pn.differenceBy=Ci,Pn.differenceWith=Ti,Pn.drop=function(e,t,n){var r=null==e?0:e.length;return r?Gr(e,(t=n||void 0===t?1:rs(t))<0?0:t,r):[]},Pn.dropRight=function(e,t,n){var r=null==e?0:e.length;return r?Gr(e,0,(t=r-(t=n||void 0===t?1:rs(t)))<0?0:t):[]},Pn.dropRightWhile=function(e,t){return e&&e.length?to(e,Qo(t,3),!0,!0):[]},Pn.dropWhile=function(e,t){return e&&e.length?to(e,Qo(t,3),!0):[]},Pn.fill=function(e,t,n,r){var o=null==e?0:e.length;return o?(n&&"number"!=typeof n&&ci(e,t,n)&&(n=0,r=o),function(e,t,n,r){var o=e.length;for((n=rs(n))<0&&(n=-n>o?0:o+n),(r=void 0===r||r>o?o:rs(r))<0&&(r+=o),r=n>r?0:os(r);n<r;)e[n++]=t;return e}(e,t,n,r)):[]},Pn.filter=function(e,t){return(Ru(e)?dt:or)(e,Qo(t,3))},Pn.flatMap=function(e,t){return ir(fu(e,t),1)},Pn.flatMapDeep=function(e,t){return ir(fu(e,t),1/0)},Pn.flatMapDepth=function(e,t,n){return n=void 0===n?1:rs(n),ir(fu(e,t),n)},Pn.flatten=Ni,Pn.flattenDeep=function(e){return(null==e?0:e.length)?ir(e,1/0):[]},Pn.flattenDepth=function(e,t){return(null==e?0:e.length)?ir(e,t=void 0===t?1:rs(t)):[]},Pn.flip=function(e){return zo(e,512)},Pn.flow=Hs,Pn.flowRight=Gs,Pn.fromPairs=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var o=e[t];r[o[0]]=o[1]}return r},Pn.functions=function(e){return null==e?[]:dr(e,js(e))},Pn.functionsIn=function(e){return null==e?[]:dr(e,ys(e))},Pn.groupBy=au,Pn.initial=function(e){return(null==e?0:e.length)?Gr(e,0,-1):[]},Pn.intersection=Bi,Pn.intersectionBy=Ii,Pn.intersectionWith=Di,Pn.invert=vs,Pn.invertBy=gs,Pn.invokeMap=du,Pn.iteratee=$s,Pn.keyBy=lu,Pn.keys=js,Pn.keysIn=ys,Pn.map=fu,Pn.mapKeys=function(e,t){var n={};return t=Qo(t,3),cr(e,(function(e,r,o){$n(n,t(e,r,o),e)})),n},Pn.mapValues=function(e,t){var n={};return t=Qo(t,3),cr(e,(function(e,r,o){$n(n,r,t(e,r,o))})),n},Pn.matches=function(e){return Pr(Zn(e,1))},Pn.matchesProperty=function(e,t){return kr(e,Zn(t,1))},Pn.memoize=wu,Pn.merge=xs,Pn.mergeWith=ws,Pn.method=Vs,Pn.methodOf=Xs,Pn.mixin=Zs,Pn.negate=Ou,Pn.nthArg=function(e){return e=rs(e),Dr((function(t){return Tr(t,e)}))},Pn.omit=Os,Pn.omitBy=function(e,t){return Ss(e,Ou(Qo(t)))},Pn.once=function(e){return vu(2,e)},Pn.orderBy=function(e,t,n,r){return null==e?[]:(Ru(t)||(t=null==t?[]:[t]),Ru(n=r?void 0:n)||(n=null==n?[]:[n]),Er(e,t,n))},Pn.over=Ks,Pn.overArgs=Mu,Pn.overEvery=Js,Pn.overSome=ec,Pn.partial=Su,Pn.partialRight=Au,Pn.partition=hu,Pn.pick=Ms,Pn.pickBy=Ss,Pn.property=tc,Pn.propertyOf=function(e){return function(t){return null==e?void 0:lr(e,t)}},Pn.pull=zi,Pn.pullAll=Fi,Pn.pullAllBy=function(e,t,n){return e&&e.length&&t&&t.length?Nr(e,t,Qo(n,2)):e},Pn.pullAllWith=function(e,t,n){return e&&e.length&&t&&t.length?Nr(e,t,void 0,n):e},Pn.pullAt=Ui,Pn.range=nc,Pn.rangeRight=rc,Pn.rearg=Pu,Pn.reject=function(e,t){return(Ru(e)?dt:or)(e,Ou(Qo(t,3)))},Pn.remove=function(e,t){var n=[];if(!e||!e.length)return n;var r=-1,o=[],i=e.length;for(t=Qo(t,3);++r<i;){var u=e[r];t(u,r,e)&&(n.push(u),o.push(r))}return qr(e,o),n},Pn.rest=function(e,t){if("function"!=typeof e)throw new ge(i);return Dr(e,t=void 0===t?t:rs(t))},Pn.reverse=Yi,Pn.sampleSize=function(e,t,n){return t=(n?ci(e,t,n):void 0===t)?1:rs(t),(Ru(e)?zn:zr)(e,t)},Pn.set=function(e,t,n){return null==e?e:Fr(e,t,n)},Pn.setWith=function(e,t,n,r){return r="function"==typeof r?r:void 0,null==e?e:Fr(e,t,n,r)},Pn.shuffle=function(e){return(Ru(e)?Fn:Hr)(e)},Pn.slice=function(e,t,n){var r=null==e?0:e.length;return r?(n&&"number"!=typeof n&&ci(e,t,n)?(t=0,n=r):(t=null==t?0:rs(t),n=void 0===n?r:rs(n)),Gr(e,t,n)):[]},Pn.sortBy=pu,Pn.sortedUniq=function(e){return e&&e.length?Xr(e):[]},Pn.sortedUniqBy=function(e,t){return e&&e.length?Xr(e,Qo(t,2)):[]},Pn.split=function(e,t,n){return n&&"number"!=typeof n&&ci(e,t,n)&&(t=n=void 0),(n=void 0===n?4294967295:n>>>0)?(e=ss(e))&&("string"==typeof t||null!=t&&!Vu(t))&&!(t=Qr(t))&&Lt(e)?ao(Wt(e),0,n):e.split(t,n):[]},Pn.spread=function(e,t){if("function"!=typeof e)throw new ge(i);return t=null==t?0:un(rs(t),0),Dr((function(n){var r=n[t],o=ao(n,0,t);return r&&pt(o,r),it(e,this,o)}))},Pn.tail=function(e){var t=null==e?0:e.length;return t?Gr(e,1,t):[]},Pn.take=function(e,t,n){return e&&e.length?Gr(e,0,(t=n||void 0===t?1:rs(t))<0?0:t):[]},Pn.takeRight=function(e,t,n){var r=null==e?0:e.length;return r?Gr(e,(t=r-(t=n||void 0===t?1:rs(t)))<0?0:t,r):[]},Pn.takeRightWhile=function(e,t){return e&&e.length?to(e,Qo(t,3),!1,!0):[]},Pn.takeWhile=function(e,t){return e&&e.length?to(e,Qo(t,3)):[]},Pn.tap=function(e,t){return t(e),e},Pn.throttle=function(e,t,n){var r=!0,o=!0;if("function"!=typeof e)throw new ge(i);return Yu(n)&&(r="leading"in n?!!n.leading:r,o="trailing"in n?!!n.trailing:o),ju(e,t,{leading:r,maxWait:t,trailing:o})},Pn.thru=nu,Pn.toArray=ts,Pn.toPairs=As,Pn.toPairsIn=Ps,Pn.toPath=function(e){return Ru(e)?ht(e,Si):Qu(e)?[e]:go(Mi(ss(e)))},Pn.toPlainObject=us,Pn.transform=function(e,t,n){var r=Ru(e),o=r||Iu(e)||Ku(e);if(t=Qo(t,4),null==n){var i=e&&e.constructor;n=o?r?new i:[]:Yu(e)&&zu(i)?kn(Ge(e)):{}}return(o?st:cr)(e,(function(e,r,o){return t(n,e,r,o)})),n},Pn.unary=function(e){return _u(e,1)},Pn.union=Hi,Pn.unionBy=Gi,Pn.unionWith=Wi,Pn.uniq=function(e){return e&&e.length?Kr(e):[]},Pn.uniqBy=function(e,t){return e&&e.length?Kr(e,Qo(t,2)):[]},Pn.uniqWith=function(e,t){return t="function"==typeof t?t:void 0,e&&e.length?Kr(e,void 0,t):[]},Pn.unset=function(e,t){return null==e||Jr(e,t)},Pn.unzip=$i,Pn.unzipWith=Vi,Pn.update=function(e,t,n){return null==e?e:eo(e,t,uo(n))},Pn.updateWith=function(e,t,n,r){return r="function"==typeof r?r:void 0,null==e?e:eo(e,t,uo(n),r)},Pn.values=ks,Pn.valuesIn=function(e){return null==e?[]:Tt(e,ys(e))},Pn.without=Xi,Pn.words=zs,Pn.wrap=function(e,t){return Su(uo(t),e)},Pn.xor=Zi,Pn.xorBy=Qi,Pn.xorWith=Ki,Pn.zip=Ji,Pn.zipObject=function(e,t){return oo(e||[],t||[],Yn)},Pn.zipObjectDeep=function(e,t){return oo(e||[],t||[],Fr)},Pn.zipWith=eu,Pn.entries=As,Pn.entriesIn=Ps,Pn.extend=as,Pn.extendWith=ds,Zs(Pn,Pn),Pn.add=uc,Pn.attempt=Fs,Pn.camelCase=Cs,Pn.capitalize=Ts,Pn.ceil=sc,Pn.clamp=function(e,t,n){return void 0===n&&(n=t,t=void 0),void 0!==n&&(n=(n=is(n))==n?n:0),void 0!==t&&(t=(t=is(t))==t?t:0),Xn(is(e),t,n)},Pn.clone=function(e){return Zn(e,4)},Pn.cloneDeep=function(e){return Zn(e,5)},Pn.cloneDeepWith=function(e,t){return Zn(e,5,t="function"==typeof t?t:void 0)},Pn.cloneWith=function(e,t){return Zn(e,4,t="function"==typeof t?t:void 0)},Pn.conformsTo=function(e,t){return null==t||Qn(e,t,js(t))},Pn.deburr=Es,Pn.defaultTo=function(e,t){return null==e||e!=e?t:e},Pn.divide=cc,Pn.endsWith=function(e,t,n){e=ss(e),t=Qr(t);var r=e.length,o=n=void 0===n?r:Xn(rs(n),0,r);return(n-=t.length)>=0&&e.slice(n,o)==t},Pn.eq=ku,Pn.escape=function(e){return(e=ss(e))&&L.test(e)?e.replace(I,It):e},Pn.escapeRegExp=function(e){return(e=ss(e))&&$.test(e)?e.replace(W,"\\$&"):e},Pn.every=function(e,t,n){var r=Ru(e)?at:nr;return n&&ci(e,t,n)&&(t=void 0),r(e,Qo(t,3))},Pn.find=iu,Pn.findIndex=Ei,Pn.findKey=function(e,t){return bt(e,Qo(t,3),cr)},Pn.findLast=uu,Pn.findLastIndex=Ri,Pn.findLastKey=function(e,t){return bt(e,Qo(t,3),ar)},Pn.floor=ac,Pn.forEach=su,Pn.forEachRight=cu,Pn.forIn=function(e,t){return null==e?e:ur(e,Qo(t,3),ys)},Pn.forInRight=function(e,t){return null==e?e:sr(e,Qo(t,3),ys)},Pn.forOwn=function(e,t){return e&&cr(e,Qo(t,3))},Pn.forOwnRight=function(e,t){return e&&ar(e,Qo(t,3))},Pn.get=ms,Pn.gt=Cu,Pn.gte=Tu,Pn.has=function(e,t){return null!=e&&oi(e,t,mr)},Pn.hasIn=_s,Pn.head=qi,Pn.identity=Ws,Pn.includes=function(e,t,n,r){e=qu(e)?e:ks(e),n=n&&!r?rs(n):0;var o=e.length;return n<0&&(n=un(o+n,0)),Zu(e)?n<=o&&e.indexOf(t,n)>-1:!!o&&yt(e,t,n)>-1},Pn.indexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=null==n?0:rs(n);return o<0&&(o=un(r+o,0)),yt(e,t,o)},Pn.inRange=function(e,t,n){return t=ns(t),void 0===n?(n=t,t=0):n=ns(n),function(e,t,n){return e>=sn(t,n)&&e<un(t,n)}(e=is(e),t,n)},Pn.invoke=bs,Pn.isArguments=Eu,Pn.isArray=Ru,Pn.isArrayBuffer=Nu,Pn.isArrayLike=qu,Pn.isArrayLikeObject=Bu,Pn.isBoolean=function(e){return!0===e||!1===e||Hu(e)&&hr(e)==d},Pn.isBuffer=Iu,Pn.isDate=Du,Pn.isElement=function(e){return Hu(e)&&1===e.nodeType&&!$u(e)},Pn.isEmpty=function(e){if(null==e)return!0;if(qu(e)&&(Ru(e)||"string"==typeof e||"function"==typeof e.splice||Iu(e)||Ku(e)||Eu(e)))return!e.length;var t=ri(e);if(t==m||t==b)return!e.size;if(fi(e))return!Or(e).length;for(var n in e)if(Oe.call(e,n))return!1;return!0},Pn.isEqual=function(e,t){return jr(e,t)},Pn.isEqualWith=function(e,t,n){var r=(n="function"==typeof n?n:void 0)?n(e,t):void 0;return void 0===r?jr(e,t,void 0,n):!!r},Pn.isError=Lu,Pn.isFinite=function(e){return"number"==typeof e&&nn(e)},Pn.isFunction=zu,Pn.isInteger=Fu,Pn.isLength=Uu,Pn.isMap=Gu,Pn.isMatch=function(e,t){return e===t||yr(e,t,Jo(t))},Pn.isMatchWith=function(e,t,n){return n="function"==typeof n?n:void 0,yr(e,t,Jo(t),n)},Pn.isNaN=function(e){return Wu(e)&&e!=+e},Pn.isNative=function(e){if(li(e))throw new fe("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return xr(e)},Pn.isNil=function(e){return null==e},Pn.isNull=function(e){return null===e},Pn.isNumber=Wu,Pn.isObject=Yu,Pn.isObjectLike=Hu,Pn.isPlainObject=$u,Pn.isRegExp=Vu,Pn.isSafeInteger=function(e){return Fu(e)&&e>=-9007199254740991&&e<=9007199254740991},Pn.isSet=Xu,Pn.isString=Zu,Pn.isSymbol=Qu,Pn.isTypedArray=Ku,Pn.isUndefined=function(e){return void 0===e},Pn.isWeakMap=function(e){return Hu(e)&&ri(e)==x},Pn.isWeakSet=function(e){return Hu(e)&&"[object WeakSet]"==hr(e)},Pn.join=function(e,t){return null==e?"":rn.call(e,t)},Pn.kebabCase=Rs,Pn.last=Li,Pn.lastIndexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=r;return void 0!==n&&(o=(o=rs(n))<0?un(r+o,0):sn(o,r-1)),t==t?function(e,t,n){for(var r=n+1;r--;)if(e[r]===t)return r;return r}(e,t,o):jt(e,wt,o,!0)},Pn.lowerCase=Ns,Pn.lowerFirst=qs,Pn.lt=Ju,Pn.lte=es,Pn.max=function(e){return e&&e.length?rr(e,Ws,pr):void 0},Pn.maxBy=function(e,t){return e&&e.length?rr(e,Qo(t,2),pr):void 0},Pn.mean=function(e){return Ot(e,Ws)},Pn.meanBy=function(e,t){return Ot(e,Qo(t,2))},Pn.min=function(e){return e&&e.length?rr(e,Ws,Sr):void 0},Pn.minBy=function(e,t){return e&&e.length?rr(e,Qo(t,2),Sr):void 0},Pn.stubArray=oc,Pn.stubFalse=ic,Pn.stubObject=function(){return{}},Pn.stubString=function(){return""},Pn.stubTrue=function(){return!0},Pn.multiply=lc,Pn.nth=function(e,t){return e&&e.length?Tr(e,rs(t)):void 0},Pn.noConflict=function(){return $e._===this&&($e._=ke),this},Pn.noop=Qs,Pn.now=mu,Pn.pad=function(e,t,n){e=ss(e);var r=(t=rs(t))?Gt(e):0;if(!t||r>=t)return e;var o=(t-r)/2;return Ro(Jt(o),n)+e+Ro(Kt(o),n)},Pn.padEnd=function(e,t,n){e=ss(e);var r=(t=rs(t))?Gt(e):0;return t&&r<t?e+Ro(t-r,n):e},Pn.padStart=function(e,t,n){e=ss(e);var r=(t=rs(t))?Gt(e):0;return t&&r<t?Ro(t-r,n)+e:e},Pn.parseInt=function(e,t,n){return n||null==t?t=0:t&&(t=+t),an(ss(e).replace(X,""),t||0)},Pn.random=function(e,t,n){if(n&&"boolean"!=typeof n&&ci(e,t,n)&&(t=n=void 0),void 0===n&&("boolean"==typeof t?(n=t,t=void 0):"boolean"==typeof e&&(n=e,e=void 0)),void 0===e&&void 0===t?(e=0,t=1):(e=ns(e),void 0===t?(t=e,e=0):t=ns(t)),e>t){var r=e;e=t,t=r}if(n||e%1||t%1){var o=dn();return sn(e+o*(t-e+Ye("1e-"+((o+"").length-1))),t)}return Br(e,t)},Pn.reduce=function(e,t,n){var r=Ru(e)?mt:At,o=arguments.length<3;return r(e,Qo(t,4),n,o,er)},Pn.reduceRight=function(e,t,n){var r=Ru(e)?_t:At,o=arguments.length<3;return r(e,Qo(t,4),n,o,tr)},Pn.repeat=function(e,t,n){return t=(n?ci(e,t,n):void 0===t)?1:rs(t),Ir(ss(e),t)},Pn.replace=function(){var e=arguments,t=ss(e[0]);return e.length<3?t:t.replace(e[1],e[2])},Pn.result=function(e,t,n){var r=-1,o=(t=so(t,e)).length;for(o||(o=1,e=void 0);++r<o;){var i=null==e?void 0:e[Si(t[r])];void 0===i&&(r=o,i=n),e=zu(i)?i.call(e):i}return e},Pn.round=fc,Pn.runInContext=e,Pn.sample=function(e){return(Ru(e)?Ln:Lr)(e)},Pn.size=function(e){if(null==e)return 0;if(qu(e))return Zu(e)?Gt(e):e.length;var t=ri(e);return t==m||t==b?e.size:Or(e).length},Pn.snakeCase=Bs,Pn.some=function(e,t,n){var r=Ru(e)?vt:Wr;return n&&ci(e,t,n)&&(t=void 0),r(e,Qo(t,3))},Pn.sortedIndex=function(e,t){return $r(e,t)},Pn.sortedIndexBy=function(e,t,n){return Vr(e,t,Qo(n,2))},Pn.sortedIndexOf=function(e,t){var n=null==e?0:e.length;if(n){var r=$r(e,t);if(r<n&&ku(e[r],t))return r}return-1},Pn.sortedLastIndex=function(e,t){return $r(e,t,!0)},Pn.sortedLastIndexBy=function(e,t,n){return Vr(e,t,Qo(n,2),!0)},Pn.sortedLastIndexOf=function(e,t){if(null==e?0:e.length){var n=$r(e,t,!0)-1;if(ku(e[n],t))return n}return-1},Pn.startCase=Is,Pn.startsWith=function(e,t,n){return e=ss(e),n=null==n?0:Xn(rs(n),0,e.length),t=Qr(t),e.slice(n,n+t.length)==t},Pn.subtract=hc,Pn.sum=function(e){return e&&e.length?Pt(e,Ws):0},Pn.sumBy=function(e,t){return e&&e.length?Pt(e,Qo(t,2)):0},Pn.template=function(e,t,n){var r=Pn.templateSettings;n&&ci(e,t,n)&&(t=void 0),e=ss(e),t=ds({},t,r,Fo);var o,i,u=ds({},t.imports,r.imports,Fo),s=js(u),c=Tt(u,s),a=0,d=t.interpolate||de,l="__p += '",f=_e((t.escape||de).source+"|"+d.source+"|"+(d===U?ne:de).source+"|"+(t.evaluate||de).source+"|$","g"),h="//# sourceURL="+(Oe.call(t,"sourceURL")?(t.sourceURL+"").replace(/[\r\n]/g," "):"lodash.templateSources["+ ++Le+"]")+"\n";e.replace(f,(function(t,n,r,u,s,c){return r||(r=u),l+=e.slice(a,c).replace(le,Dt),n&&(o=!0,l+="' +\n__e("+n+") +\n'"),s&&(i=!0,l+="';\n"+s+";\n__p += '"),r&&(l+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),a=c+t.length,t})),l+="';\n";var p=Oe.call(t,"variable")&&t.variable;p||(l="with (obj) {\n"+l+"\n}\n"),l=(i?l.replace(R,""):l).replace(N,"$1").replace(q,"$1;"),l="function("+(p||"obj")+") {\n"+(p?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(i?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+l+"return __p\n}";var m=Fs((function(){return he(s,h+"return "+l).apply(void 0,c)}));if(m.source=l,Lu(m))throw m;return m},Pn.times=function(e,t){if((e=rs(e))<1||e>9007199254740991)return[];var n=4294967295,r=sn(e,4294967295);e-=4294967295;for(var o=kt(r,t=Qo(t));++n<e;)t(n);return o},Pn.toFinite=ns,Pn.toInteger=rs,Pn.toLength=os,Pn.toLower=function(e){return ss(e).toLowerCase()},Pn.toNumber=is,Pn.toSafeInteger=function(e){return e?Xn(rs(e),-9007199254740991,9007199254740991):0===e?e:0},Pn.toString=ss,Pn.toUpper=function(e){return ss(e).toUpperCase()},Pn.trim=function(e,t,n){if((e=ss(e))&&(n||void 0===t))return e.replace(V,"");if(!e||!(t=Qr(t)))return e;var r=Wt(e),o=Wt(t);return ao(r,Rt(r,o),Nt(r,o)+1).join("")},Pn.trimEnd=function(e,t,n){if((e=ss(e))&&(n||void 0===t))return e.replace(Z,"");if(!e||!(t=Qr(t)))return e;var r=Wt(e);return ao(r,0,Nt(r,Wt(t))+1).join("")},Pn.trimStart=function(e,t,n){if((e=ss(e))&&(n||void 0===t))return e.replace(X,"");if(!e||!(t=Qr(t)))return e;var r=Wt(e);return ao(r,Rt(r,Wt(t))).join("")},Pn.truncate=function(e,t){var n=30,r="...";if(Yu(t)){var o="separator"in t?t.separator:o;n="length"in t?rs(t.length):n,r="omission"in t?Qr(t.omission):r}var i=(e=ss(e)).length;if(Lt(e)){var u=Wt(e);i=u.length}if(n>=i)return e;var s=n-Gt(r);if(s<1)return r;var c=u?ao(u,0,s).join(""):e.slice(0,s);if(void 0===o)return c+r;if(u&&(s+=c.length-s),Vu(o)){if(e.slice(s).search(o)){var a,d=c;for(o.global||(o=_e(o.source,ss(re.exec(o))+"g")),o.lastIndex=0;a=o.exec(d);)var l=a.index;c=c.slice(0,void 0===l?s:l)}}else if(e.indexOf(Qr(o),s)!=s){var f=c.lastIndexOf(o);f>-1&&(c=c.slice(0,f))}return c+r},Pn.unescape=function(e){return(e=ss(e))&&D.test(e)?e.replace(B,$t):e},Pn.uniqueId=function(e){var t=++Me;return ss(e)+t},Pn.upperCase=Ds,Pn.upperFirst=Ls,Pn.each=su,Pn.eachRight=cu,Pn.first=qi,Zs(Pn,(dc={},cr(Pn,(function(e,t){Oe.call(Pn.prototype,t)||(dc[t]=e)})),dc),{chain:!1}),Pn.VERSION="4.17.15",st(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(e){Pn[e].placeholder=Pn})),st(["drop","take"],(function(e,t){En.prototype[e]=function(n){n=void 0===n?1:un(rs(n),0);var r=this.__filtered__&&!t?new En(this):this.clone();return r.__filtered__?r.__takeCount__=sn(n,r.__takeCount__):r.__views__.push({size:sn(n,4294967295),type:e+(r.__dir__<0?"Right":"")}),r},En.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}})),st(["filter","map","takeWhile"],(function(e,t){var n=t+1,r=1==n||3==n;En.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:Qo(e,3),type:n}),t.__filtered__=t.__filtered__||r,t}})),st(["head","last"],(function(e,t){var n="take"+(t?"Right":"");En.prototype[e]=function(){return this[n](1).value()[0]}})),st(["initial","tail"],(function(e,t){var n="drop"+(t?"":"Right");En.prototype[e]=function(){return this.__filtered__?new En(this):this[n](1)}})),En.prototype.compact=function(){return this.filter(Ws)},En.prototype.find=function(e){return this.filter(e).head()},En.prototype.findLast=function(e){return this.reverse().find(e)},En.prototype.invokeMap=Dr((function(e,t){return"function"==typeof e?new En(this):this.map((function(n){return gr(n,e,t)}))})),En.prototype.reject=function(e){return this.filter(Ou(Qo(e)))},En.prototype.slice=function(e,t){e=rs(e);var n=this;return n.__filtered__&&(e>0||t<0)?new En(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),void 0!==t&&(n=(t=rs(t))<0?n.dropRight(-t):n.take(t-e)),n)},En.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},En.prototype.toArray=function(){return this.take(4294967295)},cr(En.prototype,(function(e,t){var n=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),o=Pn[r?"take"+("last"==t?"Right":""):t],i=r||/^find/.test(t);o&&(Pn.prototype[t]=function(){var t=this.__wrapped__,u=r?[1]:arguments,s=t instanceof En,c=u[0],a=s||Ru(t),d=function(e){var t=o.apply(Pn,pt([e],u));return r&&l?t[0]:t};a&&n&&"function"==typeof c&&1!=c.length&&(s=a=!1);var l=this.__chain__,f=!!this.__actions__.length,h=i&&!l,p=s&&!f;if(!i&&a){t=p?t:new En(this);var m=e.apply(t,u);return m.__actions__.push({func:nu,args:[d],thisArg:void 0}),new Tn(m,l)}return h&&p?e.apply(this,u):(m=this.thru(d),h?r?m.value()[0]:m.value():m)})})),st(["pop","push","shift","sort","splice","unshift"],(function(e){var t=be[e],n=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",r=/^(?:pop|shift)$/.test(e);Pn.prototype[e]=function(){var e=arguments;if(r&&!this.__chain__){var o=this.value();return t.apply(Ru(o)?o:[],e)}return this[n]((function(n){return t.apply(Ru(n)?n:[],e)}))}})),cr(En.prototype,(function(e,t){var n=Pn[t];if(n){var r=n.name+"";Oe.call(bn,r)||(bn[r]=[]),bn[r].push({name:t,func:n})}})),bn[ko(void 0,2).name]=[{name:"wrapper",func:void 0}],En.prototype.clone=function(){var e=new En(this.__wrapped__);return e.__actions__=go(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=go(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=go(this.__views__),e},En.prototype.reverse=function(){if(this.__filtered__){var e=new En(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},En.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,n=Ru(e),r=t<0,o=n?e.length:0,i=function(e,t,n){var r=-1,o=n.length;for(;++r<o;){var i=n[r],u=i.size;switch(i.type){case"drop":e+=u;break;case"dropRight":t-=u;break;case"take":t=sn(t,e+u);break;case"takeRight":e=un(e,t-u)}}return{start:e,end:t}}(0,o,this.__views__),u=i.start,s=i.end,c=s-u,a=r?s:u-1,d=this.__iteratees__,l=d.length,f=0,h=sn(c,this.__takeCount__);if(!n||!r&&o==c&&h==c)return no(e,this.__actions__);var p=[];e:for(;c--&&f<h;){for(var m=-1,_=e[a+=t];++m<l;){var v=d[m],g=v.iteratee,b=v.type,j=g(_);if(2==b)_=j;else if(!j){if(1==b)continue e;break e}}p[f++]=_}return p},Pn.prototype.at=ru,Pn.prototype.chain=function(){return tu(this)},Pn.prototype.commit=function(){return new Tn(this.value(),this.__chain__)},Pn.prototype.next=function(){void 0===this.__values__&&(this.__values__=ts(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?void 0:this.__values__[this.__index__++]}},Pn.prototype.plant=function(e){for(var t,n=this;n instanceof Cn;){var r=Pi(n);r.__index__=0,r.__values__=void 0,t?o.__wrapped__=r:t=r;var o=r;n=n.__wrapped__}return o.__wrapped__=e,t},Pn.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof En){var t=e;return this.__actions__.length&&(t=new En(this)),(t=t.reverse()).__actions__.push({func:nu,args:[Yi],thisArg:void 0}),new Tn(t,this.__chain__)}return this.thru(Yi)},Pn.prototype.toJSON=Pn.prototype.valueOf=Pn.prototype.value=function(){return no(this.__wrapped__,this.__actions__)},Pn.prototype.first=Pn.prototype.head,Ke&&(Pn.prototype[Ke]=function(){return this}),Pn}();$e._=Vt,void 0===(o=function(){return Vt}.call(t,n,t,r))||(r.exports=o)}).call(this)}).call(this,n("./node_modules/webpack/buildin/global.js"),n("./node_modules/webpack/buildin/module.js")(e))},"./node_modules/webpack/buildin/global.js":function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},"./node_modules/webpack/buildin/module.js":function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},"./src/ai.ts":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return u}));var r=n("./node_modules/lodash/lodash.js"),o=n("./src/util.ts"),i=n("./src/player.ts");class u extends i.default{constructor(e,t,n,r){super(e,t),this._board=n,this._allWeapons=r.weapons.map(e=>e.name),this._allSuspects=r.suspects.map(e=>e.name),this._allPlaces=r.places.map(e=>e.name),this._hasSeenPlaces=[],this._hasSeenWeapons=[],this._hasSeenSuspects=[],this._target=null}get isAI(){return!0}get name(){return this._suspect.name+" (AI)"}get target(){return this._target}addCard(e){super.addCard(e),this.addSeenCard(e)}addSeenCard(e){const t=e.constructor.name;"Suspect"===t?this._hasSeenSuspects.push(e.name):"Weapon"===t?this._hasSeenWeapons.push(e.name):this._hasSeenPlaces.push(e.name)}wantToCast(){if(!this.isInPlace)return!0;return this._hasSeenPlaces.includes(this.suspect.tile.place.name)?Math.random()<.5:Math.random()<.25}computeDestination(e){if(null===this._target){const e=o.distinct(this._allPlaces,this._hasSeenPlaces),t=o.randomElement(e),n=r.filter([...this._board.places.values()],e=>e.name===t);this._target=n[0]}const t=this._board.getFreeTile(this._target);return this._board.computePath(this.tile,t).slice(0,e)}suggest(){return{weapon:o.randomElement(o.distinct(this._allWeapons,this._hasSeenWeapons)),suspect:o.randomElement(o.distinct(this._allSuspects,this._hasSeenSuspects))}}wantsToAccuse(){return this._hasSeenPlaces.length+1===this._allPlaces.length&&this._hasSeenWeapons.length+1===this._allWeapons.length&&this._hasSeenSuspects.length+1===this._allSuspects.length}accuse(){const e=o.distinct(this._allWeapons,this._hasSeenWeapons),t=o.distinct(this._allSuspects,this._hasSeenSuspects),n=o.distinct(this._allPlaces,this._hasSeenPlaces);return{weapon:e[0],suspect:t[0],place:n[0]}}toString(){const e=this._cards.join("\n\t"),t=[...this._hasSeenWeapons,...this._hasSeenSuspects,...this._hasSeenPlaces].sort().join(", ");return`[AI ${this.suspect.name} \n\t${e}\n\t[Seen ${t}]\n]`}}},"./src/algorithm.ts":function(e,t,n){"use strict";function r(e,t,n){let r=[];const o=new Map,i=new Map;for(let e=0;e<n.length;e++)for(let t=0;t<n[e].length;t++)i.set(n[e][t].hashCode(),1e4),o.set(n[e][t].hashCode(),null),r.push(n[e][t]);for(i.set(e.hashCode(),0);r.length;){const e=r.reduce((function(e,t){return i.get(e.hashCode())<i.get(t.hashCode())?e:t}));if(r=r.filter((function(t){return e.x!==t.x||t.y!==e.y})),e===t)return{previous:o,distance:i};for(const t of e.neighbors.values())if(null!==t&&!t.occupied&&e.canReach(t)){const n=i.get(e.hashCode())+1;n<i.get(t.hashCode())&&(i.set(t.hashCode(),n),o.set(t.hashCode(),e))}}return{previous:o,distance:i}}function o(e,t,n){const r=[],o=new Map,i=new Map;o.set(t.hashCode(),0);for(let e=0;e<n.length;e++)for(let t=0;t<n[e].length;t++)i.set(n[e][t].hashCode(),!1);const u=[t];for(;u.length;){const t=u.shift();r.push(t);for(const n of t.neighbors.values())null===n||n.occupied||i.get(n.hashCode())||!t.canReach(n)||(o.set(n.hashCode(),o.get(t.hashCode())+1),i.set(n.hashCode(),!0),o.get(n.hashCode())<=e&&u.push(n))}return r}n.r(t),n.d(t,"computeNeighbors",(function(){return o})),n.d(t,"dijkstra",(function(){return r}))},"./src/controller.ts":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return o}));var r=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function u(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(u,s)}c((r=r.apply(e,t||[])).next())}))};class o{constructor(e,t,n){if(this.ai_turn=()=>r(this,void 0,void 0,(function*(){this._model.currentPlayerIsAI&&(yield this._ai())})),this._ai_think=()=>r(this,void 0,void 0,(function*(){const e=yield this._model.currentPlayer;return yield this._view.aiMove(e),yield e.wantToCast()})),this._ai_cast=()=>r(this,void 0,void 0,(function*(){const e=yield this._model.currentPlayer,t=yield this.castDie(),n=yield e.computeDestination(t);yield this._view.aiCast(e),yield this._makeMove(this._model.currentPlayer.tile,n[n.length-1],n)})),this._ai_suggest=()=>r(this,void 0,void 0,(function*(){const e=yield this._model.currentPlayer,t=yield e.suggest();yield this._view.aiSuggest(e,t);const n=yield this.makeSuggestion(t.suspect,t.weapon);null!==n&&(yield e.addSeenCard(n.card))})),this._ai_accuse=()=>r(this,void 0,void 0,(function*(){const e=yield this._model.currentPlayer,t=yield e.accuse();yield this._view.aiAccuse(e,t),yield this.makeAccusation(t.suspect,t.weapon,t.place)})),this._ai=()=>r(this,void 0,void 0,(function*(){(yield this._ai_think())&&(yield this._ai_cast()),this._model.currentPlayer.isInPlace&&(yield this._ai_suggest()),this._model.currentPlayer.wantsToAccuse()&&(yield this._ai_accuse()),yield this._view.aiFinishMove()})),this.castDie=()=>{this._isMove=!0,this._pips=this._model.cast();const e=this._model.tilesInRangeOfCurrPlayer(this._pips);return this._view.drawTiles(e,this._pips,this._model.currentPlayer.isAI),this._view.hideButtons(),this._pips},this.move=(e,t)=>r(this,void 0,void 0,(function*(){if(!this._isMove)return;const n=yield this._model.getPlayerTile(),r=yield this._model.getTile(e,t),o=yield this._model.computePath(n,r);o.length>this._pips?this._view.appendInfo("You cannot walk that far."):yield this._makeMove(n,r,o)})),this._makeMove=(e,t,n)=>r(this,void 0,void 0,(function*(){yield this._view.makeMove(e,t,n),yield this._model.putCurrPlayerSuspectPieceOn(t),this._isMove=!1,this._model.currentPlayer.isAI||(this._view.showSuggestButton(),this._view.showAccuseButton(),this._view.showFinishButton())})),this.suggest=()=>{this._view.hideButtons(),this._view.showSuggestions(this._model.currentPlayerIsAI)},this.makeSuggestion=(e,t)=>r(this,void 0,void 0,(function*(){const n=yield this._model.ask(e,t);for(const n of[e,t]){const e=yield this._model.moveToPlayerPlace(n);yield this._view.updatePiece(e.oldTile,e.newTile)}return yield this._view.showHolds(n,this._model.currentPlayerIsAI),this._model.currentPlayerIsAI||(this._view.showAccuseButton(),this._view.showFinishButton()),n})),this.accuse=()=>{this._view.hideButtons(),this._view.showAccusations(this._model.currentPlayerIsAI)},this.makeAccusation=(e,t,n)=>r(this,void 0,void 0,(function*(){const r=yield this._model.isSolved(e,n,t);yield this._view.makeAccusation(r),r||(yield this._model.removeCurrentPlayer(),yield this._view.removePlayerFromLegend()),this._model.currentPlayerIsAI||this._view.showFinishButton(),this._checkExit()})),this.nextPlayer=()=>r(this,void 0,void 0,(function*(){yield this._model.nextPlayer(),yield this._view.nextPlayer(),yield this._log(),yield this.ai_turn()})),this._checkExit=()=>{0===this._model.players.length&&this._view.drawExit()},this._log=()=>{for(let e=0;e<this._model.players.length;e++)console.log(this._model.players[e].toString());console.log(this._model.murderCase())},void 0===e||e<1)throw"Please provide nPlayers";this._model=t,this._view=n,this._view.bindCast(this.castDie),this._view.bindMove(this.move),this._view.bindSuggest(this.suggest),this._view.bindMakeSuggestion(this.makeSuggestion),this._view.bindAccuse(this.accuse),this._view.bindMakeAccusation(this.makeAccusation),this._view.bindNextPlayer(this.nextPlayer),this._view.bindStartGame(this.ai_turn),this._isMove=!1,this._pips=-1,this._log()}}},"./src/global.ts":function(e,t,n){"use strict";n.r(t);t.default={agora:{legend:"A",name:"Agora",path:"assets/agora.jpeg",type:"place"},alcibiades:{name:"Alcibiades",path:"assets/alcibiades.jpeg"},athena:{name:"Athena",path:"assets/athena.jpeg"},barrel:{legend:"D",name:"Diogenes' barrel",path:"assets/barrel.jpeg",type:"place"},bouleuterion:{legend:"B",name:"Bouleuterion",path:"assets/bouleuterion.jpeg",type:"place"},bow:{name:"Bow",path:"assets/bow.png"},charmides:{name:"Charmides",path:"assets/charmides.jpeg"},critias:{name:"Critias",path:"assets/critias.jpeg"},dagger:{name:"Dagger",path:"assets/dagger.png"},heraclitus:{name:"Heraclitus",path:"assets/heraclitus.jpeg"},hill:{legend:"H",name:"Hill of the Muses",path:"assets/hill.jpeg",type:"place"},library:{legend:"L",name:"Library",path:"assets/library.jpeg",type:"place"},lysander:{name:"Lysander",path:"assets/lysander.jpeg"},parthenon:{legend:"P",name:"Parthenon",path:"assets/parthenon.jpeg",type:"place"},plato:{name:"Plato",path:"assets/plato.jpeg"},poison:{name:"Cup of poison",path:"assets/poison.jpeg"},rope:{name:"Rope",path:"assets/rope.jpeg"},sickle:{name:"Sickle",path:"assets/sickle.jpeg"},socrates:{name:"Socrates",path:"assets/socrates.jpeg"},temple:{legend:"U",name:"Temple of Athena",path:"assets/temple.jpeg",type:"place"},theater:{legend:"T",name:"Theater",path:"assets/theater.jpeg",type:"place"},treachery:{name:"Treachery",path:"assets/treachery.png"},tree:{legend:"S",name:"Socrates' favourite olive tree",path:"assets/tree.jpeg",type:"place"},emtpySpace:{name:"_",legend:"_",path:"assets/socrates.jpeg",type:"other"},path:{name:"_",legend:".",type:"path"}}},"./src/main.ts":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/d3/index.js"),o=n("./src/model.ts"),i=n("./src/view.ts"),u=n("./src/controller.ts"),s=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function u(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(u,s)}c((r=r.apply(e,t||[])).next())}))};const c=e=>{const t=r.select("#"+e).property("value");try{if(""===t||isNaN(t))throw null;if(t>5||t<0)throw null;return parseInt(t)}catch(e){r.select("#intro_span").text("Enter integers in range [1, 6] only!").style("color","darkred")}return null};!function(){let e=r.select("#app").append("div").attr("id","landing_page").attr("class","introduction").attr("align","center");e.append("h1").text("Cluedo - ancient Greece edition"),e.append("h2").text("Expose Socrates' murderer."),e.append("div").text("This version of Cluedo plays in ancient Greece, where Socrates, a true champion of the open society, has been murdered by one of his enemies. Players need to identify the murderer, the weapon the crime was committed with, and its place."),e=e.append("div").style("margin-top","10px").attr("align","center"),e.append("input").style("margin-right","10px").attr("type","text").style("width","350px").style("height","40px").style("display","inline-block").attr("id","intro_players_input").attr("class","nes-input").attr("placeholder","How many players?"),e.append("input").attr("type","text").style("width","350px").style("height","40px").style("display","inline-block").attr("id","intro_ai_input").attr("class","nes-input").attr("placeholder","How many AIs?"),e.append("button").style("margin-top","10px").attr("class","nes-btn").style("height","40px").style("display","inline-block").attr("type","button").attr("name","action").on("click",(function(){const e=c("intro_players_input"),t=c("intro_ai_input");var n,a;null!==e&&null!==t&&(e+t>6?r.select("#intro_span").text("Number of players + AIs needs to be <= 6!").style("color","darkred"):(n=e,a=t,s(void 0,void 0,void 0,(function*(){r.select("#landing_page").style("display","none");const e=yield new o.default(n,a),t=yield new i.default(e);yield new u.default(n+a,e,t)}))))})).text("Play"),e.append("div").style("margin-top","10px").append("span").attr("id","intro_span")}()},"./src/model.ts":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return a}));var r=n("./src/util.ts"),o=n("./src/player.ts"),i=n("./src/model/board.ts"),u=n("./src/model/dice.ts"),s=n("./src/model/cards.ts"),c=n("./src/ai.ts");class a{constructor(e,t){this._board=new i.default,this._dice=new u.default,this._cards=new s.Cards,this._players=this._initPlayers(e,t),this._currentPlayer=this._players[0],this._dealCards()}get currentPlayerIsAI(){return this._currentPlayer.isAI}get dice(){return this._dice}get cards(){return this._cards}get board(){return this._board}get currentPlayer(){return this._currentPlayer}get players(){return this._players}get nPlayers(){return this._players.length}_initPlayers(e,t){const n=e+t,i=[],u=r.randomElements(this._board.suspects,n),s=r.shuffle([...Array(e).fill(o.default),...Array(t).fill(c.default)]);for(let e=0;e<n;e++)i.push(new s[e](e,u[e],this._board,this._cards)),e>0&&(i[e-1].next=i[e],i[e].prev=i[e-1]),e===n-1&&(i[e].next=i[0],i[0].prev=i[e]);return i}_dealCards(){for(;this._players.length;)for(let e=0;e<this._players.length;e++){if(!this._cards.availableCards.length)return;this._players[e].addCard(this._cards.randomAvailableCard())}}ask(e,t){return this._currentPlayer.ask(e,this._currentPlayer.tile.place.name,t)}cast(){return this._dice.cast()}computePath(e,t){return this._board.computePath(e,t)}getTile(e,t){return this._board.adjacency[e][t]}getPlayerTile(){return this._currentPlayer.tile}isSolved(e,t,n){const r=this._cards.murderCase();return r.murderer.name===e&&r.place.name===t&&r.weapon.name===n}moveToPlayerPlace(e){const t=this._board.getPiece(e);return{oldTile:t.tile,newTile:this._board.putOnRandomTile(t,this._currentPlayer.tile.place)}}murderCase(){return this._cards.murderCase()}nextPlayer(){0!==this.nPlayers&&(this._currentPlayer=this._currentPlayer.next)}putCurrPlayerSuspectPieceOn(e){this._currentPlayer.suspect.putOn(e)}removeCurrentPlayer(){if(0===this._players.length)return;const e=this._currentPlayer.cards;this._cards.availableCards=e;const t=this._currentPlayer.next,n=this._currentPlayer.prev;n.next=t,t.prev=n,this._players=this._players.filter(e=>e.name!==this._currentPlayer.name),this._dealCards()}tilesInRangeOfCurrPlayer(e){const t=this.currentPlayer.suspect.tile;return this._board.computeNeighbors(e,t)}}},"./src/model/board.ts":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return m}));var r=n("./node_modules/lodash/lodash.js"),o=n("./src/util.ts"),i=n("./src/algorithm.ts"),u=n("./src/global.ts"),s=n("./src/model/board/board_legend.ts"),c=n("./src/model/board/board.ts"),a=n("./src/model/board/suspect.ts"),d=n("./src/model/board/weapon.ts"),l=n("./src/model/board/tile.ts"),f=n("./src/model/board/place.ts");const h=[new a.default(u.default.alcibiades.name,u.default.alcibiades.path),new a.default(u.default.charmides.name,u.default.charmides.path),new a.default(u.default.critias.name,u.default.critias.path),new a.default(u.default.heraclitus.name,u.default.heraclitus.path),new a.default(u.default.lysander.name,u.default.lysander.path),new a.default(u.default.plato.name,u.default.plato.path)],p=[new d.default(u.default.bow.name,u.default.bow.path),new d.default(u.default.dagger.name,u.default.dagger.path),new d.default(u.default.poison.name,u.default.poison.path),new d.default(u.default.rope.name,u.default.rope.path),new d.default(u.default.sickle.name,u.default.sickle.path),new d.default(u.default.treachery.name,u.default.treachery.path)];class m{constructor(){this._weapons=Array.from(p),this._suspects=Array.from(h),this._places=this._initPlaces(),this._adjacenyMatrix=this._initBoard(),this._distributeSuspectsToRooms(),this._distributeWeaponsToRooms()}get adjacency(){return this._adjacenyMatrix}get pieces(){return this._suspects.concat(this._weapons)}get suspects(){return this._suspects}get weapons(){return this._weapons}get places(){return this._places}_initPlaces(){const e=new Map;for(const t of s.default){const n=new f.default(t.place,t.legend,t.type,t.path);e.set(t.legend,n)}return e}_initBoard(){const e=[];for(let t=0;t<c.default.length;t++){e[t]=[];for(let n=0;n<c.default[t].length;n++){const r=c.default[t][n].split(""),o=this._places.get(r[0]);e[t][n]=new l.default(r[0],o,t,n,r[1]||null),o&&o.add(e[t][n])}}for(let t=0;t<c.default.length;t++)for(let n=0;n<c.default[t].length;n++)t>0&&e[t][n].neighbors.set("up",e[t-1][n]||null),t<c.default.length-1&&e[t][n].neighbors.set("down",e[t+1][n]||null),n>0&&e[t][n].neighbors.set("left",e[t][n-1]||null),n<c.default[t].length-1&&e[t][n].neighbors.set("right",e[t][n+1]||null);return e}_distributeSuspectsToRooms(){let e=this._getPlaces();e=o.randomElements(e,this._suspects.length);for(let t=0;t<this._suspects.length;t++)this.putOnRandomTile(this._suspects[t],e[t])}_distributeWeaponsToRooms(){let e=this._getPlaces();e=o.randomElements(e,this._weapons.length);for(let t=0;t<this._weapons.length;t++)this.putOnRandomTile(this._weapons[t],e[t])}_getPlaces(){return r.filter([...this._places.values()],e=>e.isPlace)}putOnRandomTile(e,t){const n=this.getFreeTile(t);return e.putOn(n),n}getFreeTile(e){const t=o.shuffle(e.tiles);for(const e of t)if(!e.occupied)return e}getPiece(e){for(const t of this.pieces)if(t.name===e)return t;return null}computePath(e,t){const n=i.dijkstra(e,t,this._adjacenyMatrix),r=[];let o=t;for(;o!==e;)r.push(o),o=n.previous.get(o.hashCode());return r.reverse()}computeNeighbors(e,t){return i.computeNeighbors(e,t,this._adjacenyMatrix)}}},"./src/model/board/board.ts":function(e,t,n){"use strict";n.r(t);t.default=[["D","D","D","D","D",".",".","S","S","S","S","S",".","L","L","L","L","L",".",".","B","B","B"],["D","D","D","D","D",".",".","S","S","S","S","S",".","L","L","L","L","L",".",".","B","B","B"],["D","D","D","D","D",".",".","S","S","S","S","S",".","L<","L","L","L","L",".",".","B","B","B"],["D","D","D","D","D",".",".","S","S","S","S","S",".","L","L","L","L","L",".",".","B","B","B"],["D","D","D","D","Dv",".",".","S","Sv","S","S","S",".","L","L","L","L","L",".",".","B<","B","B"],[".",".",".",".",".",".",".",".",".",".",".",".",".","L","L","Lvv},"./src/model/board/board_legend.ts":function(e,t,n){"use strict";n.r(t);var r=n("./src/global.ts");const o=[{legend:r.default.agora.legend,place:r.default.agora.name,type:r.default.agora.type,path:r.default.agora.path},{legend:r.default.bouleuterion.legend,place:r.default.bouleuterion.name,type:r.default.agora.type,path:r.default.bouleuterion.path},{legend:r.default.barrel.legend,place:r.default.barrel.name,type:r.default.barrel.type,path:r.default.barrel.path},{legend:r.default.hill.legend,place:r.default.hill.name,type:r.default.hill.type,path:r.default.hill.path},{legend:r.default.library.legend,place:r.default.library.name,type:r.default.library.type,path:r.default.library.path},{legend:r.default.parthenon.legend,place:r.default.parthenon.name,type:r.default.parthenon.type,path:r.default.parthenon.path},{legend:r.default.tree.legend,place:r.default.tree.name,type:r.default.tree.type,path:r.default.tree.path},{legend:r.default.theater.legend,place:r.default.theater.name,type:r.default.theater.type,path:r.default.theater.path},{legend:r.default.temple.legend,place:r.default.temple.name,type:r.default.temple.type,path:r.default.temple.path},{legend:r.default.emtpySpace.legend,place:r.default.emtpySpace.name,type:r.default.emtpySpace.type,path:r.default.emtpySpace.path},{legend:".",place:"Path",type:"path",path:null}];t.default=o},"./src/model/board/item.ts":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return r}));class r{constructor(e,t){this._name=e,this._path=t,this._tile=null}get name(){return this._name}get path(){return this._path}get tile(){return this._tile}set tile(e){this._tile=e}putOn(e){null!==this._tile&&this._tile.deoccupy(),this._tile=e,this._tile.occupyWith(this)}}},"./src/model/board/place.ts":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return r}));class r{constructor(e,t,n,r){this._name=e,this._abbreviation=t,this._path=r,this._type=n,this._tiles=[],this._isDrawn=!1}get isDrawn(){return this._isDrawn}set isDrawn(e){this._isDrawn=e}get isPlace(){return"place"===this._type}get type(){return this._type}get name(){return this._name}get ncol(){const e=this._tiles.map((function(e){return e.y}));return new Set(e).size}get nrow(){const e=this._tiles.map((function(e){return e.x}));return new Set(e).size}get path(){return this._path}get tiles(){return this._tiles}add(e){this._tiles.push(e)}}},"./src/model/board/suspect.ts":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return o}));var r=n("./src/model/board/item.ts");class o extends r.default{constructor(e,t){super(e,t)}toString(){return`[Suspect ${this._name}]`}}},"./src/model/board/tile.ts":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return r}));class r{constructor(e,t,n,r,o){this._name=e,this._place=t,this._x=n,this._y=r,this._direction={">":!1,"<":!1,"^":!1,v:!1},this._gate=o,null!==this._gate&&(this._direction[this._gate]=!0),this._isOccupied=!1,this._occupant=null,this._neighbors=new Map([["up",null],["down",null],["left",null],["right",null]])}get gate(){return this._gate}get name(){return this._name}get neighbors(){return this._neighbors}get occupant(){return this._occupant}get occupied(){return this._isOccupied}set occupied(e){this._isOccupied=e}get place(){return this._place}get x(){return this._x}get y(){return this._y}occupyWith(e){this._occupant=e,this._isOccupied=!0}deoccupy(){this._occupant=null,this._isOccupied=!1}isOtherRoomAndNoGate(e){return this.isOtherRoom(e)&&this.isNoGate(e)}isOtherRoomAndNoNeighborVerticalGate(e){return this.isOtherRoom(e)&&e.isVerticalGate()}isOtherRoom(e){return null!==e&&e.name!==this.name}isGate(){return null!==this.gate}isVerticalGate(){return this.isGateRight()||this.isGateLeft()}isGateRight(){return this._direction[">"]}isGateLeft(){return this._direction["<"]}isNoGate(e){return null!==e&&null===this.gate&&null===e.gate}canReach(e){return null!==e&&(this._name===e._name||this.isGate()||e.isGate())}hashCode(){const e=String(this.x)+"/"+String(this.y);let t=0;for(let n=0;n<e.length;n++){t=(t<<5)-t+e.charCodeAt(n),t|=0}return t}}},"./src/model/board/weapon.ts":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return o}));var r=n("./src/model/board/item.ts");class o extends r.default{constructor(e,t){super(e,t)}toString(){return`[Weapon ${this._name}]`}}},"./src/model/cards.ts":function(e,t,n){"use strict";n.r(t),n.d(t,"Cards",(function(){return f})),n.d(t,"suspects",(function(){return a})),n.d(t,"weapons",(function(){return d})),n.d(t,"places",(function(){return l}));var r=n("./src/util.ts"),o=n("./src/global.ts"),i=n("./src/model/cards/suspect.ts"),u=n("./src/model/cards/place.ts"),s=n("./src/model/cards/weapon.ts");const c=new i.default("Socrates",null),a=[new i.default(o.default.alcibiades.name,o.default.alcibiades.path),new i.default(o.default.charmides.name,o.default.charmides.path),new i.default(o.default.critias.name,o.default.critias.path),new i.default(o.default.heraclitus.name,o.default.heraclitus.path),new i.default(o.default.lysander.name,o.default.lysander.path),new i.default(o.default.plato.name,o.default.plato.path)],d=[new s.default(o.default.bow.name,o.default.bow.path),new s.default(o.default.dagger.name,o.default.dagger.path),new s.default(o.default.poison.name,o.default.poison.path),new s.default(o.default.rope.name,o.default.rope.path),new s.default(o.default.sickle.name,o.default.sickle.path),new s.default(o.default.treachery.name,o.default.treachery.path)],l=[new u.default(o.default.agora.name,o.default.agora.path),new u.default(o.default.barrel.name,o.default.barrel.path),new u.default(o.default.bouleuterion.name,o.default.bouleuterion.path),new u.default(o.default.hill.name,o.default.hill.path),new u.default(o.default.library.name,o.default.library.path),new u.default(o.default.parthenon.name,o.default.parthenon.path),new u.default(o.default.temple.name,o.default.temple.path),new u.default(o.default.theater.name,o.default.theater.path),new u.default(o.default.tree.name,o.default.tree.path)];class f{constructor(){this._murderer=r.randomElement(a),this._weapon=r.randomElement(d),this._place=r.randomElement(l),this._victim=c,this._availableCards=[...this._availableWeapons(),...this._availableSuspects(),...this._availablePlaces()]}get suspects(){return a}get weapons(){return d}get places(){return l}get availableCards(){return this._availableCards}set availableCards(e){this._availableCards=e}murderCase(){return{victim:this._victim,murderer:this._murderer,place:this._place,weapon:this._weapon}}randomAvailableCard(){const e=r.randomElement(this._availableCards);return this._availableCards=this._availableCards.filter(t=>t.name!==e.name),e}_availableSuspects(){return a.filter(e=>e.name!==this._murderer.name)}_availableWeapons(){return d.filter(e=>e.name!==this._weapon.name)}_availablePlaces(){return l.filter(e=>e.name!==this._place.name)}}},"./src/model/cards/card.ts":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return r}));class r{constructor(e,t){this.toString=()=>`[Card ${this._name}]`,this._name=e,this._path=t}get name(){return this._name}get path(){return this._path}}},"./src/model/cards/place.ts":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return o}));var r=n("./src/model/cards/card.ts");class o extends r.default{}},"./src/model/cards/suspect.ts":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return o}));var r=n("./src/model/cards/card.ts");class o extends r.default{}},"./src/model/cards/weapon.ts":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return o}));var r=n("./src/model/cards/card.ts");class o extends r.default{}},"./src/model/dice.ts":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return o}));var r=n("./src/util.ts");class o{constructor(){this._die=[1,2,3,4,5,6]}cast(){return r.randomElement(this._die)+r.randomElement(this._die)}}},"./src/player.ts":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return r}));class r{constructor(e,t){this._name=e,this._next=null,this._prev=null,this._suspect=t,this._cards=[]}get cards(){return this._cards}get isAI(){return!1}get isInPlace(){return"place"===this._suspect.tile.place.type}get name(){return this._suspect.name}get next(){return this._next}set next(e){this._next=e}get prev(){return this._prev}set prev(e){this._prev=e}get suspect(){return this._suspect}get tile(){return this._suspect.tile}addCard(e){this._cards.push(e)}ask(e,t,n){let r=this._next;for(;r!==this;){for(const o of[e,t,n]){const e=r.holds(o);if(e.length>0)return{player:r.suspect.name,card:e[0]}}r=r.next}return null}holds(e){return this._cards.filter(t=>t.name===e)}toString(){const e=this._cards.join("\n\t");return`[Player ${this.suspect.name} \n\t${e}\n]`}}},"./src/util.ts":function(e,t,n){"use strict";function r(e){for(let t=e.length-1;t>0;t--){const n=Math.floor(Math.random()*(t+1)),r=e[t];e[t]=e[n],e[n]=r}return e}function o(e,t){if(t>e.length)throw"array length < sample count";return r(e).slice(0,t)}function i(e){return o(e,1)[0]}function u(e){return new Promise(t=>setTimeout(t,e))}function s(e,t){return e.filter(e=>!t.includes(e))}n.r(t),n.d(t,"randomElement",(function(){return i})),n.d(t,"randomElements",(function(){return o})),n.d(t,"shuffle",(function(){return r})),n.d(t,"sleep",(function(){return u})),n.d(t,"distinct",(function(){return s}))},"./src/view.ts":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return s}));var r=n("./node_modules/d3/index.js"),o=n("./src/util.ts"),i=n("./src/global.ts"),u=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function u(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(u,s)}c((r=r.apply(e,t||[])).next())}))};class s{constructor(e){this._athenaHeight=400,this._athenaWidth=200,this._helpWidth=250,this._width=600,this._height=600,this._accuseButtonId="accuse_button",this._athenaDiv="athena_div",this._boardDiv="board_div",this._buttonsId="buttons",this._castButtonId="cast_die_button",this._finishMoveButtonId="finish_move_button",this._infoDiv="info_div",this._infoHeader="info_header",this._infoText="info_text",this._legendDiv="legend_div",this._legendNextButton="legend_next_button",this._legendIntroHelp="legend_intro_help",this._placesSelectDiv="places_select_div",this._placeSelectList="places_select_list",this._playerCardsList="player_card_list",this._revealCardButton="show_revealed_card_button",this._revealCardParagraph="show_revealed_card_paragraph",this._sectionLegend="section_legend",this._showCardsButton="show_cards_button",this._suggestButtonId="suggest_button",this._selectListsId="card_list",this._selectSuggestButtonId="select_suggest_button",this._selectAccuseButtonId="select_accuse_button",this._suspectsSelectDiv="suspects_select_div",this._suspectsSelectList="suspects_select_list",this._weaponsSelectDiv="weapons_select_div",this._weaponsSelectList="weapons_select_list",this._sectionLegendMarginRight=["-75px","-75px","-75px","-75px"],this._sectionLegendMarginTop=["0px","0px","-25px","-25px"],this._introTextIndex=0,this._paintedTiles=[],this._intro=()=>{const e=this._introTextIndex;return r.select("#"+this._sectionLegend).style("margin-right",this._sectionLegendMarginRight[e]).style("margin-top",this._sectionLegendMarginTop[e]),e<this._introTexts.length&&this._showText(this._legendIntroHelp,this._introTexts[e]),2===e?r.select("#"+this._boardDiv).style("display","block"):e===this._introTexts.length-1&&(r.select("#"+this._legendNextButton).style("display","none"),r.select("#"+this._infoDiv).style("display","block"),r.select("#"+this._legendDiv).style("display","block"),this._printPlayer()),this._introTextIndex++,this._introTextIndex},this.showCards=()=>{const e=r.select("#"+this._showCardsButton),t=r.select("#"+this._playerCardsList);"none"===t.style("display")?(t.style("display","block"),e.text("Hide cards")):(t.style("display","none"),e.text("Show cards"))},this.showRevealCard=()=>{const e=r.select("#"+this._revealCardButton),t=r.select("#"+this._revealCardParagraph);"none"===t.style("display")?(t.style("display","block"),e.text("Hide card")):(t.style("display","none"),e.text("Reveal card"))},this._model=e,this._board=this._model.board,this._adj=this._board.adjacency,this._suspectPieces=this._board.suspects,this._weaponPieces=this._board.weapons,this._playerPiecesNames=this._model.players.map(e=>e.suspect.name),this._introTexts=["Welcome. I am the goddess Athena, patron of the city of Athens, and I come with bad news. One of my favorite disciples, Socrates, has been murdered.","To not let this crime go unpunished, I instructed some of his acquaintances,"+this._playerPiecesNames.slice(0,-1).join(", ")+" and "+this._playerPiecesNames.pop()+" (one for each player), to expose his murderer.","The crime has been committed by 1 of "+this._suspectPieces.length+" suspects with 1 of "+this._weaponPieces.length+" weapons which are distributed in different places in Athens. I assume the murder has been committed in one of these places.","Each round a player can 'cast a die' to move between places, make a 'suggestion' to get information about suspects/weapons/places and 'accuse' someone to end the game. Now, please help me and expose the murder and save the open society.","null"],this._buildElements(),this._initAthena(),this._initBoard(),this._initInfo(),this._initLegend(),this._intro()}_buildElements(){const e=r.select("#app").append("div").attr("class","row").attr("align","center");e.append("h1").text("Cluedo - ancient Greece edition"),e.append("h2").text("Expose Socrates' murderer."),e.append("div").attr("id",this._athenaDiv).attr("class","column left").attr("align","right"),e.append("div").attr("id",this._boardDiv).attr("class","column").style("display","none").style("width",this._width+10).style("height",this._height),e.append("div").attr("id",this._infoDiv).attr("class","column right").style("display","none"),r.select("#app").append("div").attr("class","row").attr("align","center").attr("id",this._legendDiv).style("display","none")}_initAthena(){const e=r.select("#"+this._athenaDiv).append("section").attr("class","message-list"),t=e.append("section").attr("id",this._sectionLegend).attr("class","message -right column").style("width","300px");t.append("div").attr("class","nes-balloon from-right hide-when-small").append("p").attr("id",this._legendIntroHelp).style("font-size","10px"),t.append("div").attr("class","nes-balloon from-right show-when-small").append("p").text("Unfortunately your display is too small to play. Save the open society another time.").style("font-size","10px"),e.append("svg").attr("height",500).attr("width",this._athenaWidth).append("svg:image").attr("height",this._athenaHeight).attr("width",this._athenaWidth).attr("y",100).attr("xlink:href",i.default.athena.path),this._newButton(r.select("#"+this._athenaDiv),this._legendNextButton,"Next").attr("class","nes-btn hide-when-small")}_showText(e,t){r.select("#"+e).text(t)}_newButton(e,t,n){return e.append("button").attr("class","nes-btn").attr("type","button").attr("name","action").attr("id",t).text(n)}_initBoard(){this._initTiles(),this._drawPieces("Suspects",this._board.suspects),this._drawPieces("Weapons",this._board.weapons),this._drawSocrates()}_initTiles(){const e=r.select("#"+this._boardDiv).append("div").attr("class","hide-when-small").append("svg").attr("width",this._width+5).attr("height",this._height+5);for(let t=0;t<this._adj.length;t++){const n=this._row(e,t);for(let e=0;e<this._adj[t].length;e++){const r=this._adj[t][e],o=this._g(n,t,e);this._initPlace(o,t,e,r,r.place);const i=this._rect(o,r,t,e);this._path(o,i,r)}}}_row(e,t){return e.append("g").attr("width",this._width+5).attr("transform","translate(0,"+t*(this._height/this._adj.length)+")").style("display","flex")}_g(e,t,n){return e.append("g").attr("id","id_"+t+"_"+n)}_initPlace(e,t,n,r,o){!o.isDrawn&&o.isPlace&&(o.isDrawn=!0,e.append("svg:image").attr("x",this._width/this._adj[t].length*n).attr("height",((this._height-1)/this._adj.length-1)*o.nrow).attr("xlink:href",o.path))}hideButtons(){for(const e of[this._castButtonId,this._accuseButtonId,this._suggestButtonId,this._finishMoveButtonId,this._revealCardButton])this._hide(e)}_rect(e,t,n,r){return e.append("rect").attr("id","id_r_"+n+"_"+r).attr("width",(this._width-1)/this._adj[n].length-1).attr("height",(this._height-1)/this._adj.length-1).attr("fill","lightgray").attr("fill-opacity",.5).attr("x",this._width/this._adj[n].length*r).attr("row",n).attr("col",r)}_path(e,t,n){const r=parseFloat(t.attr("x")),o=parseFloat(t.attr("width")),i=parseFloat(t.attr("height"));null===n.neighbors.get("left")?e.append("polyline").attr("points","0.5,0 0.5,"+i):null===n.neighbors.get("right")&&e.append("polyline").attr("points",r+o+",0 "+(r+o)+","+i),n.isOtherRoomAndNoGate(n.neighbors.get("right"))&&e.append("polyline").attr("points",r+o+",0 "+(r+o)+","+i),n.isOtherRoomAndNoGate(n.neighbors.get("down"))&&e.append("polyline").attr("points",r+",  "+(i-2)+" "+(r+o)+","+(i-2)),n.isOtherRoomAndNoNeighborVerticalGate(n.neighbors.get("down"))&&e.append("polyline").attr("points",r+",  "+(i-2)+" "+(r+o)+","+(i-2)),n.isGateRight()&&n.isOtherRoom(n.neighbors.get("down"))&&e.append("polyline").attr("points",r+",  "+(i-2)+" "+(r+o)+","+(i-2)),null===n.neighbors.get("up")?e.append("polyline").attr("points",r+",0.5 "+(r+o)+",0.5"):null===n.neighbors.get("down")&&e.append("polyline").attr("points",r+",  "+(i-2)+" "+(r+o)+","+(i-2))}_drawPieces(e,t){for(const e of t)this._drawPiece(e.tile,e)}_drawSocrates(){const e=this._board.places.get("_");r.select("#id_7_9").append("svg:image").attr("x",this._width/this._adj[7].length*9).attr("height",((this._height-1)/this._adj.length-1)*e.nrow).attr("xlink:href",e.path);for(const t of e.tiles)r.select("#id_r_"+t.x+"_"+t.y).attr("fill","transparent")}_drawPiece(e,t){r.select("#id_"+e.x+"_"+e.y).append("svg:image").attr("x",this._width/this._adj[e.x].length*e.y).attr("width",(this._width-1)/this._adj[e.x].length-1).attr("height",(this._height-1)/this._adj.length-1).attr("xlink:href",t.path)}_removePiece(e){r.select("#id_"+e.x+"_"+e.y).selectAll("image").remove()}_initLegend(){this._initLegendForPieces("Players",this._model.players.map((function(e){return e.suspect}))),this._initLegendForPieces("Suspects",this._board.suspects.sort()),this._initLegendForPieces("Weapons",this._board.weapons.sort()),this._initLegendForPieces("Places",Object.values(this._board.places).sort()),this._initButtonDescription()}_initLegendForPieces(e,t){const n=r.select("#"+this._legendDiv).append("div").attr("class","small-column hide-when-small");n.append("h5").html(e),n.append("ul").attr("id","legend_"+e),this._initLegendPieceList("legend_"+e,t)}_initLegendPieceList(e,t){const n=r.select("#"+e);n.selectAll("li").remove();for(const e of t)"_"!==e.name&&n.append("li").append("span").text(e.name+" ").append("svg").attr("width",30).attr("height",30).append("svg:image").attr("width",30).attr("xlink:href",e.path)}_initButtonDescription(){const e=r.select("#"+this._legendDiv).append("div").attr("class","small-column hide-when-small");e.append("h5").html("Buttons");e.append("ul").selectAll("li").data(["Cast die: throw two dice and move your figure on the board","Suggest: ask your co-players for a suspect/place/weapon card","Accuse: name a suspect/place/weapon and possibly end the game","Next player: finish move and start next player's turn"]).enter().append("li").text((function(e){return e}))}_initInfo(){const e=r.select("#"+this._infoDiv).style("width",this._helpWidth).append("div").attr("class","hide-when-small");e.append("h3").html("Info");let t=e.append("div");const n=this.showCards;this._newButton(t,this._showCardsButton,"Show cards").style("margin-bottom","20px").on("click",(function(){n()})),t.append("ul").attr("id",this._playerCardsList).style("display","none"),t=e.append("div").attr("id",this._infoHeader),t.append("div").style("overflow","hidden").append("p").attr("id",this._infoText),this.showInfo("You have the following options:"),t=r.select("#"+this._infoHeader).append("div");const o=this.showRevealCard;let i=this._newButton(t,this._revealCardButton,"Reveal card");i.style("display","none").on("click",(function(){o()})),t.append("p").attr("id",this._revealCardParagraph).style("display","none"),t=r.select("#"+this._infoHeader).append("div").attr("id",this._buttonsId),this._newButton(t.append("div"),this._castButtonId,"Cast die"),this._newButton(t.append("div"),this._suggestButtonId,"Suggest"),this._newButton(t.append("div"),this._accuseButtonId,"Accuse"),this._newButton(t.append("div"),this._finishMoveButtonId,"Next player"),r.select("#"+this._infoHeader).append("div").attr("id",this._selectListsId).style("text-align","left"),this._initSelectLists("Suspects: ",this._suspectsSelectDiv,this._suspectsSelectList,this._model.cards.suspects),this._initSelectLists("Weapons: ",this._weaponsSelectDiv,this._weaponsSelectList,this._model.cards.weapons),this._initSelectLists("Places:",this._placesSelectDiv,this._placeSelectList,this._model.cards.places),t=r.select("#"+this._infoHeader).append("div"),i=this._newButton(t,this._selectSuggestButtonId,"Suggest"),i.style("display","none"),t=r.select("#"+this._infoHeader).append("div"),i=this._newButton(t,this._selectAccuseButtonId,"Accuse"),i.style("display","none")}_initSelectLists(e,t,n,o){r.select("#"+this._selectListsId).append("div").attr("align","center").attr("id",t).style("display","none").append("select").attr("align","center").attr("id",n).selectAll("option").data(o.sort()).enter().append("option").attr("value",(function(e){return e.name})).text((function(e){return e.name}))}_printPlayer(){r.select("#"+this._sectionLegend).style("margin-right","-75px").style("margin-top","50px"),r.select("#"+this._legendIntroHelp).style("width","120px").text(this._model.currentPlayer.name+"'s turn"),r.select("#"+this._playerCardsList).selectAll("li").remove();const e=r.select("#"+this._playerCardsList);for(const t of this._model.currentPlayer.cards.sort())e.append("li").append("span").text(t.name)}drawExit(){r.select("#"+this._infoDiv).selectAll("div").remove(),r.select("#"+this._infoDiv).append("div").text("You all lost. Good job. Reload the page if you want to give it another try.\n")}drawTiles(e,t,n){n?this.appendInfo(`${this._model.currentPlayer.name} cast: ${t}.\n`):this.showInfo(`${this._model.currentPlayer.name} cast: ${t}.\n`);for(const e of this._paintedTiles)this._paintTile(e.x,e.y,"lightgray");for(const t of e)this._paintTile(t.x,t.y,"#C79999");this._paintedTiles=e}_paintTile(e,t,n){return r.select("#id_r_"+e+"_"+t).style("fill",n)}showInline(e){r.select("#"+e).style("display","inline")}_hide(e){r.select("#"+e).style("display","none")}wait(e){return u(this,void 0,void 0,(function*(){yield o.sleep(e)}))}_getCheckedOption(e){return r.select("#"+e).select("option:checked").text()}makeMove(e,t,n){return u(this,void 0,void 0,(function*(){for(const e of this._paintedTiles){n.filter((function(t){return t.x===e.x&&t.y===e.y})).length||this._paintTile(e.x,e.y,"lightgray")}yield this.wait(500);let t=e;for(const e of n)yield this._drawPiece(e,this._model.currentPlayer.suspect),yield this._removePiece(t),t=e,yield this._paintTile(t.x,t.y,"lightgray"),yield this.wait(500)}))}appendInfo(e){const t=r.select("#"+this._infoText).text()+" "+e;this.showInfo(t)}showInfo(e){r.select("#"+this._infoText).text(e)}showSuggestions(e){e||this.showInfo("Select a suspect and a weapon:"),r.select("#"+this._suspectsSelectDiv).style("display","block"),r.select("#"+this._weaponsSelectDiv).style("display","block"),r.select("#"+this._selectSuggestButtonId).style("display","inline")}showAccusations(e){e||this.showInfo("Select a suspect, weapon and place:"),r.select("#"+this._suspectsSelectDiv).style("display","block"),r.select("#"+this._weaponsSelectDiv).style("display","block"),r.select("#"+this._placesSelectDiv).style("display","block"),r.select("#"+this._selectAccuseButtonId).style("display","inline")}showHolds(e,t){return u(this,void 0,void 0,(function*(){this._hide(this._suspectsSelectDiv),this._hide(this._weaponsSelectDiv),this._hide(this._selectSuggestButtonId);const n=this._model.currentPlayer.name;null!==e?t?this.appendInfo(`${e.player} showed ${n} a card.`):(this.showInfo(`${e.player} showed ${n} a card.`),r.select("#"+this._revealCardButton).style("display","inline"),r.select("#"+this._revealCardParagraph).text(e.card.name)):this.appendInfo(n+" didn't receive any card."),t&&(yield this.wait(2e3))}))}updatePiece(e,t){this._drawPiece(t,t.occupant),this._removePiece(e)}makeAccusation(e){this._hide(this._suspectsSelectDiv),this._hide(this._weaponsSelectDiv),this._hide(this._placesSelectDiv),this._hide(this._selectAccuseButtonId),e?this.showInfo("Congrats! You won! You saved the open society against its opponents. Restart the game by reloading the page."):this.showInfo("Boo! You are out!")}removePlayerFromLegend(){this._initLegendPieceList("legend_Players",this._model.players.map((function(e){return e.suspect})))}nextPlayer(){this._printPlayer(),this.showInfo("You have the following options:");let e=this._hide;this._model.nPlayers>1&&(e=this.showInline),e(this._castButtonId),e(this._suggestButtonId),e(this._finishMoveButtonId),this.showInline(this._accuseButtonId)}showSuggestButton(){this._model.currentPlayer.isInPlace&&this.showInline(this._suggestButtonId)}showAccuseButton(){this.showInline(this._accuseButtonId)}showFinishButton(){this.showInline(this._finishMoveButtonId)}aiFinishMove(){return u(this,void 0,void 0,(function*(){yield this.appendInfo(this._model.currentPlayer.name+" finishes his turn'."),yield this.showFinishButton()}))}aiMove(e){return u(this,void 0,void 0,(function*(){this.hideButtons(),this.showInfo(e.name+" is firing some neurons."),yield this.wait(2e3)}))}aiCast(e){return u(this,void 0,void 0,(function*(){yield this.appendInfo(e.name+" wants to cast a die."),yield this.wait(2e3),this.appendInfo(e.name+" decides to move "+`to place '${e.target.name}'.`),yield this.wait(2e3)}))}aiAccuse(e,t){return u(this,void 0,void 0,(function*(){this.appendInfo(e.name+" wants to make am accusation."),yield this.wait(2e3),this.appendInfo(`${e.name} accuses '${t.suspect}' who he thinks committed\n          the murder in '${t.place}' with '${t.weapon}'.`),yield this.wait(2e3)}))}aiSuggest(e,t){return u(this,void 0,void 0,(function*(){this.appendInfo(e.name+" wants to make a suggestion."),yield this.wait(2e3),this.appendInfo(`${e.name} believes '${t.suspect}'\n           committed the murder in '${e.tile.place.name}'\n           with '${t.weapon}'.`),yield this.wait(2e3)}))}bindCast(e){r.select("#"+this._castButtonId).on("click",e)}bindMove(e){r.selectAll("rect").on("click",(function(){e(r.select(this).attr("row"),r.select(this).attr("col"))}))}bindShowCards(e){r.select("#"+this._showCardsButton).on("click",e)}bindSuggest(e){r.select("#"+this._suggestButtonId).on("click",e)}bindMakeSuggestion(e){const t=this._suspectsSelectList,n=this._weaponsSelectList,o=this._getCheckedOption;r.select("#"+this._selectSuggestButtonId).on("click",(function(){e(o(t),o(n))}))}bindAccuse(e){r.select("#"+this._accuseButtonId).on("click",e)}bindMakeAccusation(e){const t=this._suspectsSelectList,n=this._weaponsSelectList,o=this._placeSelectList,i=this._getCheckedOption;r.select("#"+this._selectAccuseButtonId).on("click",(function(){e(i(t),i(n),i(o))}))}bindNextPlayer(e){r.select("#"+this._finishMoveButtonId).on("click",e)}bindStartGame(e){const t=this._intro,n=this._introTexts;r.select("#"+this._legendNextButton).on("click",(function(){t()===n.length&&e()}))}}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,